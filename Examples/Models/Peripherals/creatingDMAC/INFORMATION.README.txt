 
  Copyright (c) 2005-2021 Imperas Software Ltd. All Rights Reserved.

  The contents of this file are provided under the Software License
  Agreement that you accepted before downloading this file.

  This source forms part of the Software and can be used for educational,
  training, and demonstration purposes but cannot be used for derivative
  works except in cases where the derivative works require OVP technology
  to run.

  For open source models released under licenses that you can use for
  derivative works, please visit www.ovpworld.org or www.imperas.com
  for the location of the open source models.


FILE:Imperas/Examples/Models/Peripherals/creatingDMAC/INFORMATION.README.txt


INTRODUCTION -------------------------------------------------------
This directory contains examples to be used in conjunction with the 
OVP Peripheral Modeling Guide

This directory contains an example which shows how to construct and use
a peripheral model using the Imperas tools. The example demonstrates a
processor interacting with a model of a DMAC peripheral.

The example progresses over a series of steps:

Step 1 "registers" creates a simple peripheral with memory-mapped registers.

Step 2 "parallelThreadsAndEvents" adds bodies to the register callbacks,
       and execution threads for each DMA channel.

Step 3 "memAccess" introduces functions from the ppm library to allow access
       to the address spaces of buses connected to the peripheral.  

Step 4 "interrupt" completes the example by adding interrupt outputs and a reset input.

Step 5 "nativeBehaviour" shows how a peripheral model can use native code.

FILES --------------------------------------------------------------

Peripheral Model:

    pse.tcl
        Contains the TCL script that generates the peripheral template. Generated files
        have .igen. in their names.
   
    dmac.user.c (generated as pse.c.igen.stubs)
        The generated file pse.c.igen.stubs contains callbacks to be expanded by the user
        to add behavior and creates the user file dmac.user.c.
        If new registers and/or read/write callbacks are added to the iGen file these
        two files may be compared to see what needs to be added to the user file.

    pse.attrs.igen.c
        Contains code to describe the simulation interface of the model which is
        interrogated by the simulator.

    pse.igen.c
        Contains the initialization of the peripheral, the connection of ports 
        and the installation of registers and their callbacks.

    pse.igen.h
        To be included by C files. this defines the register structures
   
    pse.macros.igen.h
        Macros defining register and bit offsets in the model. Might be useful in application
        code that uses this model.

Test Application:

    dmaTest.c, dmacRegisters.h
        Source files for the test program running on the processor.

Virtual Platform Hardware Definition:

    module.op.tcl
        The hardware definition for the virtual platform.

Infrastructure and Building:

    Makefiles are present for building:
        1. Peripheral:
            Uses iGen to generate the C files implementing the peripheral model 
            that are compiled to produce executable code for the Peripheral Simulation Environment (PSE).
        2. Application:
            Cross compiles the C files for the test application to create a loadable elf file.
        3. Module:
            Uses iGen to generate the C files of the OVP hardware description that is compiled 
            to a shared object that is loaded and executed by the harness.exe and which 
            loads, processor and peripheral model components.

RUNNING THE EXAMPLES -----------------------------------------------

Building Executables
    Build the application, the OVP module hardware definition and the peripheral
    pse executable. To build all parts of the example use the commands

> make -C application     
> make -C module           NOVLNV=1

> make -C peripheral/pse   NOVLNV=1 
> make -C peripheral/model NOVLNV=1 

    
Running the example
    The example is run from the command line using the following
    
> harness.exe --modulefile module/model.so \
              --program application/dmaTest.RISCV32.elf


    
    

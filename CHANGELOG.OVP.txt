###############################################################################
#                           CHANGELOG.OVP.txt                                 #
#      Copyright (c) 2005-2021 Imperas Software Ltd., www.imperas.com         #
#               Covered under your Software License Agreement                 #
#                                                                             #
###############################################################################
#                                                                             #
# Please refer to the change logs below for specific processor model changes  #
#    CHANGELOG.MODEL.RISCV.txt                                                #
#    CHANGELOG.MODEL.ARM.txt                                                  #
#    CHANGELOG.MODEL.MIPS.txt                                                 #
#                                                                             #
###############################################################################
    Date : 20211231                        Version : 20211118.0
###############################################################################

###############################################################################
##                                                                           ##
## Date 2021-December-06                                                     ##
##                                                                           ##
## Release 20211118.0                                                        ##
##                                                                           ##
###############################################################################

PLIC models
-------------------------------------------------------------------------------
- The behavior when an interrupt source becomes active while a target has a
  claim in process has been fixed - the interrupt signal for the target will
  not become active until AFTER the claim is completed. 
  (Note: When a claim is made by asserting the Andes vector mode iack signal,
  as opposed to writing to the claim register, the interrupt may become active 
  as soon as the iack signal is deasserted.)
- Support for vector mode has been added to the andes.ovpworld.org NCEPLIC100
  peripheral model.
  
Codasip Processor model
-------------------------------------------------------------------------------
- Initial variant definitions have been added. The variants currently define
  only the ISA extensions and do not contain other processor specific 
  information.

PLIC models
-------------------------------------------------------------------------------
- Writes to unimplemented bits (as determined by the configured number of
  sources) of enable registers are now masked off.
- Fixed bug in PLIC that would not propagate interrupts for sources numbered a 
  multiple of 32 (i.e. irqS32, irqS64, irqS96...).
- Fixed bug in PLIC where deasserting a level-sensitive interrupt did not clear 
  the pending bit.
- A sifive.ovpworld.org PLIC model has been added that adds SiFive-specific
  extensions to the riscv.ovpworld.org generic PLIC model. SiFive modules and
  platforms have been updated to use this new model.
- The maximum number sources/targets/priorities have been updated to match the 
  different specifications for each of the sifive.ovpworld.org PLIC, 
  riscv.ovpworld.org PLIC and the andes.ovpworld.org NCEPLIC100 models.
- A reset input net port has been added to support resetting the model.

CLINT peripheral model
-------------------------------------------------------------------------------
The riscv.ovpworld.org CLINT peripheral model has been updated:
  - The mtime and mtimecmp registers are now properly modeled as 64 bit 
    registers rather than pairs of 32 bit registers
  - A reset input net port has been added to support resetting the model
  - Writes to the mtime register are now supported
  - The model now uses a single thread algorithm that improves simulation 
    performance

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused a simulator error when using the Imperas
  debugger on platforms run using QuantumLeap parallel simulation.

OP Harness API
-------------------------------------------------------------------------------
- A new function opMMRegisterWrite() writes directly to a peripheral memory
  mapped register using its handle. Side effects of the write will occur.
  Its use is illustrated in Examples/SimulationControl/peripheralRegisterAccess.
  
- The function 
   opProcessorRegWatchpointNew(processor, register, mode, userData, callback)
   has a new argument added in position #3 called mode. Please refer to op.h
   
- Methods in op.hpp
  the monitor method has new constructors that do not require a processor argument
  the register watchpoint constructor has a new argument 'mode'
  
Instruction Tracing
-------------------------------------------------------------------------------
- A new flag -tracemem enables trace logging of fetch, load and store memory 
  accesses, showing the access virtual address, physical address, size in bytes
  and bytes read or written.

- A new flag -traceshowcpuname  prefixes all trace lines with the cpu name.
  This includes register and memory tracing.  

- These flags have been removed:
   -tracememva  
   -tracememaddr  
   -tracememsize 
   Please use -tracemem instead.

###############################################################################
##                                                                           ##
## Date 2021-September-17                                                    ##
##                                                                           ##
## Release 20210917.0                                                        ##
##                                                                           ##
###############################################################################

OP Module API
-------------------------------------------------------------------------------
- The port iterator functions 
  OP_BUS_PORT_FN, OP_FIFOPORT_FN, OP_NET_PORT_FN, OP_PACKETNET_PORT_FN,
  used to define a module's interface now pass the the module as a new argument.
  Also they can now access parameters passed to the module, so can have a
  parameterized interface.

###############################################################################
##                                                                           ##
## Date 2021-June-18                                                         ##
##                                                                           ##
## Release 20210617.0                                                        ##
##                                                                           ##
###############################################################################

libRuntimeLoader++ no longer used
-------------------------------------------------------------------------------
libRuntimeLoader++.so was not usable with newer compilers in many cases. It
contains the object compiled from OP C++ interface implemented in
$IMPERAS_HOME/ImpPublic/source/host/op/op.cpp.
Since the source for this file is always provided by Imperas (to support any
host C++ compiler) the Imperas-provided Makefiles have been updated to 
built a local copy of this library by default.
It has also been changed from a shared object to an archive library to avoid
problems with locating the shared object at runtime.
To use a single global copy of this library, rather than one locally built with
each executable, see the instructions in:
 doc/ovp/OVPsim_Using_OVP_Models_in_SystemC_TLM2.0_Platforms.pdf


VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmicxtFetch enables an extension of intercept library to fetch
  an instruction at a given address using the standard processor model fetch
  callback.
 
VMI API
-------------------------------------------------------------------------------
- The vmiIASAttr structure contains a new field fetchCB, which, if implemented,
  provides a service to fetch the bytes of the instruction at a given address.
  This function is used by the new API function vmicxtFetch.
- The vmiRegInfo structure has been enhanced to allow specification of registers
  with more than 65535 bits.

OP API
-------------------------------------------------------------------------------

- MSVC not supporting long double.
  Imperas is now shipping libRuntimeLoader64bTime.dll which must be linked to
  any program that is compiled with MSVC; the C type "long double" (not
  supported by MSVC) is not used in this shared object; it is replaced by "double".

  Note that a very long simulation using very small time increments might run
  out of precision where the interface that uses "long double" would not.
  The symptom would be that events in behavioural models could occur out of
  order.
  
- opVLNVString
  The last argument has changed from a boolean to an enum. Values 0 and 1
  are compatible with the previous meaning; 0=quiet, 1=report errors.
  Value 2=report errors then raise a fatal error to terminate the program.
  This is useful when the platform cannot proceed without the required model.
  (Note that this change is not compatible when compiled in C++).
  iGen now writes code using this enum.
  
- Watchpoints cannot be reliably added until the pre-simulation phase at the
  earliest. They were erroneously allowed in the construction phase.
  Sometimes this would work, sometimes not. Functions such as
  opProcessorReadWatchpointNew are now disallowed in the construction phase.
 
PPM API
-------------------------------------------------------------------------------
- Added a new macro PPM_INVALID_HANDLE
  used to detect failure of functions that return a handle or as an invalid
  initial value for a handle.

BHM API
-------------------------------------------------------------------------------
- Added a new macro BHM_INVALID_HANDLE
  used to detect failure of functions that return a handle or as an invalid
  initial value for a handle.

SystemC TLM Integration
-------------------------------------------------------------------------------
- No TLM interface files
  Imperas TLM platforms no longer include model-specific interface files;
  they use only the generic processor, MMC or peripheral interfaces.

  This means that the interface files do not change when model parameter values
  change the number or names of bus or net ports on the model.
  
  The new platforms are functionally identical to the old.

  In future, Imperas will no longer ship tlm model interface files in a
  standard release, but interface files will be available on request.

riscv.ovpworld.org signatureDump intercept library changes
-------------------------------------------------------------------------------
- For compliance tests the library checks that the signature region has been 
  written to at least once. If the symbol main is found in the test it is 
  assumed to be a C based test in which the signature region would be initialized
  invalidating this check, so the check is disabled.

Control File and Command Line
-------------------------------------------------------------------------------
- A model command called from the command line or control file will now echo
  its return value to the simulator output with the label CMD_CR.

###############################################################################
##                                                                           ##
## Date 2021-April-08                                                        ##
##                                                                           ##
## Release 20210408.0                                                        ##
##                                                                           ##
###############################################################################

OCL API (OCL functions can be used with both OP and VMI)
-------------------------------------------------------------------------------
- A new set of functions ocl functions have been added which create and
  manipulate temporary variable-length strings. Please see
  ImpPublic/include/host/ocl/oclStringVar.h
  
New PSE Simulation engine 64bit
-------------------------------------------------------------------------------
- The PSE (Peripheral Simulation Engine) has been updated to provide a 64
  bit processor type, previously the only option was a 32-bit processor type
  When compiling the Imperas/ImperasLib/source tree, the 64 bit compiler will
  be selected, and the 64 bit simulation model for runtime.
  For backwards compatibility, users components will still be created using
  the 32 bit compiler/model, unless explicitly coded to use the 64 bit.
  64 bit selection can be made by adding the following to the Makefile
  IMPERAS_PSE=PSE_RV64
  As a simple example, please take a look at the Makefile in
  Imperas/ImperasLib/source/national.ovpworld.org/peripheral/16450/1.0/pse
  The toolchain and debugger associated with the 64 bit approach is a more
  modern robust combination, therefore we would recommend rebuilding using
  this compiler/model for all peripheral components.

Instruction Tracing
-------------------------------------------------------------------------------
- A new flag -tracefile <filename>  directs instruction tracing (and register
  values) to the specified file.
  The file can be created using the command line flag -tracefile or by setting
  the root module string parameter "tracefile" (use the macro OP_FP_TRACEFILE).
  To append to this file, use opPrintfTrace(fmt, ...) which returns
  boolean true if the file is open, and returns false and sends its output to
  the main log if not. 

Peripheral Simulation Engine (see OVP Peripheral Modeling Guide documentation)
-------------------------------------------------------------------------------
- A bug has been fixed that caused stack space to be allocated incorrectly
  by bhmCreateThread with sp=0 when called from a spawned thread; in this case,
  overlapping stacks would be allocated.
- It is now possible to use either 32-bit or 64-bit PSE architecture for
  Peripheral Simulation Engine processors, as alternatives to the default 
  32-bit architecture PSE.
  - To specify 32-bit PSE architecture, set the environment variable
    IMPERAS_PSE to PSE_RV32 when the PSE application is compiled.
  - To specify 64-bit PSE architecture, set the environment variable
    IMPERAS_PSE to PSE_RV64 when the PSE application is compiled.

riscv.ovpworld.org exitControl, customControl and signatureDump intercept
library changes
-------------------------------------------------------------------------------
- changes have been made to the intercept libraries to clean the functionality
  they provide.
  - exitControl
     - can stop simulation on execution of functions terminate() or write_to_host()
     - can stop simulation on the execution of a specified opcode
     - can detect pass/fail status in register on ecall execution. This is 
       reported at the end of simulation.
  - customControl
     - provides character stream on custom instruction
  - signatureDump
     - provides signature dump at end of simulation or on execution of write_to_host()
     - includes new SignatureGranularity parameter to select 4 or 16 byte line size

riscv.ovpworld.org PLIC model enhancements
-------------------------------------------------------------------------------
The riscv.ovpworld.org PLIC model in has been enhanced:
  - Restructured to support different implementations to be defined
  - A bug where the source priority was ignored except for checking against
    the threshold has been fixed
  - A bug that would cause errors if the enable_stride or context_stride
    parameters were changed has been fixed
    
New andes.ovpworld.org PLIC model added
-------------------------------------------------------------------------------
A new peripheral model of the Andes implementation of the Risc-V PLIC has been
added. It supports the following Andes-specific extension features:
  - Software-programmable interrupt generation (writable pending registers)
  - Configurable interrupt trigger types
  - Preemptive priority interrupts
Note: The Andes Vector Interrupt extension is NOT supported. A warning message
      will be issued if an attempt is made to enable this feature by writing 
      a 1 to the FeatureEnable.VECTORED bit field.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmimtArgRegP allows arguments to embedded calls to be passed
  by reference if required.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Return type of function vmirtReadNetPort has been changed to Uns64 
  (previously, it was of type Uns32).
- Behavior of vmirtGetString has been enhanced so that up to eight string
  results can be valid simultaneously and to make remove sensitivity to
  subsequent changes to simulated memory contents.
- New function vmirtAliasMemoryPriv allows creation of a memory alias with a
  defined privilege. It is equivalent to a call to vmirtAliasMemory followed by
  a call to vmirtProtectMemory with matching range.
- New function vmirtIsAlias returns a Boolean indicating whether an address
  in a memDomain object is an alias created by vmirtAliasMemory,
  vmirtAliasMemoryPriv or vmirtAliasMemoryVM.
- Formal parameters can be grouped by making each vmiParameter structure
  in one group point to a vmiParameterGroup structure
  Groups are visible in -showoverrides and in documentation.
 
VMI API
-------------------------------------------------------------------------------
- Functions of type vmiRdWrSnapFn are now passed the memory domain being
  accessed as an additional parameter.
 
Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed the caused vmimtICount to generate an incorrect
  instruction count for a 64-bit result register in some circumstances.
- A bug has been fixed that caused intercept library port callbacks to function
  incorrectly for intercepts installed on multicore processors.
- A bug has been fixed that cause incorrect results to be returned for
  opProcessorClocksUntilTime, opProcessorClocksUntilTimeDouble and
  opProcessorTime (and their legacy ICM equivalents) when called for processor
  objects that are specified to be threads (e.g. the leaves of an ARM Cortex-A55
  processor).

Return codes from harness.exe and iss.exe now reflect errors during simulation
-------------------------------------------------------------------------------
- The harness.exe and iss.exe programs have been fixed so that the return code
  now properly indicates any errors that occur during simulation. 
  Previously the return code would reflect errors that were reported during 
  model startup but not during simulation.

BHM Peripheral API
-------------------------------------------------------------------------------
- bhmSerOpenBlocking has been deprecated. Please use bhmSerOpen().

- bhmSerOpen() and bhmSerOpenAuto() now have client [and server] connection modes.

- A bug preventing the use of bhmSerOpen() with multiple channels in one model has
  been fixed.
  
- bhmCancelTrigger now works as documented. Previously it did not.

PPM Peripheral API
-------------------------------------------------------------------------------
- An error in ppmInstallNByteCallbacks has been corrected. There is now an
  extra parameter to separate the base of the slave port from the offset
  into the slave port. 
  Previously the parameter was the sum of the base and offset:
  
  void ppmInstallNByteCallbacks(
      ppmNByteReadFunc  read,
      ppmNByteWriteFunc write,
      void             *userData,
      void             *baseAddr,   // address of slave port
      Uns32             offset,    << new parameter. Offset from base.
      Uns32             bytes,
      Bool              readable,
      Bool              writable,
      Bool              isVolatile,
      bhmEndian         endian
  );
  Note that most uses of this function are generated by iGen, so no change
  will be required by the programmer when this is true.
  
-------------------------------------------------------------------------------
- The 'info' argument to functions ppmConnGetInputInfo and ppmConnGetOutputInfo
  has been modified to be a pointer of type ppmConnInfoP, declared in the same
  file as shown below, to remove an unwanted dependency on directory
  ImpPublic/include/host:
  
  typedef struct ppmConnInfoS {
      Uns32 words;        /// number of words that the FIFO can hold
      Uns32 bits;         /// width in bits of one word
      Uns32 numFilled;    /// number of words with data in them
      Uns32 numEmpty;     /// number of free words
      Uns32 inputs;       /// number of connected inputs
      Uns32 outputs;      /// number of connected outputs
  } ppmConnInfo, *ppmConnInfoP;

OP Platform API
-------------------------------------------------------------------------------
- Functions controlling SimPoint file generation have been removed:
    opBBVEnablePerSlice
    opBBVSetFile
    opBBVDumpRecord
    opBBVOn
    opBBVOff
  (This interface is now implemented in a separate bbv tool.)

- Functions have been added:
    const char *opSessionBuildDate(void);
    const char *opSessionProductName(void); 
    void  opProcessorSkipCyclesAdd(optProcessorP, Uns64 cycles);
    Uns64 opProcessorSkipCycles(optProcessorP, optCycleSkipType);
    Please refer to op.h

- Formal parameters can be grouped by making each optParamSpec structure
  in one group point to a optParamSpecGroup structure
  Groups are visible in -showoverrides and in documentation.
    
Control File, Command Line and Parameters.
-------------------------------------------------------------------------------
- An incorrect method of matching --override <name>=<value> is being removed.
  Previously, in a platform with a multicore processor, the example command
    --override platform/cpu/verbose=T
  would match
     platform/cpu_0/verbose,
     platform/cpu_1/verbose
     etc.
  This has led to unexpected behaviour. In a future release you will need to
  name individual processors or use a wild-card:
    --override platform/cpu_0/verbose=T
  or
    --override platform/cpu*/verbose=T

  In the interim, a warning will be issued to highlight the coming change.
  
  Also, the system parameter startaddress (used to override a processor's
  reset vector), has been removed from container processors and so must be 
  applied only to leaf processors (which have a program counter).
  
SystemC TLM Integration
-------------------------------------------------------------------------------
- It is now possible (with certain restrictions) to connect non-Imperas
  bus masters and slaves to the Imperas TLM Bus decoder, though care must be
  taken - Imperas relies on passing data (such as a pointer to the current
  Imperas processor) using TLM payload extensions.
  
- Fixed a possible failure during shutdown caused by destroying parts of a
  platform before the debugger has finished.
  
- A SystemC Imperas model wrapper from iGen now correctly detects if the model
  is not available and shuts down correctly.

- The dynamic slave port artifact bus connection is now fixed at 64-bits. The
  value generated in the TLM interface file is ignored. 

- The Peripheral model TLM interface files are now generated by loading and
  interrogating the pse.pse model file.

###############################################################################
##                                                                           ##
## Date 2020-June-30                                                         ##
##                                                                           ##
## Release 20200630.0                                                        ##
##                                                                           ##
###############################################################################

Licensing
-------------------------------------------------------------------------------
- Imperas tools now use an upgraded version of FlexNet license server and client.
  If you are using a server prior to release 20190306 YOU MUST UPGRADE YOUR
  SERVER. (License files do not need to change).
  
Control file and Command line
-------------------------------------------------------------------------------
- A new command     -registerset <register name>=<value>
  will set a register in a processor or peripheral model to the given value
  immediately before simulation begins.
  
- A problem preventing the application of parameters to intercept libraries
  on multicore processor elements has been resolved.
  
- A new command     -setprotection
  Sets the default memory protection to RW. Any regions loaded by the
  program have their memory protection set according to the program headers. 
  
Linux Shell Script Interpreter
-------------------------------------------------------------------------------
- The Linux shell scripts, also used in Windows MSYS2 shell, have been changed
  to use a bash interpreter i.e. #!/bin/sh is modified to be #!/bin/bash
  NOTE: The script extensions are not changed and remain <script>.sh

andes.ovpworld.org NCEPLMT100 peripheral
-------------------------------------------------------------------------------
- The andes.ovpworld.org NCEPLMT100 timer peripheral has been fixed so there is
  an interrupt output net port for every hart. Previously there was a single
  port that was triggered when any timer expired. 

BHM
-------------------------------------------------------------------------------
- A new function bhmThreadHandle bhmThisThread(void)
  returns the handle of the current thread.
  
UART Log Files
-------------------------------------------------------------------------------
- Log file flushing now uses --logflush flag.
  Until this release, output to a UART log file was immediately flushed to
  disk. It has been reported that on some host systems, flushing to a remote
  disk is very slow. Therefore, immediate flushing has been disabled. If you
  wish to follow the output of a UART log file (e.g. using tail -f <file>)
  please specify -logflush on the command line or control file (this flag
  also causes flushing of the simulator log file).
  
RISC-V PLIC
-------------------------------------------------------------------------------
- Corrected to mask interrupts of a priority less than or equal to threshold.

Instruction Set Simulator (ISS)
-------------------------------------------------------------------------------
- A new command -memory specifies the memory connected to each processor.
  The format is [name:]<low address>:<high address>[:<permissions>].
  Permissions are r, R, w, W or x, X for read, write and execute respectively.
  This command may be repeated or be a comma separated list
  e.g.
    -memory 0x2000:0x3fff:rw -memory 0x10000000:0x1fffffff:rwx 
    -memory mem1:0x2000:0x3fff:rw,mem2:0x10000000:0x1fffffff:rwx

OP
-------------------------------------------------------------------------------
- The memory configuration parser (see above) is available as a function.
    Uns32 opMemorySpecParse(
        const char   *specification,
        optMemorySpec specArray,
        Uns32         max
    )
    
- New functions opFIFOShow and opPacketnetShow used to display the connections
  of FIFOs and packetnets
  Control file or command line parameters -showfifo and -showpacketnet have
  similar functions.
  
- A bug preventing a bus slave port connecting to a processor has been fixed.

- opSessionInit() now has an optional return code - optSessionStatus
  To use the return code you must export IMPERAS_SESSION_ERROR_RETURN=1
  On detecting an error:
    If not set opSessionInit will call exit()
    If set opSessionInit will return a code described in op.h
    
- Enumeration values on a module parameter of type OP_PARAM_ENUM are now given
  default values (1 greater than the previous enumeration) if no value is
  specified in the definition.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmirtAbortRepeat allows the currently-executing instruction to
  be aborted and restarted.
- New function vmirtGetNextMappedRange allows traversal of mapped memory regions
  in a sparse memory domain.
- Function vmirtWriteNetPort 'value' argument is now of type Uns64 (previously,
  it was of type Uns32).
- The VMI port definition vmiBusPort in vmiPorts.h now has a field to
  set the decoded range when the port is a slave. When connecting
  a bus to this port, the decoded range (high address - low address) should
  match this number.

VMI MEMORY MODEL COMPONENT INTERFACE (see VMI Memory Model Component Function
Reference documentation)
-------------------------------------------------------------------------------
- vmimmcGetNextDomain now returns returns null if the MMC is transparent AND
  non-null if a full cache model.

VMI API
-------------------------------------------------------------------------------
- The vmiosAttrs structure contains a new callback postConstructorCB, which is
  called at the end of the  construction phase. Use this to attach callbacks to
  bus ports.
- The vmiIASAttr structure contains new fields codeGrain and dataGrain, which
  are used to specify the granularity of addressing for instruction and data
  accesses, respectively (for example, a codeGrain of 4 means that each
  instruction address addresses 4 bytes). This feature is still under
  development.

Instruction Tracing
-------------------------------------------------------------------------------
- A new flag -tracefile <filename>  directs instruction tracing (and register
  values) to the specified file.
  
Semihost Output
-------------------------------------------------------------------------------
- A new flag -semihostlogfile <filename>  directs all semihost output to the
  specified file.

Virtual LAN
-------------------------------------------------------------------------------
- A virtual LAN can now be implemented using existing peripheral LAN interface
  models connected to a packetnet. Connecting the 'phy' pin of a LAN interface
  model will enable this interface and disable the model's host interface.
  A new device ovpworld.org/peripheral/vEthernet_Bridge/1.0 can be used to
  bridge a virtual LAN to the host's network. Parameters of this model can
  change the IP and MAC addresses used on the virtual LAN - refer to the
  model's documentation.
  
- A packetnet now has a string parameter called wiresharkfile.
  If a packetnet is used as an ethernet transport (see the 
  OVP_Peripheral_Modeling_Guide), setting this parameter to a string will
  generate a wireshark compatible file of that name.
  Use -showoverrides to find the name of the packetnet wireshark parameters in
  your design then use
  -override <path to your packetnet/wiresharkfile>=<file name>
  to write a wireshark file.
  
- Ethernet peripheral models have a new parameter 'macaddress' to set the
  default MAC address. This is essential when several devices are connected to
  a virtual LAN.
  
- When using the SLIRP interface in vEthernet_Bridge or any LAN interface model,
  a new parameter macprefix changes the first two bytes of the MAC address
  of the virtual devices on the virtual LAN.
  Use this if their MAC addresses clash with any of your models.
  
SystemC TLM Integration
-------------------------------------------------------------------------------
- The SystemC source files for the OP API have been reorganized:
  - C++ methods are now separate from class definitions
      Methods are in IMPERAS_HOME/ImpPublic/source/host/tlm/tlm*.cpp
      Classes are in IMPERAS_HOME/ImpPublic/include/host/tlm/tlm*.hpp
  - iGen correctly generates references to the new directories.
  - Customer's SystemC source will need to change references to 
      "ovpworld.org/modelSupport" like this:
    change
      #include "ovpworld.org/modelSupport/tlmModule/1.0/tlm/tlmModule.hpp"
    to
      #include "tlm/tlmModule.hpp"
    change
      #include "ovpworld.org/modelSupport/tlmDecoder/1.0/tlm/tlmDecoder.hpp"
    to
      #include "tlm/tlmDecoder.hpp"
    etc.
  - The SystemC methods for OP are compiled into a tlm archive file that is
    defined by the environment variable IMPERAS_TLM_SUPPORT_ARCHIVE.
    The archive should be built into a central area using the source from 
       IMPERAS_HOME/ImpPublic/source/host/tlm 
  NOTE: to link a SystemC executable, the platform, archives and
        SystemC library must all be compiled with the same version of compiler
        and with the same compiler options.
- Imperas MMC models can now be used in SystemC. The generic interface is
  in ImpPublic/include/host/tlm/tlmMmc.hpp
- The Imperas SystemC integration now uses SystemC 2.3.3

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused intercept library post-constructor functions
  to be called incorrectly for intercepts installed on multicore processors.
- A performance bug has been fixed that caused code generated by calls to
  vmimtEnterDelaySlotR to run very slowly.
- A bug has been fixed that could cause the incorrect processor to be executed
  by a call to opProcessorSimulate in some multiprocessor simulations. The bug
  occurred in multithreaded simulations (e.g. SystemC) where execution of a core
  had been suspended by a call to opProcessorYield while other core threads were
  blocked (for example, in memory callbacks).
- A bug has been fixed that could cause too many instructions to be executed
  by opProcessorSimulate or the legacy icmSimulate functions when these
  functions had previously been called for a thread member that ends its slice
  early because of (for example) a breakpoint being triggered.

###############################################################################
##                                                                           ##
## Date 2019-November-06                                                     ##
##                                                                           ##
## Release 20191106.0                                                        ##
##                                                                           ##
###############################################################################

NET VALUES
-------------------------------------------------------------------------------
Throughout the simulator, net values have been changed from 32-bit width to
64-bit width, thus allowing wider vector nets to be directly simulated. This
change is usually backwards-compatible with previous versions, but note that
in some circumstances (for example, printing a net value in a debug statement)
it may be necessary to cast the net value to Uns32 type to avoid compilation
errors. The effect on VMI, PPM, OP and the legacy ICM APIs is as follows:

  VMI RUN TIME INTERFACE
  ----------------------
  - The vmiNetChangeFn type now specifies argument 'value' as Uns64.
  
  PPM API
  -------
  - Type ppmNetValue is now an alias of Uns64.
  - The PSE intercept library support routine vmipseWriteNet now specifies
    argument 'value' as Uns64.

  OP API
  ------
  - Function opNetWrite and function type optNetWriteFn now specify argument 
    'value' as Uns64.
  - Functions opNetValue and opNetValuePrevious now return a value of type
    Uns64.
  - The C++ OP API now supports the creation of MMC instances.
  - The object loader opBusApplicationLoad() and opProcessorApplicationLoad()
    now accepts the flags OP_LDR_LIMIT_32 & OP_LDR_LIMIT_64, and the control
    file or standard command line parser accept
    -loadlimit32 and --loadlimit64
    which limit the size of each transaction initiated by the loader.
    This is useful when loading an object file through a processor into a TLM
    platform where TLM models cannot handle transactions larger than the
    hardware will support.

  ICM API
  -------
  - Functions icmWriteNet, icmWriteNetPort and function type icmNetFn now
    specify argument 'value' as Uns64.

Cadence GEM Ethernet Model
-------------------------------------------------------------------------------
- This model has been updated to use the latest BHM API functions to implement
  the Ethernet interface.

BHM API
-------------------------------------------------------------------------------
- Added a new function ppmCreateLocalMemory(lowAddr, bytes, priv) 
  The effect is to remove callbacks applied to the region.
  Use this when default read and write functions have been applied to a region
  but some parts of the region should not trigger the callbacks.

SystemC TLM2 Support
-------------------------------------------------------------------------------
- Support for the ICM API has been removed from Makefiles. Anyone still using
  the ICM API with TLM2.0, please contact Imperas.
- MMCs (external processor cache models) can now be used in a TLM platform.
 
###############################################################################
##                                                                           ##
## Date 2019-October-09                                                      ##
##                                                                           ##
## Release 20191009.0                                                        ##
##                                                                           ##
###############################################################################

IGEN Makefiles
-------------------------------------------------------------------------------
- Added support for a new flag, EXTRA_IGENFLAGS, to the Makefiles in 
  ImperasLib/buildutils. This may be used in user's model Makefiles to specify
  additional flags to be passed to iGen. In particular, it can be useful for 
  specifying the iGen --batchargv command line argument to pass configuration 
  parameters to the tcl file read by iGen.

Demo/Processor
-------------------------------------------------------------------------------
- New base variants and variants from SiFive and lowRISC have been added.

Peripheral FIFO Interface
-------------------------------------------------------------------------------
- Peripheral models can now work with FIFOs (processor models have had this
  capability for some time). Refer to Examples/Models/Peripherals/FIFO.
  
Newlib semihosting libraries errno changes
-------------------------------------------------------------------------------
- The newlib semihosting libraries have been changed to conform to the standard 
  updating of the errno variable. The errno value is now only updated when a
  call returns an error condition and a value of zero is never written to errno 
  by a semihosted call. This conforms to the behavior specified in the Linux 
  manual page errno(3).

OCL API
-------------------------------------------------------------------------------
- The OCL API now includes a general purpose symbol table utility:
    oclSymbolTableCreate
    oclSymbolTableDestroy
    oclSymbolAdd
    oclSymbolFind
    oclSymbolFindAdd
    oclSymbolFindAll
    oclSymbolFindAllSorted
    oclSymbolName
    oclSymbolRemove
    oclSymbolSet
    oclSymbolValue
    
OP C++ API
-------------------------------------------------------------------------------
- The class parser(argc,argv) constructor now works correctly.
- Some constructors accept optional string parameters. The parameter type has been
  changed to const char* to allow a null value to be accepted.
  (mandatory string parameters remain as std::string).

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Processor construction is now split into two phases. A set of parameters is
  evaluated and passed to a pre-constructor callback to the model which can
  choose the main parameter set. The main parameter set is then evaluated and
  passed to the constructor.
- A new member vmi_FT_BFLOAT16 has been added to the vmiFType enumeration. This
  allows specification of floating point operations operating on brain float
  types (truncated 32-bit single-precision values).
- New members vmi_FT_8_INT and vmi_FT_8_UNS have been added to the vmiFType
  enumeration. These allow conversions between Int8/Uns8 types and floating
  point types to be specified.
- New fields indeterminateUns8, indeterminate8ResultCB and fp8ResultCB have been
  added to the vmiFPConfig type to support operations involving vmi_FT_8_INT and
  vmi_FT_8_UNS types.

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that could cause incorrect behavior for some binary
  operations using vmimtBinopRRC primitives inside vector loops.
- Behavior of annulled delay slot instructions has been changed so that these
  instructions are never traced and do not affect the processor instruction
  count.
- Reported instruction attributes have been modified so that sticky floating
  point operation flags are reported both as a source and a destination.
  Previously, they were reported as a destination only.
- Behavior of vmimtConnGetRB and vmimtConnPutRB has been corrected so that,
  when restarting from a blocked state, the current processor instruction is
  always re-executed in full, as specified in the Morph Time Function
  Reference manual.
- A bug has been fixed that could cause PSE threads scheduled for immediate
  execution not to be run.
- A bug has been fixed that could cause incorrect behavior when PMP region
  mappings change on the RISC-V model.
- A bug has been fixed which could cause incorrect results for floating point
  round or convert to unsigned operations using vmi_FPR_CURRENT rounding mode
  that closely follow other arithmetic operations using a rounding mode that is
  not vmi_FPR_CURRENT. The bug only affects processor models such as the RISC-V
  model that use non-vmi_FPR_CURRENT rounding modes in general arithmetic
  operations.
- A bug has been fixed in the JIT code generator for the new vmi_IMULSU binary
  operation, which cause incorrect results when the same register was used for
  both input arguments.
- A bug has been fixed that could cause the simulation to run slowly when
  simulating processors with polymorphic instructions in some circumstances.
- New notifiers will now be created by vmirtConnNotifyGet or vmirtConnNotifyPut
  only if no matching notifier for the current processor already exists. This
  prevents a memory leak when notifiers are continually installed on a
  connection object that is never read or written.
- Functions vmirtConnNotifyGet and vmirtConnNotifyPut now take an additional
  userData parameter. This parameter is passed as an additional argument to the
  notifier function (of type vmiConnUpdateFn) when the notifier is triggered.
- Save/restore behavior has been changed so that the simulator no longer
  attempts to automatically save and restore notifiers created by
  vmirtConnNotifyGet or vmirtConnNotifyPut: these must now be saved and restored
  explicitly by a model if required (see the OR1K template model for an example
  of this).
- Redundant member 'updateFunctions' has been deleted from the vmiIASAttr
  structure.

SiFive coreip-s51-arty Virtual Platform
-------------------------------------------------------------------------------
- When using a CLINT the mtime/mtimecmp registers are external so the processor
  internal register access should be disabled.

RISC-V Processor Model Usage in Demos/Examples
-------------------------------------------------------------------------------
- The RISC-V processor model is instanced as a base model, RVB32I or RVB64I and
  then extensions enabled using the add_Extensions override.
  For example an RV64GC would be instanced as
          -variant RVB64I -override cpu/add_Extensions=MAFDCSU
  Note that Supervisor and User modes are also enabled

RISC-V Processor Semihosting
-------------------------------------------------------------------------------
- Default semihosting has been changed to use the ecall and ebreak instruction
  as the interception point for the host to implement the system call. This
  uses the same set of syscall numbers which are defined as part of the proxy
  kernel library for newlib. 
  The VLNV for this library is held under riscv/semihosting/1.0/pk
  
RISC-V CLINT Peripheral Model
-------------------------------------------------------------------------------
- Fixed an error when calculating the timer delay.

SystemC TLM2 Support
-------------------------------------------------------------------------------
- The Demos and Examples that show the use of SystemC TLM2.0 are moved to use 
  the OP API.
- The Makefile ImperasLib/buildutils/Makefile.TLM.platform for building SystemC
  TLM platforms now defaults to building an OP API platform
     OPTLM=1 is now the default, set to 0 to build an ICM API platform.
- The support for SystemC TLM2.0 using the ICM API is deprecated and will be
  removed from the product in the future.
- The Demos and Examples that used the ICM API found in PlatformsICM_TLM2.0 are
  moved to OP API platforms found in Platforms_TLM2.
- The package containing the TLM2.0 demos is renamed Demo_Platforms_tlm2.0

VLNV Library Build Infrastructure
-------------------------------------------------------------------------------
- The OP API is the default for use by iGen when generating platforms. A source
  file of name platform.tcl or platform.op.tcl will generate OP API platform 
  source. A file of name platform.icm.tcl may be used to generate deprecated
  ICM API platform source, if required.
- A new Makefile target 'tlmpse' is provided and used to re-build the OP API
  interface files for peripherals in directory tlm
- A new Makefile Makefile.TLM.igen has been provided that takes an input iGen
  file and generates example TLM2.0 CPP platform source  
  
###############################################################################
##                                                                           ##
## Date 2019-June-28                                                         ##
##                                                                           ##
## Release 20190628.0                                                        ##
##                                                                           ##
###############################################################################

RISC-V Extensions Demo (Demo/Platforms/riscv_Extensions)
-------------------------------------------------------------------------------
- This demo shows example usage of the Bit Manipulation and Vector extensions

ELF Loader
-------------------------------------------------------------------------------
- The ELF loader now only loads segments of type PT_LOAD into memory. 

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed in the JIT code generator that caused incorrect code to
  be generated because dirty values were not written back in some circumstances.
  For example, this ARM AArch64 sequence showed the error:
        ldr         q0, [x1]
        uxtl        v1.8h,v0.8b
        uxtl2       v0.8h,v0.16b
- A bug has been fixed in the JIT code generator that caused incorrect code to
  be generated when a function result was assigned to an indexed register
  whose base was then incremented. In this case, the result was incorrectly
  assigned to the post-incremented register location.
- Signal handlers for SIGSEGV, SIGFPE, and sometimes SIGINT are installed by
  the simulation and required for proper operation. These handlers are now
  uninstalled at the end of a simulation session (by opSessionTerminate);
  previously, they were not uninstalled.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- The VMI floating point implementation has been enhanced, with the following
  benefits:
  - Performance is improved in most cases and JIT translated code is smaller;
  - JIT code will use host SSE SIMD instructions where possible;
  - Some bugs in signalling underflow when tininess-before-rounding is enabled
    have been corrected;
  - Some bugs in handling of Flt16 arguments have been corrected (not exposed
    by any OVP processor models using this argument type);
  - rounding modes vmi_FPR_AWAY and vmi_FPR_ODD are now supported as current
    modes for all instructions (not just conversions).
- The enumeration members in the vmiFPRC type have been reassigned to reflect
  the fact that vmi_FPR_AWAY and vmi_FPR_ODD are fully-supported as current
  modes.
- The width of the RC field in the vmiFPControlWord type has been widened to
  allow vmi_FPR_AWAY and vmi_FPR_ODD to be specified.
- Field tininessAfterRounding in the vmiFPConfig structure has been removed and
  replaced with a new field tininessBeforeRounding with opposite sense. This is
  so that the default value of the field matches the Intel Architecture host.
- A set of new run time functions is available that allow floating point
  operations to be performed in run time calls using exactly the same semantics
  as the corresponding morph time primitives:
    vmirtGetFConvertRRDesc
    vmirtGetFUnopRRDesc
    vmirtGetFBinopRRRDesc
    vmirtGetFTernopRRRRDesc
    vmirtGetFCompareRRDesc
    vmirtGetFCompareRRCDesc
    vmirtFConvertSimdRR
    vmirtFUnopSimdRR
    vmirtFBinopSimdRRR
    vmirtFTernopSimdRRRR
    vmirtFCompareSimdRR

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New binary operations vmi_IMIN, vmi_IMAX, vmi_MIN and vmi_MAX have been added
  (returning minimum and maximum values for signed and unsigned arguments).
- New binary operations vmi_IMULSU and vmi_IMULUS have been added (implementing
  widening multiplication of signed/unsigned and unsigned/signed arguments,
  respectively).
- New binary operation vmi_PMUL has been added (implementing carryless
  multiplication).
- New binary operations vmi_AESENC1, vmi_AESENC1L, vmi_AESDEC1, vmi_AESDEC1L,
  vmi_AESENC2, vmi_AESENC2L, vmi_AESDEC2 and vmi_AESDEC2L have been added
  (implementing primitive operations of the AES encryption algorithm).
- New unary operations vmi_AESMC and vmi_AESIMC have been added (implementing
  primitive operations of the AES encryption algorithm).

OP API
-------------------------------------------------------------------------------
- A new function opPeripheralSerialNotify installs a function to be called when
  a peripheral model connects to a serial port (socket). This assists when
  writing a test-harness for a peripheral model with an external serial interface.

BHM API
-------------------------------------------------------------------------------
- A new function bhmSerLastError() returns the unix or windows equivalent errno
  raised by the previous call to bhmSerRead() or bhmSerWrite().
  The code is zero if no error occurred.
  
- A bug causing a simulator crash has been fixed. The conditions were:
      using a peripheral ethernet model in slirp mode.
      a TCP connection times out.
      
- The bhmEthernet interface has changed. This affects ethernet interface models.
  bhmEthernetOpen() and bhmEthernetOpenAuto() now support connection to a
  packetnet as an alternative to the host network by SLiRP or TAP.
  To support the packetnet interface peripheral models must use
  bhmEthernetInstallCB instead of bhmEthernetReadFrame. This change also removes
  the need for a polling thread in the ethernet model.
  
- In peripheral/bhmHttp.h A miss-spelling of the type bhmHTTPMethods has been
  corrected.

RISC-V Peripheral CLINT
-------------------------------------------------------------------------------
- The CLINT peripheral with VLNV reference riscv.ovpworld.org/peripheral/CLINT/1.0
  has been updated to use the local time when updating the next timer period.

Hello World Examples
-------------------------------------------------------------------------------
- The examples have been modified to use the RISC-V processor in place of the 
  OpenCores OR1K processor.
  
Platform Demo
-------------------------------------------------------------------------------
- A number of platforms used in the demos have been updated to use the OP API 
  instead of the deprecated ICM API. The corresponding demos using these platforms
  have been updated:
              New Demo Name                            Old Demo Name
    Platforms/mips_MipsMalta_Linux_disk     PlatformsICM/OVPsim_Linux_MipsMalta_disk
    Platforms/arm_angeltrap_semihosting     PlatformsICM/OVPsim_arm_angeltrap_semihosting
    Platforms/mips_Goldfish_Android         PlatformsICM/OVPsim_Android_MipsGoldfish
    Platforms/mips_MipsMalta_Android        PlatformsICM/Imperas_Android_MipsMalta
    Platforms/mips_MipsMalta_Linux_install  PlatformsICM/OVPsim_Linux_MipsMalta_install
    Platforms/or1k_uclinux                  PlatformsICM/OVPsim_uclinux_or1k
    Platforms/mips_M14K_MipsMalta_Linux     PlatformsICM/OVPsim_Linux_MipsMalta_M14K


Xilinx Zynq PS Platform
-------------------------------------------------------------------------------
- The QSPI interrupt signal has been correctly routed to the Cortex-A9MPx2 
  allowing interrupt driven accesses.

Xilinx Peripheral zynq_7000-qspi
-------------------------------------------------------------------------------
- This peripheral model has been extended to allow the selection of flash memory
  used: 
   - Micron (n25q128a11)(Zynq zc702) or
   - Spansion (s25fl129p0).
- The ability to save the flash memory image at the end of simulation has been 
  added.
- Errors have been fixed
  - Both Spansion and Micron configurations pass the Xilinx QSPI Example code.
    https://github.com/Xilinx/embeddedsw/tree/master/XilinxProcessorIPLib/drivers/qspips/examples
  - The Micron configuration is recognized by the Xilinx Linux Kernel

OVPWorld Peripheral trap
-------------------------------------------------------------------------------
  - A new peripheral has been added that can be used as a dummy device during
    virtual platform or software application bring up.
    This peripheral replaces the previous dummyPort and dynamicDummyPort peripherals
    and acts as a memory will accesses reported when enabled.

OP Platform DMI Example
-------------------------------------------------------------------------------
- In  Examples/SimulationControl/dmiInCPP/platform/memory.hpp:113 a bug in the 
  memory implementation has been fixed. This would have caused the spurious
  allocation of a memory segment when the current access should be found to be
  at the very top of an existing page.
  
TLM Processor interface files
-------------------------------------------------------------------------------
- TLM interface files shipped with a processor model now have optional extra
  parameters to set the number of address bits in the model(Some processor models
  behave differently according to their bus sizes).

Starting a Debugger from the simulator
-------------------------------------------------------------------------------
- If a debug session (GDB or MPD) fails to start (perhaps due to problems with
  a new GDB), try using RSP diagnostics:
     export IMPERAS_RSP_LOG_FILE=rsp.log
  This file now includes details of how the debugger was launched. Reproducing
  this command might help diagnose the problem.
   
###############################################################################
##                                                                           ##
## Date 2019-March-06                                                        ##
##                                                                           ##
## Release 20190306.0                                                        ##
##                                                                           ##
###############################################################################

Demo Platforms/riscv_SiFiveFU540_Linux
-------------------------------------------------------------------------------
- The demo now contains a script and files to show the profiling of a user 
  application executing under the Linux operating system.

Model mips.ovpworld.org SmartLoaderLinux
-------------------------------------------------------------------------------
- Support for Flat Device Tree manipulation has been added.

Peripheral Modeling 
-------------------------------------------------------------------------------

- No need to fetch the value of a model parameter
  In the ppmParameter structure, a new field valuePtr can be initialized to the
  address of a C variable of the type of the parameter. The simulator will use
  this address to update the variable with the parameter value immediately 
  before main() in the peripheral model is called.
  
- A functions have been added to the ppm API.
  ppmCreateNByteRegister()         creates a register of any length.
  ppmCreateNByteInternalRegister() creates an internal register of any length.
  ppmInstallNByteCallbacks()       installs callbacks for memory accesses of any 
                                   length
  
  Note: Registers that do NOT have 2^n bytes might give unexpected results.
        To use large registers, a model must be able to make a bus access of
        the appropriate size.
        
  These functions have more capability and for new models should be used instead 
  of ppmCreateRegister(), ppmCreateInternalRegister, ppmInstallReadCallback and
  ppmInstallWriteCallback.
  
  Examples/Models/Peripherals/creatingDMAC use this function.

- A new model parameter type has been introduced: 
    ppm_PT_ENDIAN   is defined in ppmParameterType in 
                    ImpPublic/include/target/peripheral/ppmAttrTypes.h
  
  This type is compatible with a similar type optEndian defined in
                    ImpPublic/include/host/op/op.h
  It allows a peripheral model to be written to support big or little endian
  operation; the mode can be selected when the model is instantiated in a module.

  A new function bhmEndianParamValue() is used to access a parameter of this type.
  The new function ppmCreateNByteRegister() takes a parameter of this type so that
  appropriate byte-swapping is performed by the simulator when data is passed to
  or from the peripheral model.
  
- ppmPacketnetWrite() now returns an integer (number of connected receivers).
  Also, failure to connect to a packetnet no longer causes a fatal error.

- introduced a new function
  bhmEnumParamValue()       fetch a parameter of type enum from the platform 

New Examples/Models/Peripherals/packetnetChain example added
-------------------------------------------------------------------------------
A new example has been added showing a more complex use of packetnets in a 
peripheral model. See Examples/Models/Peripherals/packetnetChain/README.txt 
for details.

Peripheral Modeling Example creatingDMAC
-------------------------------------------------------------------------------
- A bug in the peripheral model in Examples/Models/Peripherals/creatingDMAC has
  been fixed. This bug would cause the interrupt to occur immediately after a
  DMA transaction was started in a channel for all transactions except the very 
  first.
- Modified the examples to use the RISC-V processor in place of the OR1K

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- Type vmiFTernop has a new member, vmi_FTERNUD, allowing implementation of
  user-defined operations.
- Type vmiFPRC has a new member, vmi_FPR_USER, allowing implementation of
  user-defined conversion operations.
  
VMI STRUCTURES
-------------------------------------------------------------------------------
- All 'interceptContext' fields have been removed from VMI register, register
  group and port structures.

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which could cause JIT-translated code blocks not to be
  invalidated when execute permission is removed on addresses in those blocks
  in some cases. This would allow stale JIT code blocks to be executed when they
  should have been invalidated and retranslated.

SystemC TLM
-------------------------------------------------------------------------------
- tlmDMIslave was failing to install a notifier callback for DMI invalidation.
  This has been added.
  
OP API
-------------------------------------------------------------------------------
- The function opRegIsExtension has changed to:
  Bool opProcessorRegIsExtension(optProcessorP proc, optRegP reg);
  
- opPacketnetWrite() now returns an integer (number of connected receivers)

- 9 new functions have been added to delete or modify monitor callbacks:
    opBusFetchMonitorDelete
    opBusReadMonitorDelete
    opBusWriteMonitorDelete
    opMemoryFetchMonitorDelete
    opMemoryReadMonitorDelete
    opMemoryWriteMonitorDelete
    opProcessorFetchMonitorDelete
    opProcessorReadMonitorDelete
    opProcessorWriteMonitorDelete

ICM C++ API
-------------------------------------------------------------------------------
- The C++ methods
    icmProcessorObject *getSMPParent();
    icmProcessorObject *getSMPChild();
    icmProcessorObject *getSMPPrevSibling();
    icmProcessorObject *getSMPNextSibling();   
  did not return valid objects in all cases. This has been fixed.

###############################################################################
##                                                                           ##
## Date 2018-November-14                                                     ##
##                                                                           ##
## Release 20181114.0                                                        ##
##                                                                           ##
###############################################################################

ELF File Reader
-------------------------------------------------------------------------------
- Symbols whose names start with ".debug_" are no longer loaded into the 
  simulator's symbol table by the elf file reader.
- A fix was added to handle  ELF files with incorrect info in their DWARF 
  File/Line information. This may cause the vmirtGetFL* functions to return 
  valid data where they previously returned none. This could change (improve) 
  results from tools that use this info.

GDB Server
-------------------------------------------------------------------------------
- The Imperas GDB server (a component of the simulator) now responds to the
  extended mode  '!' command with the E00 response, and does not send an error
  to the simulator log.
  
ARMM Processor Model
-------------------------------------------------------------------------------
- The model has been restructured to share common code with the baseline ARM 
  model to simplify maintenance.
- Instruction disassembly and warning messages are now consistent with the
  baseline ARM model.
- Fused-multiply-add behavior has been corrected to conform to the Architecture
  Reference Manual (previously, QNaN results were sometimes incorrect).
- When the floating point extension is present and the architecture is ARMv7-M
  or later, the FPSCR register is now visible in the VFP register group.
- Support for FPv5 floating point instructions has been added.
- New variants Cortex-M7 and Cortex-M7F have been added.
- A new Boolean parameter 'unpredictableR15' has been added, which specifies
  the model behavior for instructions that are described in the ARM ARM as
  UNPREDICTABLE when the AArch32 R15 register is used.

ARM Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed in which AArch32 long-format translation table entries
  and all VMSAv8-64 translation table entries in non-secure tables (NSTable=1
  at any level) were seen as global in secure state. Such entries should always
  be non-global, irrespective of the value of the nG bit in the table entry.
- Behavior of 'sei' and 'vsei' input nets has been corrected to edge sensitive
  (previously, these were level sensitive).
- A bug in the addresses used for AA32 system register locations on the System 
  Bus enabled by the "enableSystemMonitorBus" and "enableSystemBus" model
  parameters has been fixed. The cp0 part of the address should be the cpNum
  used in the register encoding, but instead was either 0 or included only the 
  low order 2 bits of the cpNum value.
  This bug could only be seen when the "enableSystemMonitorBus" or
  "enableSystemBus" model parameters were set to true.
- A bug has been fixed where the MSR (immediate) instruction would always 
  generate an undefined instruction exception on a write to the PSTATE.UAO bit
  and attempts to write a 1 to the PSTATE.PAN bit would have no effect. Note the 
  MSR (register) and MRS instructions did not have this problem.
- The ARMv8.2 SVE extension is now supported by the model core, when ID
  register ID_AA64PFR0_EL1.SVE=1.
- A bug has been fixed where assertion of the GICCDISABLE signal was not causing
  ID_AA64PFR0_EL1.GIC to be set to zero.
- A bug has been fixed where use of the override_GICCDISABLE parameter was not
  causing ID_AA64PFR0_EL1.GIC, ID_PFR1_EL1.GIC or ID_PFR1.GIC to be modified.
- A new Boolean parameter 'enableGICv2_64kB_Page' has been added. When a GICv2
  is present, and this parameter is True, control register groups are aligned
  on 64kB page boundaries instead of the usual 4kB page boundaries.
- A new Boolean parameter 'unpredictableR15' has been added, which specifies
  the model behavior for instructions that are described in the ARM ARM as
  UNPREDICTABLE when the AArch32 R15 register is used.
- A new Boolean parameter 'unpredictableModal' has been added, which specifies
  the model behavior for instructions that are described in the ARM ARM as
  UNPREDICTABLE only in certain AArch32 modes (for example, MRS of the SPSR
  register in User or System modes).
- Specifying value 0x800 using the 'override_debugMask' parameter now enables
  a validation mode in which the TLB entries are dynamically checked against
  in-memory page table contents (finds some classes of error where page table
  entries are updated without a subsequent flush of affected TLB entries).
- The format used to report TLB entry contents when debug masks 0x4 or 0x800 are
  used has been improved to give more complete information about the attributes
  of an entry.

MipsMalta Platform
-------------------------------------------------------------------------------
- The Malta platform (mips.ovpworld.org/platform/MipsMalta/1.0) has been updated
  to use the OP API.

Runtime Loader
-------------------------------------------------------------------------------
- libRuntimeLoader.{so,dll} now reports reasons for failing to load a simulator.

RISCV Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed which allowed User mode accesses to unimplemented
  hardware performance registers irrespective of the settings in the counter
  enable registers.
- Instruction address misaligned faults are now taken on the branch or jump
  instruction instead of the target instruction.
- A bug has been fixed in which RV64 instructions like sraiw with shifts >= 32
  bits (e.g. sraiw a2,a2,0x20) did not cause an exception.
- A bug has been fixed in which compressed instructions with shifts >= 32 bits
  (e.g. srai a2,a2,0x20) did not cause an exception when RV64I is absent or
  disabled.
- Decode for compressed instructions c.addi4spn, c.addi16sp, c.lui, c.jr,
  c.addiw, c.lwsp and c.ldsp has been corrected to properly handle reserved
  cases.
- A bug has been fixed in which the source value of fmv.s instructions was not
  being checked as NaN-boxed.
- A bug has been fixed which caused sedeleg and sideleg registers to be present
  when user-level interrupts were present and supervisor mode was absent. These
  registers should be present only if both supervisor mode and user-level
  interrupts are present.

MIPS Processor Model (mips32/mips64)
-------------------------------------------------------------------------------
- I6500 
  - always allocates the maximum CDMM memory block size
  - has new BCConfig bits SPD and BOD
  - updates Cause.IP immediately for a timer interrupt
  - has crypto CRC instructions enabled by default
- Change MMID and ASID update mechanism
- Fix order of operation for MSUBF.S and MSUBF.D
- Fix GPR names for nanoMIPS
- Fix MAAR to be at CPU-level
- Change CDMM to always be bypassed for Guest accesses
- Remove .WiredWiredBits setting from I7200
- Changed misaligned SC* instructions to always take AdES
- Correct CMP reset
- Correct update of memory mapping on GCR_BASE change
 
MIPS Processor Model (mips32_r1r5/mips64_r1r5)
-------------------------------------------------------------------------------
- The startBlock Callback was added to clear the current floating point mode.

MIPS Processor Model (all)
-------------------------------------------------------------------------------
- New vc_run nets for each core e.g. vc_run_CPU0_VPE0 have been added that when
  written high will halt execution of the respective processor core

MIPS Cross Compiler Support
-------------------------------------------------------------------------------
- The nanoMIPS architecture support libraries have been renamed to indicate 
  32-bit support. Semihost library is now 
    - mips.ovpworld.org/semihost/nanomips32Newlib/1.0 semihost library
  the Imperas target library is now nanomips32

Fix for intercept library instruction fetching
-------------------------------------------------------------------------------
The instruction fetching in the following intercept libraries has been changed
to not fetch 4 bytes when a 2 byte instruction is encountered:

   riscv.ovpworld.org/intercept/customControl/1.0/model/customControl.c
   riscv.ovpworld.org/intercept/endOnNullInstruction/1.0/model/endOnNullInstruction.c
   Demo/Platforms/riscv_SiFiveFU540_Linux/interceptlib/custom1.c
   
This avoids a potential problem when a 2 byte instruction is at the very end of
a memory region and the following 2 bytes cannot be fetched.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmimtTestRRJumpLabel has been added, which implements branches
  conditional on the result of a bitwise AND of two registers.
- New function vmimtCompareRRJumpLabel has been added, which implements branches
  conditional on the result of a comparison of two registers.
- New function vmimtZeroRV has been added, which implements efficient zeroing
  of variable-sized registers.
- New function vmimtMoveRRV has been added, which implements efficient moving
  of variable-sized registers.
- New function vmimtBitopVR has been added, which implements operations on
  bit vector registers.
- New function vmimtTestBitVRJumpLabel has been added, which implements branches
  conditional on whether a bit in a bit vector register is set or unset.
- New function vmimtGetBaseOffset has been added, which returns the offset in
  bytes of a vector base register from its initial point.
- New vmiUnop operations have been implemented, as follows:
    vmi_RBIT:   reverse the order of bits in an argument;
    vmi_CNTZ:   count 0 bits in an argument;
    vmi_CNTO:   count 1 bits in an argument;
    vmi_CLS:    count leading bits same as sign bit in an argument.
- New functions vmimtAddSkipCountC and vmimtAddSkipCountR have been added, which
  implement primitives to add to the deferred cycle skip count for a processor
  (for use in timing estimation intercept libraries only).

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Function vmirtAddressLookup now returns the correct memory domain when the 
  processor has a harvard architecture. Previously it returned the code domain.
- Function vmirtInstructionBytes is now available in all products; previously,
  it was only available in Imperas Professional Tools products with debug
  capability.
- Function vmirtAddSkipCount now has an extra 'defer' argument which specifies
  whether the count should be added immediately (if defer is False) or deferred
  until a later aggregation point (if defer is True).
- Function vmirtGetSkipCount now has an extra 'type' argument which specifies
  whether the count should include committed skipped cycles only, deferred
  skipped cycles only, or both committed and deferred skipped cycles.
- Function vmirtAddSymbolFile  now adds the symbols to the simulator symbol
  tables (for use by the disassembler and other tools) as well as to the
  debugger. It has a new prototype:
   vmiSymbolFileCP vmirtAddSymbolFile(
      vmiProcessorP   processor,
      const char     *filename,
      Addr            address,
      const char     *sections,
      Bool            private  // if true, only the functions below will
   )                           // will search this table
- New functions 
    vmiSymbolCP    vmirtGetSymbolByNameFile(vmiSymbolFileCP, const char *name)
    vmiSymbolCP    vmirtGetSymbolByAddrFile(vmiSymbolFileCP, Addr simAddr)
    vmiFileLineCP  vmirtGetFLByAddrFile    (vmiSymbolFileCP, Addr simAddr)
  to be used to look up symbols and lines in specific files loaded using 
  vmirtAddSymbolFile rather than all symbol files associated with a given
  processor.

OP API
-------------------------------------------------------------------------------
- A new function has been added to optimize behavior when native memory regions
  (create by opMemoryNativeNew, for example) are directly updated by masters:

    void opMemoryNativeFlush(optModuleP root, const void *base, UnsPS bytes);

  This function informs the Imperas simulator that previous contents of the
  memory range base:base+bytes-1 may have changed and that any JIT code blocks
  dependent on that memory should be discarded. As a special case, base=0 and
  bytes=0 flushes all code blocks using native memory regions.

ICM API
-------------------------------------------------------------------------------
- A new function has been added to optimize behavior when native memory regions
  (create by icmMapExternalNativeMemory, for example) are directly updated by
  masters:

    void icmFlushNativeMemory(const void *base, UnsPS bytes);

  This function informs the Imperas simulator that previous contents of the
  memory range base:base+bytes-1 may have changed and that any JIT code blocks
  dependent on that memory should be discarded. As a special case, base=0 and
  bytes=0 flushes all code blocks using native memory regions.

Instruction Set Simulator (ISS)
-------------------------------------------------------------------------------
- The command -showregisters (used to obtain the list of registers sent over
  the RSP interface) now works correctly on multi-level processor models where it
  previously failed to report all the registers.

RISCV Processor Model Feature Usage Examples
-------------------------------------------------------------------------------
- Two examples are provided to show the use of features of the RISCV model. these
  are provided under Examples/Models/Processors/Feature_Usage as
  RISCV_SignatureDump
    Shows the use of the extension library to control the generation of a signature
    file.
  RISCV_CustomInstructionFlow
    Shows how to extend a RISCV processor with a custom instruction.

Simulator Core
-------------------------------------------------------------------------------
- The simulator core has been enhanced to improve behavior in cases where
  native-mapped memory (specified by opMemoryNativeDynamic, opMemoryNativeNew
  or the legacy ICM icmMapExternalNativeMemory functions) is modified by masters
  in a simulation without notifying the Imperas simulator core.
  Previously, such external updates would not cause JIT-translated blocks using
  the memory to be flushed. Now, most changes to such blocks are automatically
  detected and a conservative simulation mode is enabled, which validates that
  *every* byte in such regions has the expected contents before executing it.
  The conservative mode can be forced on using the Boolean command line
  parameter -volatilenativememcheck, or the Boolean OP platform parameter
  OP_FP_VOLATILENATIVEMEMCHECK.
- A bug has been fixed which sometimes caused incorrect results for shift
  operations when the value to shift and the shift amount were both in the same
  register.
- A bug has been fixed which sometimes caused incorrect floating point flags
  to be reported for user-defined floating point operations.
- A bug has been fixed in which use of vmi_FSCALEF or vmi_FSCALEI floating point
  operations with large negative exponent shift (argument b) could generate
  incorrect results.
- A bug has been fixed which could cause floating point operations using the
  vmi_FT_80_X87 type to generate incorrect results when underflow occurs.
- When instruction attribute generation is enabled, loads and stores of
  registers wider than 64 bits are now reported as a single load or store of
  the specified size (previously, the load or store was reported as a sequence
  of operations no larger than 64 bits).
- When instruction attribute generation is enabled, the type reported for
  preload operations has been corrected.

License Server
-------------------------------------------------------------------------------
- The license server version is upgraded and now supports consistent network 
  device naming.

###############################################################################
##                                                                           ##
## Date 2018-August-03                                                       ##
##                                                                           ##
## Release 20180716.2                                                        ##
##                                                                           ##
###############################################################################

ARM Processor Model
-------------------------------------------------------------------------------
- A new parameter 'override_SCTLR_IE' has been added, which allows the default
  value of instruction endianness reported in the SCTLR register to be set.
- A new parameter 'override_SCTLR_EE' has been added, which allows the default
  value of exception endianness reported in the SCTLR register to be set.
- A new parameter 'override_SCTLR_TE' has been added, which allows the default
  value of ARM/Thumb exception state reported in the SCTLR register to be set.
- A new parameter 'override_SCTLR_NMFI' has been added, which allows the default
  value of non-maskable FIQ support reported in the SCTLR register to be set.

###############################################################################
##                                                                           ##
## Date 2018-July-31                                                         ##
##                                                                           ##
## Release 20180716.1                                                        ##
##                                                                           ##
###############################################################################

SafePower and Xilinx Zynq Power Monitoring
-------------------------------------------------------------------------------
- The Xilinx Zynq PMBus and xADC peripheral models have been updated to correctly 
  provide the power, voltage and current rail values and also the temperature 
  values for the internal sensors.

###############################################################################
##                                                                           ##
## Date 2018-July-16                                                         ##
##                                                                           ##
## Release 20180716.0                                                        ##
##                                                                           ##
###############################################################################

Corrected reference for Xilinx Zynq-7000 peripheral models
-------------------------------------------------------------------------------
The reference document listed for the Xilinx Zynq-7000 peripheral model was not
the correct file name. The name has been fixed and a link to the document
provided.

VMI API
-------------------------------------------------------------------------------

- New functions have been added to create documentation for instructions
  and instruction fields:
  
  vmidocAddFields        Document a register or instruction
  vmidocAddField         Document fields in a register or instruction
  vmidocAddConstField    Document a constant field in a register or instruction

- Callbacks are available so the simulator can construct a processor's
  documentation when required rather than in the processor constructor.
  This also applies to extension libraries. Please refer to
  VMI_DOC_FN and docCB in ImpPublic/include/host/vmi/vmiAttrs.h
  and
  VMIOS_DOC_FN in ImpPublic/include/host/vmi/vmiosAttrs.h
  
- A new information field can be supplied by a processor model:
  alternateName - specifies a name (different to the Name in the VLNV) to be used
  in a generated processor document name and title.  
  
BHM API - Peripheral Modeling
-------------------------------------------------------------------------------
- Peripheral models that use bhmCreateThread().
  For efficiency, the last argument to this function (the location of the top
  of the stack for use by the thread) is now adjusted in the simulator to
  ensure it is 4-byte aligned. This should have no effect on peripheral models
  other than to lose up to 3 bytes of available stack if it is not aligned by
  declaration.
  
- A new function has been added to make the simulator aware of bit-fields
  in a peripheral model:
  ppmCreateRegisterField(
    registerHandle register,
    const char    *name,
    const char    *description,
    Uns32          offset,
    Uns32          bits,
    Bool           read,
    Bool           write
  )
  (Calls to this function are created by iGen)
  
- New functions have been added to create documentation of registers and
  instructions:
      ppmDocAddFields         Document a register or instruction
      ppmDocAddField          Document fields in a register or instruction
      ppmDocAddConstField     Document a constant field in a register or instruction

- The formal macro BHM_HTTP_FORMALS no longer automatically includes the macro
  BHM_RECORD_REPLAY_FORMALS, this is required and should now be added manually.
  
RISC-V Peripheral Models
-------------------------------------------------------------------------------
- CLINT peripheral model is more flexible
  - The riscv.ovpworld.org CLINT peripheral may now be configured with the 
    following parameters:
      num_harts: Number of harts supported, from 1 to 4095, default 1.
      clockMHz: Frequency in MHz of the counter used by the timer, default 10MHz.
    The names of the netPorts and the size of the busPort has also changed as a 
    result.
- riscvPRCI peripheral model replaced by CLINT
  - The imperas.ovpworld.org riscvPRCI peripheral has been removed. The CLINT 
    peripheral may be configured to produce the same functionality.

ARM Processor Model
-------------------------------------------------------------------------------
- A new parameter 'maxSIMDUnroll' has been added, which determines whether SIMD
  operations are translated to JIT code by unrolling (if the number of parallel
  operations is less than or equal to maxSIMDUnroll) or using a loop in the JIT
  code (if the number of parallel operations is greater than maxSIMDUnroll).
  Unrolled operations can be faster, but also can generate very verbose JIT code
  if the number of parallel operations is large. The default value of the
  parameter is 2; for compatibility with previous model versions (which did not
  support SIMD loops), use the value 16.

RISCV Processor Model
-------------------------------------------------------------------------------
- The RISCV processor model has been changed to set the default initial PC at 
  simulation start to the value indicated by the processor model's reset_address
  parameter. Previously the default start address was 0x0.
  NOTE: The --startaddress command line argument or the start address from an 
  ELF file that is loaded will override this value.
  NOTE: The default value for the reset_address can vary by variant, since this
  is defined to be an implementation dependent value by the RISCV specification.
  See the Model Specific Information document to see what value is implemented 
  for a specific variant.
- A new SiFive variant 'U54MC' has been added, which implements a cluster of
  U54 harts. By default 4 harts are implemented, which may be overridden using
  the numHarts parameter which allows values from 1 to 32.

ARC Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed related to the accessibility of exception vectors in
  externally-protected memory. Previously, for exception vectors to be
  accessible, external memory was required to have both read and execute
  permissions; now, only execute permission is required. Note that this only
  relates to external permissions (set with, for example, opBusPrivSet) -
  behavior for permissions set internally (for example, using the MPU) only
  execute permission is required, and this behavior has not changed.
- Opaque instruction intercepts are now treated as being "inside" zero-overhead
  loops (previously, zero-overhead loop behavior was disabled for such
  instructions).
- A new parameter 'enable-aux-bus' has been added which, if True, causes a new
  artifact bus port, 'Auxiliary', to be added to the processor. Read and write
  callbacks can be installed on a bus connected to this port, allowing custom
  auxiliary registers to be implemented externally. See the individual variant
  data sheets for more information.

Newlib semihosting errno support
-------------------------------------------------------------------------------
- Added support for errno naming convention used in Green Hills Software
  toolchain.

Peripheral Modeling
-------------------------------------------------------------------------------
- Models using bhmSerOpenAuto() to raise a console for a serial device input/
  output now have two new uns32 parameters: xchars and ychars which specify in
  characters the dimensions of the console.

VirtioBlkMMIO model change
-------------------------------------------------------------------------------
- A problem that would cause spurious "Invalid select <val> set by driver" 
  messages in the VirtioBlkMMIO model has been fixed.

ARM PL011 UART Model Change
-------------------------------------------------------------------------------
- The registers 'flag' and 'int_level' have been modified to no longer use a
  callback. This improves performance when the registers are polled in a tight
  loop in an application running on a processor. 

OP API
-------------------------------------------------------------------------------
- The OP API was incorrectly reporting the direction of net port connections.
  Their direction is now correctly taken from the direction of the port in the
  model.
- The command line parser now installs and makes available all commands, rather
  than omitting commands according to the useMask argument.
  The useMask argument now controls which commands are listed under -help.
  A new command -helpall shows the full list.
- The Command line parser has a new function opCmdParserDelete(optCmdParserP)
  which should be used to delete a command line parser when it is finished with.
- Two new functions have been added:
    opProcessorRegNextGPacket(processor, reg)
    opProcessorRegNextPPacket(processor, reg)
  These are the same as opProcessorRegNext (which returns the set of registers
  used by MPD, but return the set of registers for use by the GDB
  G-packet and P-packet requests.

Xilinx Zynq Board
-------------------------------------------------------------------------------
Power Monitoring
- Changes have been made to the PMBus components on the Xilinx Zynq boards, 
  zc702 and zc706 to allow easier interaction with a Power Interception Library
  that allows approximation of the real time power consumption of the board.
- Access to read values from Power Interception Library have been added to the 
  Zynq_7000-devcfg model which includes the xADC modeling.
- General PMbus access functions have been moved to pmbus.ovpworld.org/modelSupport
  pmbus. These files are included into other models, see ti.ovpworld.org ucd9012a
  and ucd9248.
- General functions to provide a defined interface to a Power Interception Library
  have been created in ovpworld.org/modelSupport/powermonitor. These files are 
  included into other models, see see ti.ovpworld.org ucd9012a and ucd9248.
Peripheral Models
- The I2C transfer delays have been modified slightly so that the clock input
  parameter and the clock divider values of the control registers are used to 
  delay transfers. 

Wait on Fault
-------------------------------------------------------------------------------
- The environment variable IMPERAS_LOOP_ON_FAULT may be set to cause the 
  simulator to delay finishing on a fault condition. This can be useful to view
  diagnostic fault messages from consoles that are automatically started and 
  that terminate at the end of simulation.

ELF File Reader
-------------------------------------------------------------------------------
- ELF files specified with the --symbolfile option, (i.e. where only the 
  symbolic information is read, no data is loaded), now are always interpreted
  using the virtual addresses. Previously the physical addresses were used
  (regardless of the --elfusevma option). This did not cause problems when the  
  physical and virtual addresses in the ELF file the same, which is true in many 
  cases.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmimtGetIndexedRegister has been added to provide better support
  for vector and indexed instruction constructs.
- Functions of type vmiMorphFn are now passed an extra 'instrState' argument.
  This argument is a pointer to a structure of size defined by the new 
  'instrStateSize' field in the vmiIASAttr structure for a processor, and is 
  cleared to zero by the simulator at the start of translation of a new 
  instruction. The structure should be used to hold all temporary data
  required while instruction generation is in progress.
- New fields 'preMorphCB' and 'postMorphCB' (of type vmiMorphFn) have been added
  to the vmiIASAttr structure. The 'preMorphCB' function is called before each
  instruction is translated, and the 'postMorphCB' is called at the end of each
  instruction. Unlike the existing 'morphCB' function, these functions will be
  called even if the instruction is opaquely intercepted, so can be used to
  implement constructs such as zero-overhead loops, even if the instruction
  behavior is defined in an intercept library.

VMI MMC FUNCTION INTERFACE (see VMI Memory Model Component documentation)
-------------------------------------------------------------------------------
- Function vmimmcAddCommandParse is now fully implemented (previously, it
  produced an unimplemented function message).
- The cache model examples provided in the OVP VLNV library now include the
  command interface to control statistics gathering.

VMI MODEL DEFINITION
-------------------------------------------------------------------------------
- The vmiProcessorInfo structure has a new field: mandatoryExtensions 
  that points to a list of extension library VLNV definitions, indicating that
  these extension libraries must be loaded by the model.
  
Simulator Command Line and Control File
-------------------------------------------------------------------------------
- A new flag has been introduced: -showvariants [optional instance name]
  which lists the variants supported by the processor model(s)

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which occasionally caused the Underflow flag to be set
  incorrectly for some corner-case fused-multiply-add operations.
- A bug has been fixed which could cause the simulator to behave incorrectly
  when a deration factor was set (for example, using vmirtSetDerateFactor) from
  a callback function during a partially-executed quantum.
- Behavior of the standard --finishtime simulator argument has been changed for
  more consistent behavior in multiprocessor simulations. Previously, this
  option caused an intrinsic instruction count breakpoint to be set on a
  processor, after which the simulation would exit. Now, the given cycle count
  argument is converted into an equivalent time, and simulation will finish
  after that time has passed. If multiple inconsistent --finishtime values are
  specified in a multiprocessor simulation, execution will finish at the
  earliest implied time.
- Behavior of the opProcessorClocksUntilTime, opProcessorClocksUntilTimeDouble,
  icmGetProcessorClocksUntilTime and icmGetProcessorClocksUntilTimeDouble
  functions has been modified so that the returned value will never cause
  execution beyond any active finish time (set by the simulator --finishtime or
  --finishafter arguments, or API functions opRootModuleSetSimulationStopTime,
  icmSetSimulationStopTime or icmSetSimulationStopTimeDouble).

MIPS Processor Model
-------------------------------------------------------------------------------
- Corrected command argument types in some processor models that were 
  incorrectly using an integer type which caused erroneous values to be written
  in some cases.
- Added nanoMIPS architecture support
   - I7200 variant support
- VLNV RENAME           ** IMPORTANT **
  Models from imgtec.ovpworld.org and mips.ovpworld.org have been combined under 
  the VLNV Vendor mips.ovpworld.org. The newly named mips32_r1r5 and mips64_r1r5
  model the MIPS Architecture version 1 to version 5 devices and the mips32 and 
  mips64 model the MIPS Architecture version 6 devices.
    mips.ovpworld.org  /processor/mips32/1.0 -> mips.ovpworld.org/processor/mips32_r1r5/1.0
    mips.ovpworld.org  /processor/mips64/1.0 -> mips.ovpworld.org/processor/mips64_r1r5/1.0
    imgtec.ovpworld.org/processor/mips32/1.0 -> mips.ovpworld.org/processor/mips32/1.0
    imgtec.ovpworld.org/processor/mips64/1.0 -> mips.ovpworld.org/processor/mips64/1.0


MIPS Cross Compiler Support
-------------------------------------------------------------------------------
- The mips-mti-elf and mips-img-elf cross compilers have been upgraded to 
  version 2017.10-07
- New nanoMIPS architecture support added
    - Cross Compiler (nanomips-elf) with NANOMIPS32R6LE Makefile
    - mips.ovpworld.org/semihost/nanomipsNewlib/1.0 semihost library

SystemC TLM Support
-------------------------------------------------------------------------------
- TLM Interface
  - Newer C++ compilers were reporting an error when compiling 
    ImperasLib/source/ovpworld.org/modelSupport/tlmNetPort/1.0/tlm/tlmNetPort.hpp
    "tlm_analysis_port' used without template parameters".
    This has been fixed.
- TLM API
  - The tlmProcessor class has new methods 'quantum' to get and set the local
    quantum.
  
###############################################################################
##                                                                           ##
## Date 2018-March-12                                                        ##
##                                                                           ##
## Release 20180221.1                                                        ##
##                                                                           ##
###############################################################################

Cross Compilers
-------------------------------------------------------------------------------
- A packaging error was corrected to include missing makefiles and target
  libraries in RISC-V, Microblaze and MIPS mti/img installers.

###############################################################################
##                                                                           ##
## Date 2018-February-21                                                     ##
##                                                                           ##
## Release 20180221.0                                                        ##
##                                                                           ##
###############################################################################

Instruction Set Simulator (ISS)
-------------------------------------------------------------------------------
- The processor model can now be specified by the path to its shared object or
  DLL OR by its VLNV. To use this option, please use -processorpath instead of
  -processorname etc.

Simulator start-up
-------------------------------------------------------------------------------
- The order in which peripheral models are initialized has been changed. There
  should be no effects other than re-ordering of messages from peripherals.
  Please contact Imperas if any problems occur.
  
Library maintenance
-------------------------------------------------------------------------------
- A new simulator command line option 
    -showlibraryvendors
  lists all the model vendors in the current VLNV search path.
  
Model Commands
-------------------------------------------------------------------------------
- The -help option now works on commands that otherwise take no arguments.
- Incorrectly specified commands in the -callcommand command line option
  are now reported before simulation rather than afterwards.
  
Loading of models
-------------------------------------------------------------------------------
- The new simulator command line option 
    -showload 
  shows where each model is loaded from.

Loading of extension libraries
-------------------------------------------------------------------------------
- The -extlib simulator command line option will now load an intercept library
  when the associated processor is created, but only if the intercept library
  will extend the processor (see below), otherwise it will be loaded after
  applications are loaded.
   
VMI API
-------------------------------------------------------------------------------
- A new entry arithResultCB of type vmiArithResultFn has been added to the
  processor vmiAttrs structure. If non-NULL, this function is called whenever
  and integer divide/remainder operation causes a divide-by-zero or integer
  overflow. The function should provide the quotient and remainder that should
  result, in the case that an exception should not be taken. If an exception
  should be taken, use the previously-existing arithExceptCB instead.
- The arithExceptCB callback (of type vmiArithExceptFn) has been enhanced to
  take an additional argument divideInfo of type vmiDivideInfoCP. This argument
  provides the dividend and divisor causing the exception, indicates whether
  the division is signed, and gives the parameter size in bits.
  
- An enumerated type parameter can now specify a default enumeration other than
  the first. Please specify a member of the enumerated types array in the 4th
  argument to the new macro VMI_ENUM_PARAM_SPEC_WITH_DEFAULT (in vmiParameters.h)

VMI OS FUNCTION API
-------------------------------------------------------------------------------
- It is now possible to define new registers and ports in intercept libraries
  that behave just like core processor registers and ports (for example,
  registers can be traced, appear in debuggers, and are accessible externally
  using ICM and OP function APIs; ports can be connected just like built-in
  processor ports). This is done using new regGroupCB and regInfoCB callbacks
  in the vmiosAttr structure (for registers) and busPortSpecsCB, netPortSpecsCB
  and fifoPortSpecsCB callbacks (for ports). See the OVP Processor Modeling
  Guide for more information.
- The vmiosAttr structure now contains a new 'allLevels' Boolean member. If this
  member is True, then an instance of the intercept library object is created
  on the instantiating core and all descendants. If this member is False, an
  instance of the intercept library object is created on leaf cores only
  (backwards-compatible behavior).
- Functions of type vmiosParamSpecFn and vmiosParamValueSizeFn now have an
  additional argument 'processor' (of type vmiProcessorP) which is the processor
  object on which the intercept library is being installed, and an additional
  argument 'parent' (of type vmiosObjectP) which is any vmiosObject allocated
  for this intercept library at the next-higher processor level. 'parent' is
  NULL for the level at which the intercept library is attached, or if the
  'allLevels' vmiosAttr structure member is False.
- Functions of type vmiosConstructorFn are now passed an additional 'parent' 
  argument, which is a pointer to any vmiosObject allocated for this intercept
  library at the next-higher processor level. 'parent' is NULL in the same
  circumstances as for vmiosParamSpecFn and vmiosParamValueSizeFn functions,
  described above.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions vmimtGetR, vmimtSetR, vmimtGetExtReg and vmimtGetExtTemp have
  been added to provide better support for creation of extension libraries
  (which add new registers, instructions or ports to existing processors without
  requiring modification of the processor).

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- User-defined memory access constraints have been generalized: previously, it
  was possible to specify a single user-defined constraint using a memConstraint
  of MEM_CONSTRAINT_NO_DEVICE in combination with a memPriv of MEM_PRIV_DEVICE;
  now, two separate user-defined constraints can be specified using
  memConstraint values of MEM_CONSTRAINT_USER1 and MEM_CONSTRAINT_USER2, in
  combination with memPriv values MEM_PRIV_USER1 and MEM_PRIV_USER2. The legacy
  device-based names correspond to MEM_CONSTRAINT_USER1 and MEM_PRIV_USER1.
  
- Model command parser.
  The standard command parser now accepts a set of argument types similar to
  OP parameter types:
        VMI_CA_BOOL   
        VMI_CA_INT32  
        VMI_CA_INT64  
        VMI_CA_UNS32  
        VMI_CA_UNS64  
        VMI_CA_DOUBLE 
        VMI_CA_STRING 
        VMI_CA_ENUM   
        VMI_CA_ENDIAN 
        VMI_CA_PTR 
  Macros in vmiCommand.h allow continued use of the old types.

ARM Processor Model
-------------------------------------------------------------------------------
- The following ARMv8 variants have been added:
    Cortex-A32MPx1, Cortex-A32MPx2, Cortex-A32MPx3, Cortex-A32MPx4;
    Cortex-A35MPx1, Cortex-A35MPx2, Cortex-A35MPx3, Cortex-A35MPx4;
    Cortex-A55MPx1, Cortex-A55MPx2, Cortex-A55MPx3, Cortex-A55MPx4;
    Cortex-A73MPx1, Cortex-A73MPx2, Cortex-A73MPx3, Cortex-A73MPx4.
    Cortex-A75MPx1, Cortex-A75MPx2, Cortex-A75MPx3, Cortex-A75MPx4;
- The following ARMv8.1 features are now supported by the model core, when ID
  registers indicate that they are present:
    ARMv8.1-Atomics, ARMv8.1-SIMD, ARMv8.1-VHE, ARMv8.1-LOR, ARMv8.1-HPD,
    ARMv8.1-TTHM, ARMv8.1-PAN, ARMv8.1-VMID.
- The following ARMv8.2 features are now supported by the model core, when ID
  registers indicate that they are present:
    ARMv8.2-ATS1E1, ARMv8.2-FP16, ARMv8.2-UAO, ARMv8.2-DCPoP, ARMv8.2-AA32HPD,
    ARMv8.2-TTPBHA, ARMv8.2-TTCNP, ARMv8.2-TTS2UXN, ARMv8.2-LVA, ARMv8.2-LPA,
    ARMv8.2-LSMAOC, RAS extension (with no error records).
- SCR_EL3.HW and HCR_EL2.HW are now RAO/WI if lower exception levels cannot use
  AArch32.
- Some non-functional AArch32 state debug registers that were previously missing
  have been added. These are: DBGWFAR, DBGDSAR, DBGDEVID, DBGDEVID1 and
  DBGDEVID2. Parameters have also been added to allow DBGDEVID, DBGDEVID1 and
  DBGDEVID2 to be set.
- A bug has been fixed which caused SError interrupts to be reported with
  incorrect IL in the syndrome (0 instead of 1).
- Address of AArch32 implementation-specific CBAR system registers for ARMv8
  variants has been changed to Cp=15, op1=1, CRn=15, CRm=3, op2=0. Previously,
  they were incorrectly addressed using Cp=15, op1=4, CRn=15, CRm=0, op2=0.
- A bug has been fixed which caused incorrect behavior for Thumb-mode 32-bit
  instructions starting at address 0xfffffffe (i.e. which cause 32-bit address
  space wraparound).
- The cycle counter in the ARM Performance Monitors extension (version 3) has
  been implemented (previously, this was a register interface only).

RISCV Processor Model
-------------------------------------------------------------------------------
- The model has been extensively rewritten to implement privilege levels and
  state consistent with Privileged Architecture version 1.10, including virtual
  memory and physical memory protection registers.
- An intercept (extension) library can be loaded and a SignatureFile parameter 
  specified to set the file into which a signature, compatible with that
  generated by the Spike simulator, will be written. Load the intercept library
  by adding 
    --extlib riscv.ovpworld.org/intercept/spike/1.0
  to the command line.
- The riscv processor models for vendors Andes, SiFive and Microsemi have been 
  renamed
  To see the variants for a specific vendor you should now use
    iss.exe --showvariants --processorvendor riscv.ovpworld.org     --processorname riscv
    iss.exe --showvariants --processorvendor andes.ovpworld.org     --processorname riscv
    iss.exe --showvariants --processorvendor sifive.ovpworld.org    --processorname riscv
    iss.exe --showvariants --processorvendor microsemi.ovpworld.org --processorname riscv

OP API 
-------------------------------------------------------------------------------
- Added functions to interrogate models command arguments:
   opCommandArgIterAll()        get a callback on each argument
   opCommandArgName()           get the argument name from a handle
   opCommandArgDescription()    get the argument description from a handle
   opCommandArgType()           get the argument type from a handle
- SimPoint format output BBV file operations have been enhanced, as follows:
    - New function opBBVEnablePerSlice has been added, allowing automatic
      dumping of SimPoint "T" records when time is advanced to be automatically
      enabled.
    - When function opBBVSetFile is called, the default is now that automatic
      dumping of T records is off. Previously, it was on by default.
    - Function opBBVDumpRecord has been added, which explicitly dumps a SimPoint
      "T" record.
- Added a new system parameter tracemode (macro OP_FP_TRACEMODE) to include
  the current processor mode in each trace line when instruction tracing is 
  turned on.

Processor Model Commands
-------------------------------------------------------------------------------
- The debug commands supported by the processor models are updated to use the
  standard simulator command line parser. The model commands are modified so 
  that there is no use of naked arguments. For example, a command such as 
       > myCommand <value>
  is now of the format
       > myCommand -argument <value>

MIPS CrossCompiler Usage in Examples and Demos
-------------------------------------------------------------------------------
- The MIPS SDE and CodeSourcery Cross Compilers have been replaced with the 
  current MIPS MTI (mips-mti-elf) and IMG (mips-img-elf) CrossCompilers. These
  are provided in packages mips-mti.toolchain and mips-img.toolchain respectively.
- The OVP MIPS Processor Model default semihosting is changed to use the 
  mips32Newlib semihost library (previously the default was mips32SDE).

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which could cause a SEGFAULT when data was written or
  loaded into bus regions with no target device.
- Artifact reads and writes to memory regions with target devices but no access
  permissions are now explicitly allowed (allowing initialization and query of
  such regions from a debugger or harness).

Xilinx Zynq Models
-------------------------------------------------------------------------------
- The SLCR peripheral has been updated to correct the deration of ARM CPU cores
  when the clock is disabled. This could cause a failure in a Linux kernel boot.
- The IIC peripheral has been updated so that accesses to the PMBus channel are
  passed along. A dummy PMBus device that provides dummy data values has been 
  added to the zc702/zc706 modules. The data values can be updated using a power
  estimation library via a memory region.
- The DEVCFG peripheral includes default values for the power, voltage and 
  current readings of the XADC and as such is configured for the board type being
  simulated.
- The additional XADC MUX components have been added to the zc706 to allow correct
  selection of rail values.
- Power Monitoring Devices ucd9248 and ucd9012a have been updated so that the 
  power, current and temperature rails can be configured to default values.
  In progress is an update to allow the rails to be updated using a power model
  interception library. 

###############################################################################
##                                                                           ##
## Date 2017-September-19                                                    ##
##                                                                           ##
## Release 20170919.0                                                        ##
##                                                                           ##
###############################################################################

RISC-V Processor Models
-------------------------------------------------------------------------------
This is the first release of our collection of RISC-V models. There is a generic
model that implements the RISC-V ISA variants and there are vendor specific
cores from Andes, SiFive, and Microsemi.

To see the available processor models use:
    iss.exe --showlibraryprocessors
and to see the specific variants these contain use:
    iss.exe --showvariants --processorname riscv
    iss.exe --showvariants --processorname andes_riscv
    iss.exe --showvariants --processorname sifive_riscv
    iss.exe --showvariants --processorname microsemi_riscv

VMI RUN TIME INTERFACE
-------------------------------------------------------------------------------
- Implementations of vmirtAddCommandParse and vmirtFindArgValue have been
  corrected (previously, these caused SEGFAULT).
    
IGEN
-------------------------------------------------------------------------------
- A spurious report of duplicate peripheral register names has been removed.

Xilinx Peripheral Models
-------------------------------------------------------------------------------
- The SLCR device for the Xilinx Zynq platform has been updated to use the ARM 
  Clock registers to determine the current operating frequency and then to set 
  the deration factor that can be applied to reduce the ARM Cortex-A9 MIPS rate
  from the default.
- The PS_CLK frequency can be set on the board and is passed down to the SLCR
  peripheral.
- The AXI/XPS Timer interrupt signal is now held until cleared, which now 
  supports both edge and level triggered interrupts.
- The devcfg peripheral includes the XADC interface that can be used to access
  the board temperature and voltage information. Default values are provided but
  these can be updated dynamically by a test harness or an intercept library.
- The I2C peripheral model has been updated. The access to the I2C devices on the
  zc702/zc706 boards have not been added so dummy values will be read.

Processor Model register definition checking
-------------------------------------------------------------------------------
- The simulator now checks that the gdb index number of each processor register
  is unique and issues warnings if duplicates are found.
  
V850/RH850 Processor Model
-------------------------------------------------------------------------------
- Fixed bugs for SCH0R, SCH0L, SCH1R, SCH1L
  Issue when operand 1 and 2 use the same register.

Microblaze Processor Model
-------------------------------------------------------------------------------
- Added better diagnostic messages for missing features associated with options
  supporting configurable instructions types
-------------------------------------------------------------------------------

OP API 
-------------------------------------------------------------------------------
- Function opBBVSetFile has been added, which allows the SimPoint format output
  BBV file to be specified dynamically (previously, it was only possible to do
  this using a command line argument). BBV file generation may now be enabled
  dynamically, as follows:
  1. run simulation normally to the point of interest;
  2. call opBBVSetFile and opBBVOn to enable file generation;
  3. continue simulation.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- A new function vmirtYieldControl has been added. This causes simulation to
  stop on completion of the current instruction and return to the calling
  context with stop reason OP_SR_YIELD (for the OP interface) or ICM_SR_YIELD
  (for the legacy ICM interface).

ARM Processor Model
-------------------------------------------------------------------------------
- Reserved AArch64 ID register encodings are now implemented as RAZ; previously,
  they were undefined.
- AArch64 ACTLR_EL1, ACTLR_EL2 and ACTLR_EL3 have all been widened to 64 bits,
  and AArch32 ACTLR2 and HACTLR2 are now implemented, if indicated by the AC2
  field of ID_MMFR4.
- The address recorded in artifact PTWAddressL0...PTWAddressL3 registers has
  been corrected to remove a bogus non-secure bit at position 49.
- Errors in detection of faulty translation table configurations with long
  descriptor format entries have been corrected.
- When verbose memory-management messages are enabled (by setting bit 3
  of "debugflags" parameter on processor instance) messages are now generated
  indicating the cause of any Translation Fault generated by a translation table
  walk.
- Parameters have been added allowing control of some CONSTRAINED UNPREDICTABLE
  behaviors related to translation table walks. These are as follows:
  - override_stage1SZMinFault (Boolean)
    By default, specifying a T0SZ/T1SZ value smaller than the legal minimum of
    16 in a long-format translation control register will cause that value to
    be treated as 16. Setting this parameter to true will instead cause a
    level 0 Translation Fault to be generated.
  - override_stage1SZMaxFault (Boolean)
    By default, specifying a T0SZ/T1SZ value larger than the legal maximum of
    39 in a long-format translation control register will cause that value to
    be treated as 39. Setting this parameter to true will instead cause a
    level 0 Translation Fault to be generated.
  - override_stage2SZMinFault (Boolean)
    This is equivalent to override_stage1SZMinFault, for stage 2 entries.
  - override_stage2SZMaxFault (Boolean)
    This is equivalent to override_stage1SZMaxFault, for stage 2 entries.
- Features supported by ARMv8.1 have been implemented (enable by overriding
  feature fields in appropriate ID registers).
- A bug has been fixed that that prevented top byte ignored (TBI) mode working
  correctly in some circumstances.
- For processors implementing AArch32 state, external definitions of CNTP_CTL,
  CNTP_CVAL and CNTP_TVAL have been corrected to expose both secure and
  non-secure versions of these registers through the debug interface
  (previously, only the non-secure register was visible through this interface).
- When AArch32 secure/non-secure current value registers are read through the
  debug interface, the value reported has changed if the processor is currently
  in AArch64 EL3 state. Now, the non-secure value is accessed; previously, the
  secure value was accessed. Note that this affects debug interface accesses
  only: core processor functionality is unchanged.
- Parameters have been added allowing CCSIDR (or CCSIDR_EL1) default values to
  be specified in variants that support these registers.
- Default value of ID_MMFR0_EL1.AuxReg has been changed to 2 on Cortex-A53 and
  Cortex-A57 variants, to conform with prescribed value for ARMv8.
- A bug has been fixed that caused some traps of system register accesses from
  EL0 state to EL2 state when HCR_EL2.TGE=1 to be handled incorrectly.
- Disassembly of floating point instructions such as fcmeq which take a final
  constant zero have been corrected to conform to the ARM ARM. The new
  disassembly is of the form:
      fcmeq s3,s4,#0.0
  Previously, the disassembled output was of the form:
      fcmeq s3,s4,#0
- Implementation of FRECPE, FRECPX and FRSQRTE instructions has been changed to
  improve instruction attributes reporting and behavior when floating point
  exceptions are enabled.
- AArch64 ERET instructions now indicate that CPSR is updated in instruction
  attributes.
- A bug has been fixed in which some forms of AArch32 exception return
  instruction (e.g. movs pc, lr) were not clearing the local Exclusive Monitor.
- AArch32 ARM mode conditional and unconditional instructions are now decoded
  separately, in accordance with the ARM ARM. Previously, undefined
  unconditional instruction patterns that (ignoring bits 31:28) matched an
  implemented conditional instruction pattern would have been incorrectly
  decoded as the conditional instruction (with Always condition).

ARMM Processor Model
-------------------------------------------------------------------------------
- Behavior when override_numInterrupts is used to modify the number of external
  interrupts has been corrected.

MIPS Processor Model
-------------------------------------------------------------------------------
- Updated the behaviour of YIELD instruction for source GPR value of -1 
  (i.e. called as YIELD -1) to advance to the next instruction if a high 
  priority thread is runnable rather than re-executing the YIELD itself.

Demo/Processor/MIPS
-------------------------------------------------------------------------------
- The cross compiler toolchains used for the MIPS demos and examples are being
  updated to make use of the Imagination Technologies IMG Bare Metal and MTI 
  Bare Metal cross compiler toolchains.
- The GDB initialization has been updated to add the specification of a 
  target description file to fix debug for the P5600 variant.

Demo/PlatformsICM_TLM2.0
-------------------------------------------------------------------------------
- The MIPS demos and platforms have been updated to utilize the latest mips 
  cross compiler toolchains.
- The platform definitions have been updated to use the Imperas command line
  parser.
- The optimization levels of the pre-built elf files are not, in all cases, the
  same as when regenerated by the provided Makefile which contains a single 
  default optimization level for all applications.

Peripheral Ethernet Modeling Interface
-------------------------------------------------------------------------------
- The slirp layer used within the Ethernet interface was modified to allow 
  'Gratuitous ARP' messages, this previously caused an assertion.

Xilinx Zynq Virtual Platform
-------------------------------------------------------------------------------
- Interrupt generation has been included in a number of Xilinx peripherals used
  in the Xilinx Zynq
- Further Xilinx Zynq peripherals with register only interface have been added
  to provide the programmers view of register accesses. These include, but are 
  not limited to, Zynq-7000-usb, Zynq-7000-can; please check individual 
  component documentation.
- The interrupt signals from the PL to the PS have been added, these were missing
  from the initial version.

MicroBlaze CrossCompiler
-------------------------------------------------------------------------------
- A new makefile.include files is added to provide support for building little
  endian targets.
  NOTE: The current toolchain cannot build little endian targets on Windows hosts.
  
OP API 
-------------------------------------------------------------------------------
- Functions opBBVOff and opBBVOn have been added. These allow generation of
  the SimPoint format BBV file to be turned off and on dynamically during a
  simulation. BBV file generation must be enabled for the simulation run using
  the command line option --bbvfile <filename> for these functions to have any
  effect.
  
- In OP++ a new method commandByName(string) performs a hierarchical search
  for a command object from the module level. 
  
- Bus overlap checking.
  The simulator now checks and reports when devices are connected to a bus with
  static address decodes that overlap each over. This feature can be turned off
  by setting the parameter nooverlapcheck as shown in these examples:
  -override nooverlapcheck=T             # apply to all buses
  -override u1/bus/nooverlapcheck=T      # apply to this bus
  
VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions vmirtSetBlockMask32 and vmirtSetBlockMask64 have been added.
  These functions modify the current processor block mask held in a 32-bit or
  64-bit processor field, respectively (in other words, they have an equivalent
  effect to the existing function vmirtSetBlockMask, except that the existing
  function operates on the 32-bit internal block mask only).
  
- A new bit field 'isAlias' in the processor register information object
  (vmiRegInfo) informs the simulator that this is an alias of another register,
  and so can share its GDB index number.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- The fourth argument to the function type vmiRegInfoFn has been changed from
  a Boolean (indicating normal or RSP register request) to an enum withe the
  following members:
    VMIRIT_NORMAL:      normal register request, not RSP (False previously)
    VMIRIT_GPACKET:     RSP 'g' packet register request
    VMIRIT_PPACKET:     RSP 'p' packet register request
  This allows registers to be transferred using 'p' packet requests that are not
  members of the 'g' packet. 

Simulator Core
-------------------------------------------------------------------------------
- Double-width multiply operations (created by vmimtMulopRRR) are now handled
  by address expression evaluation in the instruction attributes API.
- The simulator core has been enhanced to implement half-precision floating
  point operations. Because of this, the third argument to functions of type
  vmiFPTinyResultFn has been changed from a Boolean to an Uns32 indicating the
  required result size in bits (16, 32 or 64).
- Two user-defined floating point flags are now available. vmiFPFlags and
  vmiFPControlWord structures have been enhanced accordingly.
- The default simulation algorithm used by opRootModuleSimulate or
  icmSimulatePlatform has been enhanced with a new option which defers running
  of halted processors to a delta cycle in each quantum (in other words, all
  non-halted processors are run first in a quantum, followed by halted
  processors). This change makes monotonic timers advance more evenly in
  circumstances where all processors but one are halted in a multiprocessor
  simulation.
  - To use the new feature when using the OP interface, set parameter
    "deferhaltedprocessors" on the root module to True.
  - To use the new feature when using the ICM interface, specify
    member DEFER_HALTED_PROCESSORS when using the simAttrs argument of
    icmInitPlatform.

Simulator Run Time objects deleted
-------------------------------------------------------------------------------
- The deprecated simulators 
  bin/$IMPERAS_ARCH/libOVPsimICM and bin/$IMPERAS_ARCH/libCpuManagerICM
  have now been deleted and are no longer supported.
  The environment variable IMPERAS_LOAD_ICM is no longer used.
  
iGen writing VMI pointer parameters
-------------------------------------------------------------------------------
- When writing the template for a VMI intercept library, the igen command
  ihwaddformal -type parameter 
  now correctly produces a pointer type parameter.
  
###############################################################################
##                                                                           ##
## Date 2017-May-12                                                          ##
##                                                                           ##
## Release 20170511.0                                                        ##
##                                                                           ##
###############################################################################

ARMM Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed that caused bogus Illegal Instruction exceptions when a  
  VFP instruction is executed that writes to VFP register 15 and is in a 
  Thumb-2 IT block and is not the last instruction of the block.
- Code generated for Thumb-mode instructions using aligned PC-relative address
  has been modified slightly to allow position-independent interpretation of
  address expressions returned using the instruction attributes API.
  
ARM Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed that would cause SIMD VLDn/VSTn instructions encoded in
  Thumb-2 format that do an unaligned memory access to generate alignment 
  exceptions even when SCTLR.A was 0.
- A bug has been fixed that caused Illegal Instruction exceptions when one of 
  the VFP instruction that supports vectors (VABS, VADD, VDIV, VMLA, VMLS, 
  VMUL, VNEG, VNMLA, VNMLS, VNMUL, VSQRT or VSUB) is executed that writes to VFP 
  register 15 and is in a Thumb-2 IT block and is not the last instruction of 
  the block. This bug also occurred for the VFP VSWP instruction.
- A bug has been fixed that would cause an Internal Assert error when executing 
  some VLDn/VSTn instructions in Thumb-2 mode. 
- Code generated for Thumb-mode instructions using aligned PC-relative address
  has been modified slightly to allow position-independent interpretation of
  address expressions returned using the instruction attributes API.
- An error has been fixed which caused incorrect status to returned for AArch32
  stage 1 and stage 2 address translation instructions in some circumstances.
- Address translation instructions that perform stage 1 translations only have
  been modified so that stage 2 table walks are not performed. Previously,
  these instructions could initiate stage 2 table walks in some circumstances.
- An error has been fixed which occasionally caused an abort from a stage 2
  address translation to be generated instead of a stage 1 abort for the same
  translation.
  
Demo/Platforms/Linux_ARMv8-A-FMv1
-------------------------------------------------------------------------------
A mistake in the memory specification in the Linux device tree has been fixed 
so that Linux knows about the entire 8GB of DRAM memory defined in the module. 
Previously the device tree only told Linux about the first 4GB of memory. 

Instruction Set Simulator (ISS)
-------------------------------------------------------------------------------
- Fixed a bug which occurred when '-addressbits 64' was specified.

RISCV Processor Model
-------------------------------------------------------------------------------
- The model supporting variants RV32G, RV32I, RV64G and RV64I is released.
    
Examples/Models/Peripherals/dynamicSlavePort
-------------------------------------------------------------------------------
- This is a new example that has been added to show the use of dynamic slave
  ports in a peripheral model.

Examples/SimulationControl/dynamicHarness
-------------------------------------------------------------------------------
- This example has been enhanced to support a new command line argument:
  --instancecount, which specifies the number of instances of the specified
  module to instantiate. This allows easily creating very large simulations to
  investigate scalability.
- The --parameter argument in this example is now properly supported - 
  previously this argument was ignored.

OR1K Processor Model
-------------------------------------------------------------------------------
The example OR1K processor model structure has been enhanced as follows:
- There is now an intermediate structure created which contains details of
  decoded instructions. This limits the scope of instruction field access macros
  to file or1kDecode.c only, and eliminates dependencies of downstream modules
  (disassembler and morpher) on instruction format.
- The disassembler has been written as a state machine driven from data in
  the intermediate structure. It has also been enhanced to support uncooked
  disassembly (to allow easier integration with tools).
- The JIT instruction morpher (file or1kMorph.c) is now driven from the
  intermediate structure.
Imperas recommends that new processor models conform to this enhanced structure.

OVP Processor Modeling Guide
-------------------------------------------------------------------------------
- This guide has been updated to use the new OP interface in place of the
  legacy ICM interface, and to reflect latest guidelines for processor modeling.

MIPS Malta Linux install demo
-------------------------------------------------------------------------------
- The demo PlatformsICM/OVPsim_Linux_MipsMalta_install has been updated to use 
  the Debian jessie installation.
- an intercept library has been added to intercept the call to 'mips_machine_halt'
  and stop the simulation
     'mips.ovpworld.org/semihosting/mips32DebianKernelHalt/1.0'
  The jessie build contains an infinite code loop in this function

OP API 
-------------------------------------------------------------------------------
- Functions have been added allowing save/restore of nets (opNetStateSave,
  opNetStateSaveFile, opNetStateRestore and opNetStateRestoreFile).
  
- The simulator now checks (and enforces) that the number of address bits on a
  bus falls within the allowed range of each bus port connected to it. If you
  see the error OP_BPAB, please check the width of each bus (supplied to 
  opBusNew()) against specification each connected bus master port.
  The specification is held in a peripheral model in the ppmBusPort structure 
  and in a processor model in the vmiBusPort structure.
  
- Module diagnostics.
  To turn diagnostics on and off in a module:
  In a module, a function defined using the macro OP_DIAG_SET_FN and assigned
  to the modelAttrs member diagSetCB will be called to set the diagnostic level. 
  A new function can be called from a test-harness:
    void opModuleDiagnosticLevelSet (optModuleP module, Uns32 level)
    to set the level in the given module.
  At start-up, on each module, a parameter diagnosticlevel can be set or
  overridden to call the diagSetCB function.
  A new command line or control file flag -modulediags can be used to set
  some or all module diagnostic levels.
  
- libRuntimeLoader.so (and dll) now checks its API version against the version
  string (which should come from op.h if the API is being used correctly) to
  ensure that the runtime loader, the simulator and the C header files match.
  
BHM API
-------------------------------------------------------------------------------
- New function bhmStop has been added, which either returns control to an
  attached debugger or exits simulation (if no debugger is attached).
- The bhmEthernetOpen and bhmEthernetOpenAuto have been extended to pass the name
  of a logfile into which Ethernet frames will be written in pcap format.
  This allows programs such as Wireshark to be used to examine Ethernet traffic.
  The parameter 'logfile' has been added to the formal Macro 
  BHM_ETHERNET_OPEN_AUTO_FORMALS which should be included in your model.
  Note: This is not available when using replay.
- A bus master connection must now specify the default,minimum and maximum
  number of address-bits of the bus it connects to. Please refer to the
  ppmBusPort structure in ImpPublic/include/target/peripheral/ppm.h
  Also note that the igen command imodeladdbusmasterport now accepts extra options
  -addresswidthmin and -addresswidthmax.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- vmirtGetSymbolByAddr, vmirtGetSymbolByName, vmirtGetFLByAddr and
  vmirtAddressLookup now translate their address according to any virtual/
  physical mapping that is  in force, before looking in the symbol tables.
- A debugger helper plugin can use a new helper function: stackCB which
  returns a list of addresses on the current stack.
- The readCB and writeCB arguments to vmirtMapCallbacks may now be NULL if
  required, in which case no callback will be activated for the specific access
  type (previously, both callbacks were required to be non-NULL). If both
  callbacks are omitted, the call is equivalent to vmirtMapMemory with memType
  of MEM_RAM.
- The memPriv type has been enhanced to allow memory-side read and write
  alignment checks to be specified separately. The enumeration now contains
  these new members:
    MEM_PRIV_ALIGN_R,    // read alignment checks always enabled
    MEM_PRIV_ALIGN_W,    // write alignment checks always enabled
  This allows specification of regions that (for example) permit unaligned
  write accesses but prevent unaligned read accesses.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- The 'updateCB' argument to vmimtConnGetRB and vmimtConnPutRB may now be
  omitted; if so, the behavior on restart after block will be as if function
  vmirtRestartNow has been called.

MIPS Processor Model
-------------------------------------------------------------------------------
- GIC now supports EIC-mode
- Fix to limit forcing Config5.CV=1 on EVAReset to MPU2 enabled cores only
- Fixed a possible segmentation fault when writing to MVP Control register
- Update 'Rd' after the thread is resumed (for example, yield is complete) 
  for rs=-1 or rs>0. Do not update destination register when the thread is 
  yielded (for example, de-scheduled)
- Set PC to point to YIELD instruction when the thread is yielded and advance
  past the PC when the thread is resumed
- Don't update GIC_VPE_PERFCTR_MAP if performance counters are not present
- Add 16 individual YQ NetPorts named yq0, yq1, ... to yq15. This change is 
  to allow some YQ pins to be set by the GIC whereas others may be set by 
  external logic. With the current single YQ NetPort is that all YQ pins must
  come from either the GIC or the NetPort but not a mix of the two. 
  Calling icmWriteNetPort() will overwrite any YQ pin settings done by a 
  MAP_TO_YQ interrupt from the GIC.
- New parameter showVPEInTCName added for MT-ASE cores such as interAptiv to 
  show the VPE number in the trace file. Enabling this parameter would 
  trace <CORENAME>_CPU<c>_VPE<v>_TC<t> instead of the current
  <CORENAME>_CPU<c>_TC<t> format.
- New parameter isITCCMP is added to enable support for Inter Thread
  Communication Unit (ITU) to be a shared resource accessible by all the cores
  in each multi-processor instance for mips.com Models that supports ITU. 
  By default, each core has its own independent ITU block
- Fix multiple pending GIC interrupt support.
- Change yq# descriptions to omit the pin number to be consistent with the int#
  pin descriptions.

Simulator Core
-------------------------------------------------------------------------------
- Fetches from uninitialized memory will now cause simulation to terminate
  unless simulated exceptions are enabled (using the "simulateexceptions"
  parameter on a processor instance). Previously, simulation would always
  terminate unless a debugger was attached.
- A bug has been fixed in which instruction counts returned by opProcessorICount
  and icmGetProcessorICount could be incorrect for multithreaded processors.
- The Windows parallel simulation algorithm has been enhanced so that affinity
  options previously only available on Linux are now supported on Windows as
  well.
- The parallel simulation algorithm used when the number of available host
  threads is less than the number of simulated cores has been modified to
  improve performance in most cases. To revert to the original algorithm,
  specify:
      --parallelopt 4
  in addition to other parallel simulation options (--parallel or --parallelmax,
  perhaps in combination with --parallelthreads <number>).
- A bug has been fixed which caused PSEs to be unresponsive to vmirtStop calls.

SIMULATION START-UP SEQUENCE.
-------------------------------------------------------------------------------

  The old start-up sequence is:
  
    1. platform construction
    2. processor constructors
    3. load programs specified with -program etc.
    4. intercept library constructors
    5. peripheral constructors
    6. simulation start event
    7. simulation
    
  Some platforms use a peripheral model to connect two buses together,
  providing a dynamic mapping between, for example, a processor an a memory.
  No mapping will exist until the peripheral has run its constructor. Platforms
  using this technique required the use of specific OP functions and could not
  use a standard harness. Now that this idiom is becoming more common, the
  simulator start-up sequence has been changed to this:
  
    1. platform construction
    2. processor constructors
    3. peripheral constructors ****
    4. load programs specified with -program etc.
    5. intercept library constructors
    6. simulation start event
    7. simulation

  Most platforms will function correctly, perhaps with a re-ordering of
  diagnostic messages, but a few customers use -program <file> to load
  an application program after which a peripheral model overwrites some of the
  program with different contents. This will no longer work because the
  peripheral will run before the program is loaded. A simple change to the
  peripheral model main() will fix this:
  
  1  main() {
  2      /* read model parameters and initialize */
  3      read_parameters_and_initialize();
  4      
  5      /* NEW CODE: WAIT UNTIL AFTER THE PROGRAM IS LOADED */
  6      bhmWaitEvent(bhmGetSystemEvent(BHM_SE_START_OF_SIMULATION));
  7    
  8      /* load the memory */
  9      load_the_memory();
  10  
  11     bhmWaitEvent(bhmGetSystemEvent(BHM_SE_END_OF_SIMULATION));
  12 }
  
  As commented, the code inserted at line #6 pauses the peripheral
  until the simulator has loaded any programs specified on the command line.
  
  Effect on Multi Processor Debugger. This change has an effect on the initial
  state on the Multi Processor Debugger. Refer to CHANGELOG.SDK.txt
  
CROSS COMPILER TOOLCHAIN SUPPORT
-------------------------------------------------------------------------------
- The ARM Cross Compiler toolchain arm-elf, which supported some architectures
  prior to armv4t has been removed and the support has been modified for ARM7 
  and ARM9 processors to use the armv7 toolchain. The support Makefiles are now 
  ARM7TDMI (previously ARM7) and ARM9E/ARM9T (previously ARM9)
- A new ARM11 makefile has been added.
- The use of CodeSourcery cross compilers for ARM has been removed from Examples 
  and Demos. Examples and Demos now use later freely available cross compilers 
  that are also distributed by OVP.

V850/RH850 Processor Model
-------------------------------------------------------------------------------
- Correctly update the processor mode on an interrupt.
- Correct the sending of interrupt acknowledge when multi level interrupts.
- Check PSW.EP bit is set before an update to the ISPR register.
   
###############################################################################
##                                                                           ##
## Date 2017-February-01                                                     ##
##                                                                           ##
## Release 20170201.0                                                        ##
##                                                                           ##
###############################################################################

V850/RH850 Processor Model
-------------------------------------------------------------------------------
- The max value of 'PEID' has been raised from 2 to 3
- The SYSCALL instruction has been added
- When MCTL.UIC is 1, DI/EI instructions are allowed to execute even if in the
  user mode

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- The simulated ASID type has been changed from Uns32 to Uns64. This affects
  functions that use or return an ASID or ASID mask (vmirtSetProcessorASID,
  vmirtGetProcessorASID, vmirtAliasMemoryVM, vmirtUnaliasMemoryVM and
  vmirtGetDomainMappedASID).
- New functions vmirtGetQuantumStartTime, vmirtGetQuantumEndTime,
  vmirtGetLocalTime and vmirtGetMonotonicTime have been added which allow
  simulated time to be queried.
- New functions vmirtCreateQuantumTimer and vmirtDeleteQuantumTimer allow
  creation and deletion of quantum timer objects, enabling client functions
  to be called at every quantum boundary.
- New function vmirtSetCreateDomainContext has been added. This specifies a
  context processor for subsequent calls to vmirtNewDomain. Domain names will
  then include a hierarchical processor name component.
- The simulator now checks that a processor model cannot have more than one
  bus port of type vmi_DOM_DATA and one of type vmi_DOM_CODE (any other bus
  ports must be of type vmi_DOM_OTHER). Some models have be updated to conform.

MIPS Processor Model
-------------------------------------------------------------------------------
- New function vmirtSetCreateDomainContext has been used to ensure model memory
  domains are associated with the correct vmiProcessorP objects in a cluster
  hierarchy.

ARM Processor Model
-------------------------------------------------------------------------------
- New warnings have been added if the TCR_ELx.TG0/1 fields are set to invalid
  or unsupported values. This can help identify errors when configuring address 
  translation that are otherwise very difficult to track down.
- In the event that an invalid or unsupported value is written to a 
  TCR_ELx.TG0/1 field, a legal default value will be used. Previously it was
  possible that the default value used was not supported according to the 
  ID_AA64MMFR0_EL1 TGranX field values.
- A check has been added that the TGranX fields in the ID_AA64MMFR0_EL1 register
  have been configured to support at least one memory translation granule size.
  If not, then any attempt to do address translation will result in a fatal 
  error. 
- The integration support PTWBase value now holds the correct page table base 
  address. Previously it held the address of the first level page table entry.
- Parameters have been added allowing Aff0, Aff1 and Aff2 values in the MPIDR
  or MPIDR_EL1 system registers to be set (override_MPIDR_Aff0,
  override_MPIDR_Aff1 and override_MPIDR_Aff2).
- New function vmirtSetCreateDomainContext has been used to ensure model memory
  domains are associated with the correct vmiProcessorP objects in a cluster
  hierarchy.

armAngel semihost library
-------------------------------------------------------------------------------
- Fixed bug in ARM Angel sys_open when called with mode = 0x6 ("w+"). The host
  file was opened with invalid permissions (both O_RDWR and O_WRONLY set), which
  can lead to unpredictable behavior.
   
SystemC TLM2.0 Interface
-------------------------------------------------------------------------------
- The SystemC TLM interface now calculates the number of instructions per quantum
  using the MIPS rating of the processor which can be changed by setting the 
  "mips" parameter on the processor instance. Previously the effective MIPS 
  rating was determined by variables maintained in the SystemC class instance.
  The MIPS can now be set like any other parameter or by using 
  -override in a control file.

Simulator Core
-------------------------------------------------------------------------------
- Implementation of simulated memory has been modified to improve simulation
  memory footprint in complex applications (such as simulating Linux or
  Android). Set environment variable IMPERAS_NO_OPT_VM to 2 to revert to the
  previous algorithm if required.
- A debug mode has been added enabling general PSE thread and callback activity
  to be monitored. Set environment variable IMPERAS_DBG_PSE to 1 to enable this
  mode. When enabled, messages are printed:
  - when PSE threads and callbacks are created and terminated;
  - when PSE threads are moved to the scheduled event queue;
  - when PSE threads wait for an event or for a delay; and
  - when PSE threads resume after a delay.
  Messages are preceded by the current time and report the PSE name and thread
  name.
- Names of memory domain objects created by vmirtNewDomain have been enhanced
  to include a hierarchical processor component. Use new function
  vmirtSetCreateDomainContext to override the default context processor before
  calling vmirtNewDomain if required.
- PSE handles are allocated differently so that allocated handle values are
  object-type specific and local to each PSE.

Utilities
-------------------------------------------------------------------------------
- change of command line flags 
  Programs that use the standard command line to print the contents of the VLNV
  library directories have new flags:
   OLD name                  NEW name
  -showlibrary              (unchanged)
  -showmodules              -showlibrarymodules
  -showmmcs                 -showlibrarymmcs
  -showextensions           -showlibraryextensions  
  -showperipherals          -showlibraryperipherals
  -showprocessors           -showlibraryprocessors     

Program Loader
-------------------------------------------------------------------------------
- The function icmLoadProcessorMemory has a new icmLoaderAttrs value 
  ICM_SIGN_EXTEND_ADDR 
  that causes addresses to be sign-extended from 32 to 64 bits if:
    1. the processor bus domains are larger than 32 bits and
    2. the executable has 32 bit addresses.
  This is of particular use when running a MIPS32 executable on a MIPS64
  processor.
  
- The program loader now loads executable headers via the processor INSTRUCTION
  port and non-executable headers via the processor DATA port.

###############################################################################
##                                                                           ##
## Date 2016-October-05                                                      ##
##                                                                           ##
## Release 20161005.0                                                        ##
##                                                                           ##
###############################################################################

Simulator
-------------------------------------------------------------------------------
- Output from the command -showoverrides now has a new field stating
  from where the parameter value comes. e.g.

    --override <name>=<current value>  (<type>) (default=<default value>) (<origin>) <description>

  Where <origin> can be 
     default  - the parameter is using its default value from the model.
     platform - A module or harness is setting the parameter to a value
                (which might be the same as the default value).
     override - The value is set by -override from the command line or a 
                control file (again the value could be the same as the default).
                 
ELF file reader
-------------------------------------------------------------------------------
- The ELF file reader now supports DWARF version 4.

HTTP visualization
-------------------------------------------------------------------------------
- Peripherals, modules and intercept objects can now be written to display
  a user representation of their state in a web browser.
  For peripherals and module usage, please see the examples:
      Examples/Models/Peripherals/visualization
      Examples/PlatformVisualization
  For intercept object usage please see the examples:
  (note these may not be present in all packages)
      Examples/Models/Processor/Visualization\monitorProcessorSMP
      Examples/BinaryInterception/Visualization

MIPS Processor Model
-------------------------------------------------------------------------------
- The interAptiv and interAptiv UP models now have optional support for the 
  interAptiv 1.3.0 release features.
  - MIPS16e2 instruction support
  - MIPS32 SAVE and RESTORE instruction support
  - MPU support
- interAptiv model specific information:
  - The pridRevision parameter must be set to 0x2c to enable interAptiv 1.3.0 features
    (0x2c is the encoded value for 1.3.0).
  - The mpuType defaults to 2 for interAptiv 1.3.0.
- interAptiv model updates:
  - The mpuRegions parameter's upper limit has increased from 16 to 32.
  - Added implementation specific reset value for CDMMBase.UPPER_CDMM_ADDR
    to default to physical address 0x1fc10000.
  - Added vestigial FDC to match hardware CDMM address space layout.
  - MPU Segment CCA values default to 2 (uncached) at reset unless 
    overridden by the mpuSegment<N> parameters.
  - Reset state of MPU_Config.En is determined by GCR_CL_RESET_EXT_BASE.EVAReset
    for MP or SI_EVAReset for UP.
  - When the mpuEnable parameter is set IASim forces the EVAReset bit of
    the GCR_C<N>_RESET_EXT_BASE (where N is 0, 1, 2 or 3) parameters to be
    set for MP cores or the EVAReset parameter to be set for UP cores.
-   SEGCTL behavior with Config5.K=0 Only use Config.K23 for FMT.
-   Fixes related to interAptivUP I-Cache Index_Store_Data.
-   Do Endian swap in writeCDMM function only.

Debug interface register writes
-------------------------------------------------------------------------------
A bug that allowed a register defined as read-only to be overwritten using the
debug interface has been fixed. The following APIs are no longer able to change
the value in a register that does not have write access defined:
   opProcessorRegWrite
   opProcessorRegWriteByName
   vmirtRegWrite
   icmWriteReg
   icmWriteRegInfoValue

V850/RH850 Processor Model
-------------------------------------------------------------------------------
- Corrected error that allowed the read only R0 (zero) register to be written
  in some cases.
- Corrected re-start of execution on an exception after a halt instructions was
  executed.

ARM Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed that prevented AArch64 TLB invalidation-by-address
  instructions targeting the EL0/EL1 top VA subrange from working correctly.
- Output signal SMPEN has been added, which reflects the value of the SMPEN
  field in the CPUECTLR_EL1 register in processors that support it (e.g.
  Cortex-A53MPx4).
- Input signal CFGSDISABLE has been added, allowing secure configuration
  lockdown (GICv2 with security extensions only).
- Attempting to enable the Cryptographic Extensions by override of ID_ISAR5 or
  ID_AA64ISAR0_EL1 is ignored, with a warning.
- The dumpTLB model command now has a -all option, which causes all model TLB
  contents to be shown. Without this argument, only the current TLB content is
  shown.
- An new validateTLB model command has been added. This command traverses the
  model TLB and reports whether entries in the TLB match the current page table
  in memory. This tool can be used to find bugs where the page table has been
  updated without appropriate flushing of TLB entries. Note that the ARM model
  implements a very much larger TLB than hardware, so can reveal latent page
  table management bugs that never manifest themselves in hardware.

Simulator Core
-------------------------------------------------------------------------------
- A code generator optimization bug has been fixed which caused incorrect
  execution when a non-carry flag from one instruction was used as a carry input
  of a subsequent instruction.
- A bug has been fixed that could cause a memory leak when nested PSE callbacks
  were encountered.
- A bug has been fixed that could occasionally cause a segmentation fault for
  load and store instructions using 32-bit simulated addresses on a 64-bit host.
- The default simulation algorithm used by opRootModuleSimulate or
  icmSimulatePlatform has been modified to improve behavior in cases of fine
  grained interaction between processors and PSE peripherals. The original
  algorithm was as follows:
    while(!done) {
        1. get time of first scheduled event or quantum end, whichever is first
        2. advance PSE time to that time
        3. run PSE threads scheduled at that time
        4. run processors for instructions implied by that time
    }
  When a PSE peripheral initiates a processor interrupt, this algorithm causes
  the processor to see the interrupt when it has executed fewer instructions
  than are implied by the time as seen by the PSE. It also makes the instruction
  count at which the interrupt is seen dependent upon quantum size. The improved
  algorithm is this:
    while(!done) {
        1. get time of first scheduled event or quantum end, whichever is first
        2. advance PSE time to that time
        3. run processors for instructions implied by that time
        4. run PSE threads scheduled at that time
    }
  This algorithm ensures that PSE-initiated interrupts are always seen at an
  instruction count consistent with the PSE time.
  - To revert to the original algorithm when using the OP interface, set
    parameter "legacyscheduling" on the root module to True.
  - To revert to the original algorithm when using the ICM interface, specify
    member ICM_LEGACY_SCHEDULING when using the simAttrs argument of
    icmInitPlatform.
    
PSE Model
-------------------------------------------------------------------------------
- The PSE implementation has been enhanced so that floating point operations
  are now natively supported.
- Additional macros have been added to the include file peripheral/impTypes.h to
  provide data endian swap functions to be used when converting data exchange 
  between a big endian processor interface and the little endian PSE internal 
  data ordering.

BHM API
-------------------------------------------------------------------------------
- New function bhmGetLocalTime has been added. This function returns a
  fine-grained simulation time in microseconds from the viewpoint of an
  application processor activating a peripheral callback containing the
  bhmGetLocalTime call. The time is calculated from the configured speed of
  the activating processor (its nominal MIPS rate) and the processor cycle
  count. The returned value is more precise than the quantum end time returned
  by bhmGetCurrentTime, but not guaranteed to increase monotonically in
  simulations where there are multiple application processors (each will have
  its own view of local time).
  
- The following functions have been deprecated and replaced with new functions. 
    Deprecated           New function
    ----------------------------------------
    bhmBoolAttribute     Bool bhmBoolParamValue  (name, valuePtr)
    bhmDoubleAttribute   Bool bhmDoubleParamValue(name, valuePtr)
    bhmInt32Attribute    Bool bhmInt32ParamValue (name, valuePtr)
    bhmInt64Attribute    Bool bhmInt64ParamValue (name, valuePtr)
    bhmStringAttribute   Bool bhmStringParamValue(name, valuePtr)
    bhmUns32Attribute    Bool bhmUns32ParamValue (name, valuePtr)
    bhmUns64Attribute    Bool bhmUns64ParamValue (name, valuePtr)
    
    The new function is subtly different but has the same behaviour as
    similar functions on the VMI and OP interfaces; 
    The new function ALWAYS updates the value pointed to.
    It returns true if the parameter is set by the platform or by
    -override on the command line.
    It returns false is not set, in which case the value comes from
    the default value in the model's modelAttrs table.
    
    The old function would update the value pointed to only if the
    parameter was set.

ISS
-------------------------------------------------------------------------------
- The ISS now uses the latest processor version unless -processorversion is
  specified on the command line. Previously the default version was "1.0".
  
OP API 
-------------------------------------------------------------------------------
- opProcessorDisassemble takes an extra parameter to control the type of 
  disassembly
  
- new function opProcessorInstructionBytes gives the length of an instruction.

OP C++ API (note that op.hpp is still experimental and subject to change)
-------------------------------------------------------------------------------
- op.hpp now defines a larger subset of OP methods

- op.hpp defines no global functions, so can be included in more than one
  compilation unit.
  
- op.hpp now includes no namespaces.

- the OP C++ interface now requires a runtime library. 
  Add -lRuntimeLoader++ to your link line when using the C++ interface.
  
Microblaze Processor Model
-------------------------------------------------------------------------------
- Added Support for the v9.5 ISA, including the following instructions
  LBUR, LHUR, SBR, SHR, SWAPB, SWAPH
  in addition, parameter C_USE_REORDER_INSTR and VECTORED Exceptions
  
Control File and Command Line
-------------------------------------------------------------------------------
- A bug that failed to report mistakes in --override paths to peripheral model
  parameters has been fixed.
- A bug that failed to report a missing file when using --symbolfile has been
  fixed.
- --symbolfile is now processed before -program (and its variants)
  This ensures that an attached debugger uses the application file with symbols
  in preference to one without, where there is a choice.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmirtGetExecutedICount has been added. This returns the exact
  number of instructions executed by a processor (excluding halted and skipped
  instructions).
- New functions vmirtRegisterBranchNotifier and vmirtUnregisterBranchNotifier
  have been added. These functions allow a branch notifier callback to be
  installed or uninstalled for a processor. The branch notifier is used to
  monitor branches that are taken or not taken as simulation proceeds.

VMI FUNCTION INTERFACE (see VMI Reference documentation)
-------------------------------------------------------------------------------
- A new callback postSimulateCB has been added to the vmiIASAttr structure. This
  is called at the end of simulation but before platform destruction begins. It
  should be used in a processor module to display information that relies on
  (for example) strings that are allocated by the simulator.
- A new field srVersion has been added to the vmiIASAttr structure, which is a
  model-specific version number used in save and restore. When a processor
  is restored, the srVersion number associated with the file when it was saved
  is passed as the last argument of the vmiRestoreStateFn callback function.
  This enables the restore callback to adapt to changing save/restore file
  formats if required.

VMI OS SUPPORT FUNCTION INTERFACE (see VMI OS Support Reference documentation)
-------------------------------------------------------------------------------
- A parameter 'emitTrace' has been added to the vmiosInterceptFn function type,
  indicating whether tracing is enabled for the processor. This can be used
  in a intercept library to enable extra verbose output, for example.
- A new callback postSimulateCB has been added to the vmiosAttr structure. This
  is called at the end of simulation but before platform destruction begins. It
  should be used in an intercept library to display information that relies on 
  (for example) strings that are allocated by the simulator.
- A new field srVersion has been added to the vmiosAttr structure, which is a
  model-specific version number used in save and restore. When a plugin
  is restored, the srVersion number associated with the file when it was saved
  is passed as the last argument of the vmiosRestoreStateFn callback function.
  This enables the restore callback to adapt to changing save/restore file
  formats if required.

SystemC TLM2.0 Platforms
-------------------------------------------------------------------------------
- The SystemC TLM2.0 platform definitions using the ICM API have been moved 
  from the Imperas VLNV source library to their respective demo directories.
- New demos are being added that use iGen to generate the TLM platform
  utilizing the OP API from the same iGen source used to generate C and C++
  hardware definitions. These are being created in
    Demo/Platforms
  The previous demos have been moved
    Demo/Platforms             to Demo/PlatformsICM
- Re-Structure of ICM TLM2.0 demo directories
    Demo/Platforms/SystemC_TLM to Demo/PlatformsICM_TLM2.0 
    Demo/Tools/SystemC_TLM     to Demo/ToolsICM_TLM2.0

Update to Demos contained in Demo/Platforms and Demo/PlatformsICM
-------------------------------------------------------------------------------
The demos provided in the directory Demo/PlatformsICM are based on the OVP ICM
API and are in the process of being superseded by new demos in the directory 
Demo/Platforms which are based upon the OVP OP API.
The new demos are able to utilize hierarchical modules and harnesses supported 
by the OVP OP API and also contain a default SystemC TLM2.0 harness within the
same demo structure.

###############################################################################
##                                                                           ##
## Date 2016-June-27                                                         ##
##                                                                           ##
## Release 20160627.0                                                        ##
##                                                                           ##
###############################################################################

OP C++
-------------------------------------------------------------------------------
- This release includes a C++ version of the OP interface.
  The file is at $IMPERAS_HOME/ImpPublic/include/host/op/op.hpp
  This interface is un-documented, incomplete and subject to change. It's
  purpose in this release is to provide support for the OP TLM interface
  (see below).
  
TLM Platform
-------------------------------------------------------------------------------
- This release supports the use of the OP API with a TLM platform:

- iGen now writes TLM platform and interface files (refer to CHANGELOG.iGen.txt)
- This release provides a new TLM interface, written using the OP API instead
  of the ICM API.
  
- The OVP OP version of TLM is significantly different from the ICM version,
  having been revised for improved readability, ease of use and features.
  It is now possible to write an OP harness for use with a TLM platform.

- The Imperas library now includes OP interface files for most models used in
  TLM platforms written to the new style.
  These are at 
  $IMPERAS_HOME/ImperasLib/source/<vendor>/<library>/<name>/<version>/tlm/<file> 
  
- The ICM version of TLM will continue to be supported for the immediate future. 
- ICM TLM interface files are still at
  $IMPERAS_HOME/ImperasLib/source/<vendor>/<library>/<name>/<version>/tlm2.0/<file>

Renesas RH850 Processor Model
-------------------------------------------------------------------------------
- The RH850G3M is now included as part of the OVP library. This model supports
  all of the new Floating Point instructions and Vector based exception
  handling
  
V850E2 / RH850 toolchain
-------------------------------------------------------------------------------
- The release now contains a toolchain which includes support for RH850.
  The previous V850 generation processors can continue to use the v850
  toolchain package.
  For V850E2 / RH850, these require the v850e2 toolchain package

Default width of processor bus ports
-------------------------------------------------------------------------------
- The default width of processor bus ports can now be different from the
  legal minimum and maximum. ARM models in particular use this feature.
  The new values are reported in processor-specific documentation and can be
  read using opBusPortAddrBitsDefault() or icmGetBusPortAddrBits().

ARM Processor Model MultiCluster Variant
-------------------------------------------------------------------------------
- New features have been added to the simulator core and the processor modeling
  technology to allow the definition of a MultiCluster variant.
- The MultiCluster variant allows the definition of any numbers and types of
  cores that can be instanced as a single entity including the interconnections
  for example GIC

Common Library
-------------------------------------------------------------------------------
- A new common library directory has been created (ImpPublic/include/host/ocl).
  This library will contain routines that may be used by any other library
  (VMI, ICM or OP). Currently, functions in this library implement the new
  instruction attribute API, which enables client programs to introspect the
  behavior of processor instructions.

Control file and Command line parser
-------------------------------------------------------------------------------
-  the -extlib command can now accept a model file or directory without the
   extension. All these are equivalent
   -extlib <processor>=/home/user/bin/directory
   -extlib <processor>=/home/user/bin/directory/model
   -extlib <processor>=/home/user/bin/directory/model.so  (linux)
   -extlib <processor>=/home/user/bin/directory/model.dll (windows)
   
TLM Processor models
-------------------------------------------------------------------------------
- TLM processor models no longer have semihosting enabled by default.
  Semihosting can be enabled as follows
    in a TCL    script       ... ihwaddprocessor ... -defaultsemihost
    
    in a TLM2.0 module       ... cpu ("cpu", 0, ICM_ATTR_DEFAULT_SEMIHOST)
    
    in an OP TLM module      ... opParamBoolSet(list, OP_FP_DEFAULTSEMIHOST, True)
                                 opProcessorNew(mi, path, name, connections, list);

V850 Processor Model
-------------------------------------------------------------------------------
- Add User Banked System Registers
  User 0 Bank Registers and User-Compatible Bank Registers have been added to
  the model. Access to the User-Compatible bank is only enabled by setting the 
  parameter 'ucbank' during model configuration.
  Add support for Group 0x00, Bank 0x10 & 0x11

ARM Processor Model
-------------------------------------------------------------------------------
- New 8-bit configuration signals CLUSTERIDAFF1 and CLUSTERIDAFF2 have been
  added, allowing the configured value of MPIDR.Aff1 and MPIDR.Aff2 to be
  overridden. These signals are sampled at reset.
- Trapped floating point exceptions are now implemented, if configured by
  register field MVFR0.FPTrap (or MVFR0_EL1.FPTrap).
- Support for optional ARMv8 CRC instructions has been added.
- Input signals sei and vsei have been added, allowing external signalling of
  SError amd virtual SError exceptions.
- Artifact writes to address translation registers such as ATS1CPR have been
  changed so that the results are visible in a new 64-bit integration support
  register, artifactPAR, instead of architectural registers such as PAR_EL1.
  This means that address translation operations can be performed from test
  harness code without perturbing true processor state.
- New view event 'ptwEvent' has been added. This event is triggered on
  completion of any page table walk.
- New integration support registers have been added allowing introspection of
  the result of a page table walk. These are:
  - PTWAddressL0...PTWAddressL3: 64-bit registers holding the address used
    to look up level 0 to level 3 page table entries, respectively.
  - PTWBase: 64-bit register holding the table base address used for a page
    table walk.
  - PTWInput: 64-bit register holding the input address for a page table walk.
  - PTWOutput: 64-bit register holding the output address for a page table walk.
  - Whether an entry is valid is indicated by the contents of new register
    PTWAddressValid, as follows:
    PTWAddressValid xxxxxx1b: PTWAddressL0 is valid.
    PTWAddressValid xxxxx1xb: PTWAddressL1 is valid.
    PTWAddressValid xxxx1xxb: PTWAddressL2 is valid.
    PTWAddressValid xxx1xxxb: PTWAddressL3 is valid.
    PTWAddressValid xx1xxxxb: PTWBase is valid.
    PTWAddressValid x1xxxxxb: PTWInput is valid.
    PTWAddressValid 1xxxxxxb: PTWOutput is valid.
  - PTWValueL0...PTWValueL3: 64-bit registers holding the value read at the
    corresponding level of page table walk.
  - Register PTWValueValid indicates the valid set of value registers, in the
    same way as PTWAddressValid for address registers PTWAddressL0...
    PTWAddressL3. Note that if a page table walk fails because of an exception
    it is possible for an address to be valid and the corresponding value
    invalid.
  - For models implementing Virtualization Extensions, there are six distinct
    banks of registers. The currently-active bank is selected by register
    PTWBankSelect, as follows:
      PTWBankSelect=0: select registers showing the result of stage 1 walks.
      PTWBankSelect=1: select registers showing the result of stage 2 walks.
      PTWBankSelect=2: select registers showing the result of stage 2 walks
                       caused by read of stage 1 level 0 table entries.
      PTWBankSelect=3: select registers showing the result of stage 2 walks
                       caused by read of stage 1 level 1 table entries.
      PTWBankSelect=4: select registers showing the result of stage 2 walks
                       caused by read of stage 1 level 2 table entries.
      PTWBankSelect=5: select registers showing the result of stage 2 walks
                       caused by read of stage 1 level 3 table entries.
  - For models implementing Virtualization Extensions, register PTWBankValid
    indicates which of the six banks contain valid register entries as follows:
      PTWBankValid=xxxxx1b: bank 0 contains valid registers.
      PTWBankValid=xxxx1xb: bank 1 contains valid registers.
      PTWBankValid=xxx1xxb: bank 2 contains valid registers.
      PTWBankValid=xx1xxxb: bank 3 contains valid registers.
      PTWBankValid=x1xxxxb: bank 4 contains valid registers.
      PTWBankValid=1xxxxxb: bank 5 contains valid registers.
- New write-only integration support registers have been added allowing
  initiation of page table walks which update the above introspection registers
  without creating TLB entries or otherwise modifying processor state. To use
  the registers, write the address to be translated. The registers are:
  - PTWI_EL1S, PTWD_EL1S: initiate EL1 stage 1 secure page table walk, for
    instruction and data access, respectively (note that if the TLB is common
    then the registers will always produce an identical result).
  - PTWI_EL1NS, PTWD_EL1NS: initiate EL1 stage 1 non-secure page table walk, for
    instruction and data access, respectively.
  - PTWI_EL2, PTWD_EL2: initiate EL2 page table walk, for instruction and data
    access, respectively.
  - PTWI_EL3, PTWD_EL3: initiate EL3 page table walk, for instruction and data
    access, respectively.
  - PTWI_S2, PTWD_S2: initiate stage 2 page table walk, for instruction and data
    access, respectively.
  - PTWI_current, PTWD_current: initiate current mode page table walk, for
    instruction and data access, respectively.
- For AArch64 variants, ID_AA64MMFR0_EL1.PARange is now automatically derived
  from the width of any connected physical bus; previously, it had to be
  explicitly overridden to the correct value.
- A new integration support register HaltReason has been added. This enables
  the reason why the processor is halted to be queried. The 8-bit register has
  the following possible values, combined using bitwise-or (so more than one
  reason can be simultaneously active):
    0x00: processor is active
    0x01: processor is waiting for event after executing a WFE instruction.
    0x02: processor is waiting for interrupt after executing a WFI instruction.
    0x04: processor is halted because reset signal is high.
- A new input net EVENTI has been added. When pulsed high, this indicates an
  event has been triggered externally; cores halted because of a WFE instruction
  should restart.
- A new output net EVENTO has been added. When a core executes an SEV
  instruction, this net is pulsed high.

armAngel Semihost Library
-------------------------------------------------------------------------------
- Interpretation of the first argument to the Report Exception intercept (code
  0x18) has been changed, as follows:
  - If a bitwise-and of the argument with 0xffffff00 yields 0x00020000, then the
    argument is assumed to be a reason code.
  - Otherwise, if the bitwise-and test fails, the argument is interpreted as a
    pointer to a data block and the reason is read from that data block.
  This change means that the armAngel semihost library can support a legacy
  compiler semihost ABI (where the reason is directly passed) as well as the
  current semihost ABI (where a data block is used).

MIPS Processor Model (mips.ovpworld.org)
-------------------------------------------------------------------------------
- MIPS16e2 is an update to the MIPS16e specification. Most of the new instructions
  are Architecturally defined and are enabled by the new Config5 bit CA2.
  There are four core specific instruction. 
    The first pair are the MIPS16e2 instructions COPYW and UCOPYW.
    The second pair are the MIPS32 macro instructions SAVE and RESTORE.
  These features are only enabled for interAptiv cores when PRId.Revision is at
  least 0x2c.
  There is one new parameter 'mips32Macro' to enable the MIPS32 SAVE and RESTORE
  macro instructions. This is ignored if MIPS16e2 is not present.
- Modified cache parameters for interAptiv and proAptiv cores, to match hardware.
- New MPU block (enabled by setting parameters mpuType=2 and mpuRegions=N)
  New parameters to configure the MPU block when instantiating the MIPS core:
    mpuType         Type of MPU implementation
    mpuEnable       Enable MPU segment control at reset
    mpuSegmentX     Attributes for segment X (0-15) in MPU SegmentControl
                    register


MIPS Processor Model (imgtec.ovpworld.org)
-------------------------------------------------------------------------------
 - The model maintained by Imagination Technologies (www.imgtec.com) includes
   updates and new variants supporting:
 - MIPS 32-bit cores
   - Aptiv cores M5100, M5150
   - Warrior cores M6200, M6250, P5600
   - Architectural model MIPS32R6
 - MIPS 64-bit cores
   - Warrior cores P6600, I6400
   - Architectural model MIPS64R6

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- A new function member, smpNameCB, of type vmiSMPNameFn has been added to the
  vmiIASAttr structure. If non-NULL, this function is called to create a name
  for an indexed child of an SMP cluster. The previous method of setting
  member names (by calling vmirtSetProcessorName in the processor constructor)
  is deprecated.
- A new half-precision floating point type has been added (vmi_FT_16_IEEE_754).
  This type is used in conversions to and from vmi_FT_32_IEEE_754 and
  vmi_FT_64_IEEE_754 types.
- New fields QNaN16, QNaN16ResultCB and fp16ResultCB have been added to the
  floating point operation configuration structure (vmiFPConfig). These allow
  the behavior of conversions to and from type vmi_FT_16_IEEE_754 to be
  statically configured.
- New fields AHP, FZ16 and DAZ16 have been added to the floating point operation
  control word (vmi_FT_16_IEEE_754). These allow the behavior of conversions to
  and from type vmi_FT_16_IEEE_754 to be dynamically configured.
- New functions vmimtFStart and vmimtFEnd have been added, allowing definition
  of compound floating point operations.
- All floating point functions (e.g. vmimtFConvertRR) have been enhanced to
  allow VMI_NOREG to be specified for source or destination registers.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions vmirtSetDerateFactor and vmirtGetDerateFactor have been added.
  These functions allow a processor deration factor in the range 0.0 to 100.0
  to be specified. The deration factor specifies by how much the processor
  should run slower than the nominal MIPS rate. For example, a deration factor
  of 0.0 (the default) indicates the processor should run at full speed; a
  factor of 50.0 specifies the processor should run at half speed; a factor of
  100.0 indicates that the processor should be stalled.
- New functions vmirtProcessorVariant and vmirtSetProcessorVariant have been
  added. These enable the current processor variant to be accessed and updated.

Simulator Core
-------------------------------------------------------------------------------
- When executing from uninitialized memory when there is a debugger attached,
  default behavior is now to fetch the uninitialized memory pattern. Previously,
  this case would cause simulation to terminate.
- A bug has been fixed which could cause memory corruption when using
  icmMapNativeMemory or opMemoryNativeDynamic.
- A bug has been fixed in which a net callback function activated by a processor
  model could cause internal errors. The issue occurred in multithreaded
  environments such as SystemC where the net callback contained a wait call
  causing context switch to another processor.
- Environment variable IMPERAS_MEM_PATTERN_NO_ACCESS has been added, which
  allows the value returned for an attempted read of an illegal address to be
  specified (for example, a read of an unmapped address that does not cause a
  processor exception). If not set, the default is 0xbadc0de4.
- Environment variable IMPERAS_MEM_PATTERN_UNINITIALIZED has been added, which
  allows the value returned for a read of an uninitialized address to be
  specified. If not set, the default is 0x00000000.
- A bug has been fixed which could occasionally cause a segmentation fault for an
  embedded call invalidating the current code block.
- A bug has been fixed which could cause an incorrect processor to be run in a
  multiprocessor simulation by icmSimulate or opProcessorSimulate after a call
  to icmYield or opProcessorYield.

Example and Demo scripts checkinstall.exe usage
-------------------------------------------------------------------------------
All Example and Demo scripts now expect to be able to find the checkinstall.exe
program on the PATH. If the environment has not been correctly configured, this
will now cause a script failure.

EPK - Xilinx_Zynq
-------------------------------------------------------------------------------
- The Xilinx Zynq 7000 device model and platforms zc702 and zc706 has been 
  created in conjunction with the European SafePower project.
- This includes the arm Cortex-A9MPx2 OVP processor model and interchangeable
  PL modules to provide the programmable behaviour of the FPGA Programmable Logic
  Example PL modules are provided with application software showing
  - single and multiple microblaze processors communicating with the ARM 
    processor
  - XtratuM hypervisor with two example applications

Demo - Linux_ARMv8-A-FMv1_bigLITTLE 
-------------------------------------------------------------------------------
- A new demo is provided that shows the arm model configured as big.LITTLE 
  using the configurable 'MultiCluster' variant
- This demo boots a Linux kernel on the arm MultiCluster variant configured as
  big.LITTLE with Cortex-A57MPx2 and Cortex-A53MPx4

OP API
-------------------------------------------------------------------------------
- The application loader functions now write zeros to the zero parts of the BSS
  section by default (it was previously an option).
  To disable this feature, use OP_LDR_NO_ZERO_BSS.
  Please refer to opProcessorApplicationLoad and optLoaderControls.
- A preliminary C++ version of the OP API has been released; see 
  IMPERAS_HOME/ImpPublic/include/host/op/op.hpp.
  Note that this interface is subject to change.
- Added const char *opSessionProductVersion(void)
- Added root module parameters logfile and logfileflush to control writing
  of the simulator log file from the API
- Time-based functions have been added allowing more flexible integration with
  custom schedulers (such as SystemC):
  - opProcessorTime returns the implied local time of a processor, based on
    its executed clocks and configured MIPS rate.
  - opProcessorClocksUntilTime returns the number of clocks for which to
    simulate a processor in order to get to the given simulation time, assuming
    the processor operates at its configured MIPS rate, with time specified as
    an optTime.
  - opProcessorClocksUntilTimeDouble returns the number of clocks for which to
    simulate a processor in order to get to the given simulation time, assuming
    the processor operates at its configured MIPS rate, with time specified as
    a double.
  - opEventTimeNext returns the time of the next scheduled event.
  - opProcessorDelayAdd indicates that the processor should do nothing for a
    number of nominal clocks equivalent to the given time.
  - opProcessorDelay returns the cumulative delay imposed by calls to
    opProcessorDelayAdd and as an effect of opProcessorDerate.
  - opProcessorDerate applies a deration factor, indicating a percentage by
    which a processor should execute more slowly that its nominal MIPS rate.
- The instructions parameter to opProcessorSimulate has been renamed clocks to
  better reflect its use when the new time-based functions are in force.
- The value returned by opProcessorICount for non-leaf processors has been
  corrected: now, it correctly returns the total number of executed instructions
  on each member core; previously, it also included skipped and halted cycles on
  each core.
  
ICM API
-------------------------------------------------------------------------------
- New functions have been added to fetch the min, max and default values
  of model parameters.
    Bool icmParamBoolDefaultValue (icmParamInfoP formal)
    const char * icmParamStringDefaultValue (icmParamInfoP formal)
    Bool icmParamDoubleLimits ( icmParamInfoP formal, double* min, double* max, double* dflt)
    Bool icmParamInt32Limits ( icmParamInfoP formal, Int32* min, Int32* max, Int32* dflt)
    Bool icmParamInt64Limits ( icmParamInfoP formal, Int64* min, Int64* max, Int64* dflt)
    Bool icmParamUns32Limits ( icmParamInfoP formal, Uns32* min, Uns32* max, Uns32* dflt)
    Bool icmParamUns64Limits ( icmParamInfoP formal, Uns64* min, Uns64* max, Uns64* dflt)
- Time-based functions have been added allowing more flexible integration with
  custom schedulers (such as SystemC):
  - icmGetProcessorTime returns the implied local time of a processor, based on
    its executed clocks and configured MIPS rate.
  - icmGetProcessorClocksUntilTime returns the number of clocks for which to
    simulate a processor in order to get to the given simulation time, assuming
    the processor operates at its configured MIPS rate, with time specified
    as an icmTime.
  - icmGetProcessorClocksUntilTimeDouble returns the number of clocks for which to
    simulate a processor in order to get to the given simulation time, assuming
    the processor operates at its configured MIPS rate, with time specified
    as a double.
  - icmGetNextEventTime returns the time of the next scheduled event.
  - icmAddProcessorDelay indicates that the processor should do nothing for a
    number of nominal clocks equivalent to the given time.
  - icmGetProcessorDelay returns the cumulative delay imposed by calls to
    icmAddProcessorDelay and as an effect of icmDerateProcessor.
  - icmDerateProcessor applies a deration factor, indicating a percentage by
    which a processor should execute more slowly that its nominal MIPS rate.
- The instructions parameter to icmSimulate has been renamed clocks to better
  reflect its use when the new time-based functions are in force.
- The value returned by icmGetProcessorICount for non-leaf processors has been
  corrected: now, it correctly returns the total number of executed instructions
  on each member core; previously, it also included skipped and halted cycles on
  each core.

###############################################################################
##                                                                           ##
## Date 2016-March-23                                                        ##
##                                                                           ##
## Release 20160323.0                                                        ##
##                                                                           ##
###############################################################################

****                    I M P O R T A N T    N O T E                       ****
The iGen model generation wizard is now provided within all product packages
and is available to both Imperas and OVP users.

A new OVP API, the Open Platforms (OP) API, has now been released. OP allows
the creation of hierarchical platforms and enables detailed control of 
simulation runs containing several platforms and processors.
****                                                                       ****

iGen
-------------------------------------------------------------------------------
- The iGen model generation wizard allows hardware designs and peripheral model 
  templates to be easily created.
- Documentation on how to use iGen can be found as:
    doc/ovp/iGen_Model_Generator_Introduction.pdf
    doc/ovp/iGen_Platform_and_Module_Creation_User_Guide.pdf
    doc/ovp/iGen_Peripheral_Generator_User_Guide.pdf
- Examples that show the use of iGen are found in 
     Examples/PlatformConstruction, and
     Examples/Models/Peripherals

OP API - new API
-------------------------------------------------------------------------------
- OP is provided as a standard OVP API with the inclusion of a C header in the
  ImpPublic/include/host/op directory.
- OP is used for 
  - the creation of simulation test harnesses
  - the creation of hierarchical platforms and modules
  - controlling the simulators dynamically in user created test harnesses
  - the integration of the Imperas simulators into third party simulations   
- OP supersedes the ICM API and over time all examples and documentation of
  the ICM API will be replaced with OP examples and documentation.
- OP has all the functionality (and more) of the ICM API it replaces.
  
- The OP API Function Reference documentation is available either directly 
  using the index at doc/api/op/html/index.html or via the main 
  documentation index page at doc/index.html. This function reference is
  generated using Doxygen from the API sources. There is no .pdf reference 
  guide.
  
- Documentation is available to describe the use of the OP API to create 
  - Platforms / Modules:
       doc/ovp/Writing_Platforms_and_Modules_in_C_User_Guide.pdf
  - Simulation Test Harnesses and control simulations:
       doc/ovp/Simulation_Control_of_Platforms_and_Modules_User_Guide.pdf
       doc/ovp/Advanced_Simulation_Control_of_Platforms_and_Modules_User_Guide.pdf
    
- There are examples of the use of OP for simulation control in user written
  test harnesses found in:
      Examples/SimulationControl

- In this release all SystemC examples and models still make use of ICM. In 
  future releases OP will be used by the SystemC interfaces.
 
ICM API being replaced
-------------------------------------------------------------------------------
- The ICM API is being replaced with the OP API.
- The documentation and examples of ICM are still in release packages, and in
  some cases they have been moved or renamed.
- In this release all SystemC examples and models still make use of ICM.

Demo/Platforms/Linux_ARMv8-A-FMv1
-------------------------------------------------------------------------------
Demo Linux_ARMv8-A-FMv1_arm_Cortex-A57MP has been renamed and updated:
 - The name of the demo directory has been changed to Linux_ARMv8-A-FMv1.
 - The precompiled Linux kernel provided as part of the demo has been updated 
   from Linux kernel version 3.7 to 4.3.
 - It now supports GICv3 and additional device tree files that support GICv3
   have been added.
 - Scripts to run using the Cortex-A72 processor model (which uses GICv3) have
   been added in addition to the scripts that run using the Cortex-A57 and 
   Cortex-A53 processor model.

SmartLoaderArm64Linux peripheral
-------------------------------------------------------------------------------
The SmartLoaderArm64Linux pseudo-peripheral now supports pre-configuring the 
GICv3 in the generated boot code as required for a Linux boot.

Renesas RL78 Processor Model
-------------------------------------------------------------------------------
- The Renesas RL78 processor model, supporting variants RL78-S1, RL78-S2 and 
  RL78-S3 has been added to the OVP Fast Processor Model library.
- A semihost library for the Newlib C library and a GNU toolchain are 
  included. 

ARM Processor Model
-------------------------------------------------------------------------------
- Default value of GICD_TYPER register has been corrected for Cortex-A72
  variants.
- Minor changes to uncooked disassembly syntax: "WB:" keyword value is now 
  "pre" or "post", the extended register constant is now identified with the 
  "EXT#:" keyword.

Microblaze Processor Model
-------------------------------------------------------------------------------
- Added Support for the Load/Store exclusive operations in an MP environment

ARC Processor Model
-------------------------------------------------------------------------------
- Save/restore behavior when in a delay slot instruction has been corrected.

Simulator Core
-------------------------------------------------------------------------------
- Trace enable and disable for threads in multithreaded processors has been
  improved. Previously, enabling or disabling trace for a specific thread also
  enabled or disabled trace for all other threads of the same core. Now, trace
  may be enabled or disabled for each thread independently.
- Fixed bug (13977) data was lost when a memory was created and written to 
  before being connected to a bus.
- A code generator bug has been fixed which could cause exit with an assertion:
    ... Assertion failure : native code buffer not filled
- A code generator bug has been fixed which caused a shift mask set using
  vmimtSetShiftMask to be used with incorrect scope if the following binary
  operation was specified using vmimtBinopRRR with third register argument
  (the shift/rotate amount) of VMI_NOREG.
- A code generator bug has been fixed which occasionally caused a segmentation 
  fault when simulating a load or store instruction on a 64-bit host.
- A debugger integration bug has been fixed in which a call to icmInterrupt or
  opInterrupt while in an attached debugger context would cause the simulation
  to finish unexpectedly.
- A bug has been fixed which could cause exit with an assertion:
    ... Assertion failure : bad region bounds
  The bug occurred when abutting virtual memory pages were mapped to the highest
  and lowest physical pages.
- A bug has been fixed in which execution could occur at an illegal address on
  a MIPS processor, when:
  - an instruction causing the TLB entry for the current execution address
    to be invalidated is executed; and:
  - the invalidation instruction is in the delay slot of an indirect jump
    (e.g. a JR instruction); and
  - the target of the indirect jump lies on the same page as the invalidation
    instruction; and
  - the target address has previously been executed legally.

Command line Options
-------------------------------------------------------------------------------
- A new command line option has been added which causes a basic block vector
  (BBV) file to be written, suitable for use by the SimPoint program:
    --bbvfile <filename>
  One sample line is written at the end of each quantum.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- Functions of type vmiMorphFn and vmiStartEndBlockFn are now passed an extra
  'blockState' argument. This argument is a pointer to a structure of size
  defined by the new 'blockStateSize' field in the vmiIASAttr structure for a
  processor, and is cleared to zero by the simulator at the start of translation
  of a new code block. The structure should be used to hold all temporary data
  required while block generation is in progress (for example, information about
  derived condition flag values or floating point unit state). Previously, such
  data would be held on the processor; using a state structure instead allows
  recursive invocation of the JIT code translator.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions vmirtUpdatePCCallbackCondition and vmirtGetPCCallbackCondition
  have been added. These functions allow callback functions installed by
  vmirtAddPCCallback to be conditioned so that they are activated only when
  a processor is in a particular mode/ASID state.
- Function vmirtAddressLookup has been enhanced so that it will scan object
  files directly loaded onto processor code or data domains as well as object
  files directly loaded onto the processor when looking for a symbol address.

###############################################################################
##                                                                           ##
## Date 2015-December-03                                                     ##
##                                                                           ##
## Release 20151203.0                                                        ##
##                                                                           ##
###############################################################################

OP API Function Reference Documentation
-------------------------------------------------------------------------------
- The OP API Function Reference documentation is available either directly 
  using the index at doc/api/op/html/index.html or via the main 
  documentation index page at doc/index.html. This function reference is
  generated using Doxygen from the API sources. There is no .pdf reference guide.

ARM Processor Model
-------------------------------------------------------------------------------
- The GICv3 Generic Interrupt Controller is now implemented (without any ITS
  block).
- Cortex-A72MPx1...Cortex-A72MPx4 processor variants are implemented using the
  GICv3 Generic Interrupt Controller.
- Names of GICD identification registers have been changed to correspond to the
  ARM GICv3/GICv4 Generic Interrupt Controller Architecture Specification.
- Content of the identification registers in processors supporting the GICv2
  Generic Interrupt Controller has been corrected - previously, some aspects of
  these registers incorrectly indicated that a GICv1 block was connected.
- A bug has been fixed in TLB execute permission determination when executing
  in AArch64 state: entries with XN=1 and PXN=0 are now executable at EL1,
  where previously they were not executable. Note that such entries remain not
  executable in AArch32 state.
- A bug has been fixed that occasionally caused an interrupt from a generic
  timer to be asserted when it should have been masked.
- A bug has been fixed that caused the AArch64 'cneg' instruction to 
  disassemble with an incorrect 'csneg' opcode.

V850, Microblaze, Nios_II Processor Models
-------------------------------------------------------------------------------
- Added Support mode 'stop' register. This allows the multiprocessor debugger
  to halt individual cores whilst allowing, other cores to continue executing

BHM API
-------------------------------------------------------------------------------
- Added a boolean formal parameter to bhmSerOpenAuto (and any peripheral that
  uses the serial interface) called connectnonblocking.
  If set, the simulator does not wait for a connection; instead, the connection
  can be made at any time. Note that if the parameter finishOnDisconnect is NOT
  set, then a program can disconnect and reconnect to the peripheral as often
  as required.
  
- Added the function bhmDoubleAttribute to fetch a parameter of type double.

PPM API
-------------------------------------------------------------------------------
- New functions added:
    Bool ppmTryReadAddressSpace (addressSpace, address, bytes);
    Bool ppmTryWriteAddressSpace(addressSpace, address, bytes);
    Returns true if the operation would complete, without doing it.
    
MIPS Processor Model
-------------------------------------------------------------------------------
- Correct the interAptiv and interAptivUP variants to not perform a TLB
  translation for indexed CACHE operations. This matches the hardware behavior.
- Adds configuration parameters that can be used to configure a single ISPRAM
  region and/or a single DSPRAM region without making ICM calls.
- microAptiv configuration corrections to add
  1) UserLocal support in microAptivC, microAptivP and microAptivCF
  2) nested exception support in microAptivC and microAptivCF
- Enhance parameter interface so that certain parameters that are not applicable
  to particular variants are excluded from the parameter list.
- New MIPS32R6 and M6200 variants are now available.

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused vmimtStoreRCO to exit with an assertion for
  some bit widths.
- A bug has been fixed which caused simulator virtual memory structures to
  become corrupted (indicated by assertion "master objects leaked" at end of
  simulation).
- Behavior has been changed so that PSE threads that are deleted by
  bhmDeleteThread are immediately returned to the free thread list; previously,
  return to the free list was performed when the thread was restarted (after
  delay, or by an event being triggered).

Xilinx xps-timer peripheral model
-------------------------------------------------------------------------------
- fixed endian swapping for reads of the TCR0/1 registers

Examples
-------------------------------------------------------------------------------
- The example Examples/Platforms/resetControlPeripheral shows how a reset
  line can be asserted from a peripheral model, controlled by socket commands,
  and forcing the reset of the processor.

Command line Options
-------------------------------------------------------------------------------
- To start the Imperas GUI with MPD  use -mpdigui
- To start the Imperas GUI with GDB  use -gdbigui

Xilinx XPS Peripherals
-------------------------------------------------------------------------------
- Added an 'endian' parameter to define the endian byte ordering on the 
  processor bus. Default is big endian.

###############################################################################
##                                                                           ##
## Date 2015-August-24                                                       ##
##                                                                           ##
## Release 20150901.0                                                        ##
##                                                                           ##
###############################################################################

Platform command line parser
-------------------------------------------------------------------------------
- A new data type 'uns32' has been added.

Simple BareMetal Demonstrations
-------------------------------------------------------------------------------
- The simple Baremetal demonstration platforms provided by OVP have been 
  replaced by the use of the Imperas Instruction Set Simulator (ISS) virtual 
  platform. The Imperas ISS allows the definition of the processor type, the 
  number of processors and any shared memory region to allow simple cross 
  compiled applications to be executed quickly and efficiently on the specified
  processor  
- The basic demos provided as Imperas/Demo/OVPsim_* have been removed in place 
  of the Processor Demos Imperas/Demo/Processors
- The simple TLM2.0 demos have moved to the directory 
    Imperas/Demo/Platforms/SystemC_TLM 
  with naming changed to remove reference to OVPsim (this is the simulator name
  not the OVP API that is used)

ARC Processor Model
-------------------------------------------------------------------------------
- The model now supports save/restore.
- A bug has been fixed which allowed the bottom bit of the branch target address
  auxiliary register to be writable when a branch-and-link with delay slot to
  register address was executed. This bit should always be zero.
- A bug has been fixed which caused reads of some unimplemented BCR auxiliary
  registers to take an exception.
- Boolean parameter opt-reset-internal-ccms has been added; when True, model
  CCMs will be cleared to zero by a processor reset.
- A bug has been fixed in the DIVAW instruction, which generated incorrect
  results for large values of divisor or quotient.
- A bug has been fixed in which timer counts were not being correctly restricted
  by the corresponding timer limit value.
- Performance of timers has been improved.
- The GDB interface has been updated to match gdb version 7.9 and the model will 
  no longer work with earlier versions. arc-elf32-gdb version 7.9 is provided 
  with the simulator and is used by default.


ARC toolchain
-------------------------------------------------------------------------------
A full toolchain package is now available for ARC processors. This is a build
of the 2015.06 release from:
   https://github.com/foss-for-synopsys-dwc-arc-processors/toolchain/releases

The following example Makefiles are provided in $IMPERAS_HOME/lib/$IMPERAS_ARCH
to show how the toolchain is used to compile for specific ARC processors:
  ARC600.makefile.include
  ARC700.makefile.include
  ARCEM.makefile.include
These all include the file ARC.makefile.include. See the comments in that file 
for info on how to use these Makefiles.


The -vlnvmap command line argument
-------------------------------------------------------------------------------
- A wildcard '*' character in a map command will now match an unspecified vlnv
  field in a model instance. e.g.
  
  icmGetVlnvString(0, "vendor", 0, "name", "1.0", "model");
  
  will now match when used with the command
  
  -vlnvmap vendor/*/name/*=vendor/*/newValue/*

Use of the platform command line parser
-------------------------------------------------------------------------------
- Trying to add duplicate commands to the command line parser produces more
  helpful messages.
- The command line parser has been added to most example platforms.

Imperas VLNV Library Platform Building
-------------------------------------------------------------------------------
- The Imperas VLNV library platforms are built with a standard Makefile, 
  Makefile.platform, to a platform executable and a shared object. The shared 
  object naming has changed to be model.so or model.dll in line with other
  generated VLNV library shared object naming 

mips.ovpworld.org SmartLoaderLinux peripheral
-------------------------------------------------------------------------------
- A new parameter, "pagebits" has been added to allow specifying the alignment 
  for loading the initrd file. This defaults to 12 bits, so the initrd is aligned
  on a 4096 word boundary if it is not set. If the configuration of your kernel
  requires a larger alignment then this option may be used to change it.
- The code added when the fixuplinuxstart parameter is specified now includes
  setting of the BAR registers the same way they are set by the default 
  startup code.
- When generating opcodes the SmartLoaderLinux peripheral now uses the opcode 
  for 'jalr $0, r' for jump instructions in order to be compatible with 
  the Release 6 instruction set, which no longer supports the R5 opcode for
  'jr r' in favor of the 'jalr $0, r' opcode which gives the same functionality
  
The ICM API
-------------------------------------------------------------------------------
The simulator has been updated. It has the following changes:

  The new simulator runtimes are still libCpuManager.[so,dll] and libOVPsim.[so,dll]
  The old simulator runtimes are libCpuManagerICM.[so,dll] and libOVPsimICM.[so,dll]

  To revert to the old simulators, set the environment variable IMPERAS_LOAD_ICM=1.

- icmNewAttrList()
  The handle returned by this can be passed to only one model. If passing the
  same parameters to several models, a new list is required for each instance.

- Formal parameters
  All processors, peripherals, MMCs and intercept libraries must declare each 
  parameter before use. Previously the declaration was optional in some
  circumstances. Each parameter must be declared with the correct type.
  If using igen to generate the model, note that the new TCL command
  imodeladdformalmacro -name <macro name> 
  can be used to add declarations for record/replay and serial interface
  parameters (see CHANGELOG.iGen.txt).
  
- Actual parameters
  It is now an error to pass a parameter to a model that it is not expecting.
  Previously this was a warning.
  
- Bus, net and packetnet interfaces.
  All processors, peripherals and MMCs must declare their interfaces before
  use. Previously the declaration was optional in some circumstances. 
  
- Error messages
  Some error messages have changed. Please check the behavior of any downstream
  tools that depend on particular text output.
  
- Reports
  Outputs from -showcommands -showbuses, -showoverrides have changed format
  and sort order in some cases.

GDB for Windows Hosts
-------------------------------------------------------------------------------
The GDB for native windows machines has been upgraded to version 7.9

DWARF info no longer read in OVPsim
-------------------------------------------------------------------------------
Since DWARF info is only used by features that are only available in the
Imperas Professional Tools the DWARF info is no longer read when those tools 
are not available. The warning about incompatible DWARF version in an elf
file will no longer occur when running OVPsim. 

ARM Model Licensing
-------------------------------------------------------------------------------
Several changes have been made to the terms of the license for using the OVP
ARM CPU models. Please re-read the OVP license and ensure you are in agreement
with the terms of the license.

ELF Loader
-------------------------------------------------------------------------------
The built in ELF loader has been modified to load the ELF program headers using
the DATA bus of the processor. Previously the INSTRUCTION bus of the processor
was used. This was correct in unified memory situations, but not when the CODE
and DATA domains were non-uniform. It appears the best loading method is via
the DATA bus, this is also the same mechanism used by gdb when performing a
load.

GDB Server
-------------------------------------------------------------------------------
The simulator's  GDB server has been enhanced to handle non-uniform memory
spaces on harvard architecture processors. Previously an RSP memory access
would only attempt to access the DATA domain. If instructions were inaccessible
from the  DATA Domain, then the GDB Server would return 0xbadc0de4.
The GDB Server now attempts to read from the DATA domain, and if the access
fails due to no memory being accessible, it then attempts to read from the 
CODE domain.

The simulator's GDB server now supports the Taa return code allowing the GDB
to better support debugging of multicore SMP processors.

A bug has been fixed in the support of watch-points.

GDB
-------------------------------------------------------------------------------
The GDB executables now shipped as part of the product have all been upgraded
to GDB version 7.9 (except for arc-elf which is not yet available)
In addition the V850 no longer selects the architecture name v850, this is now
replaced to be auto

ovpworld.org VirtioBlkMMIO peripheral
-------------------------------------------------------------------------------
The VirtioBlkMMIO model in ovpworld.org/peripheral now supports record/replay. 

MipsMalta Platform (Imperas VLNV mips.ovpworld.org/platform/MipsMalta/1.0)
-------------------------------------------------------------------------------
- A new MipsMalta platform has been added to the library that is generated by the
  iGen productivity tool. This platform resides within the Imperas VLNV library 
  structure and is used in several demos from this location.
- The MipsMalta platform has been updated and now includes the standard Imperas
  Command Line Parser (CLP). The single MipsMalta platform replaces the previous
  platforms that had slightly different address maps hard coded to support
  different operating systems. 
- Switched from deprecated 16450 UART model to new 16550 model. Some register
  names, event names and other details of the model are different.

Build infrastructure 
-------------------------------------------------------------------------------
In order to compile PSE peripherals in either debug or optimized modes, this is
now controlled by the make variable PSEOPT, the default is to compile
optimized, in order to disable this set PSEOPT=0 on the make command line

Imperas control files
-------------------------------------------------------------------------------
- The extension library command (for example):
    --extlib platform/processor=modelAttrs@interceptlib.${IMPERAS_SHRSUF}
  No longer requires 'modelAttrs@' so should read (for example):
    --extlib platform/processor=interceptlib.${IMPERAS_SHRSUF}
    
  This is because all models require an attribute table which MUST be called
  'modelAttrs'.

Semihosting on Windows platforms
-------------------------------------------------------------------------------
- A bug prevented the creation of a new file using the semihosted open()
  function on Windows platforms (32 & 64 bit). This has been fixed.
  
ARM_CORTEX*.makefile.include
-------------------------------------------------------------------------------
The makefiles used to build ARM Cortex (v7) demo and example applications have
been modified to use the ARM Embedded pre-built toolchain from:
   https://launchpad.net/gcc-arm-embedded
   
This replaces the CodeSourcery Lite toolchain, which is no longer available. 
The executable files will of course be different due to the toolchain change.

BareMetalArmCortexMSingle platforms
-------------------------------------------------------------------------------
The BareMetalArmCortexMSingle and BareMetalArmCortexMSingle_TLM2.0 platforms 
have been modified to disable the resetAtTime0 parameter that causes the
simulation to start from the reset vector. Instead the entry address defined in
the application elf file is used as the start address.

This is consistent with other platforms and make these platforms compatible
with toolchains that do not provide default exception handlers with their
startup code.

Imperas Platforms
-------------------------------------------------------------------------------
- To prevent unpredictable behavior the simulator now checks the API version
  of each peripheral model against the simulator. If an out-dated model causes
  the simulator to exit, it should be recompiled using include files from the
  simulator's installation (this condition already applies to other models).

New ICM functions
-------------------------------------------------------------------------------
- Functions to query Memory mapped registers in peripheral models
  icmNextBusPortMMRegInfo get each memory mapped register in turn, from the
                          bus slave port used to access the register.

  icmMMRegName                       return the name
  icmMMRegOffset                     return the address offset in bytes from the base of the
                                     bus slave port.
  icmMMRegBits                       return the width in bits
  icmMMRegDescription                return the description
  
  icmGetPSEDoc                       return root documentation node for a PSE
  icmGetNetPortMustBeConnected       true if the model requires this port to be connected
  icmGetPacketnetPortNet             return the net connected to the port
  icmGetPacketnetPortMustBeConnected true if the model requires this port to be connected
  
Demo OVPsim_Linux_Altera_Cyclone_V_HPS_Cortex-A9MPx2
-------------------------------------------------------------------------------
Info on rebuilding the kernel has been added to the README file

TLM 
-------------------------------------------------------------------------------
- Direct Memory Interface control
  It is now possible to turn DMI off or on during a simulation
  (the default state is ON).
  From a processor:
      processor_instance.dmi(0);  // off
      processor_instance.dmi(1);  // on

  Turning DMI off flushes the current DMI state so processor read and writes
  will use TLM transactions from that time.
      
  Turning DMI on causes the processor to re-negotiate DMI on each region.

  From an Imperas TLM Memory:
      ram_instance.dmi(0);  // off
      ram_instance.dmi(1);  // on
      
  Turning DMI off flushes the current DMI state so processor read and writes
  to this memory will use TLM from that time.

  NOTE: processor interface files must be regenerated by igen.
  If this is not possible, add a new function as follows:
  
  void dmi(bool on) {
      // One call for each bus port
      INSTRUCTION.invalidateDMI();
      DATA.invalidateDMI();
  }

Peripheral Bus Interface
-------------------------------------------------------------------------------
- A peripheral model may abort the bus transaction of an application processor
  or another peripheral acting as a bus master using new functions ppmReadAbort
  and ppmWriteAbort in a register or memory read or write callback context.
  If an application processor read or write is aborted, the processor model
  memory abort handlers are called.
  If aborting of a peripheral acting as a bus master is required, the bus master
  must use functions ppmReadAddressSpace and ppmWriteAddressSpace to initiate
  bus transactions. If these functions return False, the aborting address may
  subsequently be found using new function ppmGetAbortAddress.

Peripheral Model Socket Interface
-------------------------------------------------------------------------------
- Some peripheral models utilize a serial socket interface. The attribute 
  portFile that is used to specify a file in which to write the port opened will
  now cause the next available port to be opened even is the port attribute is
  not specified.
  
Modeling a packet-based network
-------------------------------------------------------------------------------
- A new simulation  concept - the packetnet has been introduced to model packet
  based networks such as Ethernet, CAN or GSM. A packetnet is similar to a net, 
  but carries a packet (with a maximum number of bytes) instead of a single 
  integer value. A packetnet connects two or more packetnet ports
  defined by peripherals or the platform itself. A packet is transmitted by 
  making a (blocking) function call in the peripheral or platform. The
  transmission takes zero time. Receivers are notified by a callback function
  which must not block. A receiver can make modifications to a packet which
  will be seen by the sender when the call returns. 
  
  New functions in ICM:
      icmNewPacketnet
      icmConnectPSEPacketnet
      icmAddPacketnetCallback
      icmWritePacketnet
      icmPrintAllPacketnetConnections
  
  New functions in PPM:
      ppmPacketnetWrite
      ppmPacketnetPort
      packetnetPortsCB (in the PPM modelattrs structure)
      
  Please refer to:
      OVPsim and Imperas CpuManager User Guide
      OVP Peripheral Modeling Guide
  in $IMPERAS_HOME/doc/ovp for additional info.

MIPS Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed that could cause processor lockup when the reset signal
  was asserted on a multi-threaded processor in some circumstances.
- A bug has been fixed which caused enabled floating point exceptions to be
  ignored in some circumstances.
- Behavior of a reset signal has changed so that the reset is taken immediately.
  Previously, reset was deferred until after the next instruction fetch.
- The initial runnable state of a TC in a multi-threaded processor has been
  changed to take account of the value of the VPEControl.TE bit.
- Behavior of artifact fetch accesses that use the cache when cache model is
  enabled has been corrected for multicore processors. Previously, cacheability
  attributes were ignored for such accesses which could cause incorrect
  behavior.

Imagination Technologies MIPS Models
-------------------------------------------------------------------------------
- Imagination Technologies have released, through OVP, models of it's new 
  MIPS64 variant I6400. This is released in beta form and not yet fully 
  complete.
- Behavior of a reset signal has changed so that the reset is taken immediately.
  Previously, reset was deferred until after the next instruction fetch.
- The initial runnable state of a TC in a multi-threaded processor has been
  changed to take account of the value of the VPEControl.TE bit.
- Behavior of artifact fetch accesses that use the cache when cache model is
  enabled has been corrected for multicore processors. Previously, cacheability
  attributes were ignored for such accesses which could cause incorrect
  behavior.

ARM Processor Model
-------------------------------------------------------------------------------
- Names of GIC registers have been updated to correspond more closely to names
  used by ARM.
- New parameter override_GICD_TYPER allows reset value of GICD_TYPER to be
  overridden.
- Obsolete CP15NOP system register (0,c7,c0,4) has been deleted from all ARMv8
  variants.
- Exception vector selected when taking exception in AArch64 state from AArch32
  state has been modified to correspond to the description of "next lower level"
  in the ARM ARM.
- New variant Cortex-A17 has been added.
- Virtual IRQ and FIQ input signals have been added to Cortex-A7, Cortex-A15,
  Cortex-A53 and Cortex-A57 variants, allowing a GIC model to be implemented
  externally if required.

ARMM Processor Model
-------------------------------------------------------------------------------
- New variants ARMv6-M, Cortex-M0, Cortex-M0plus and Cortex-M1 have been added.
- Model parameter interface has been improved. New parameters allow specific
  features to be enabled or disabled:
  - unprivilegedExtension: Unprivileged/Privileged extension (ARMv6-M only);
  - VTORPresent          : whether VTOR register present (ARMv6-M only);
  - SysTickPresent       : whether SysTick timer present;
  - BitBandPresent       : whether bit-band region present (ARMv7-M only,
                           replaces parameter disableBitBand).
- A write to the PC before simulation starts now implicitly cancels the initial
  reset.
  
PPM INTERFACE (see BHM/PPM Function Reference documentation)
-------------------------------------------------------------------------------
- Redundant fields objectSize, constructCB and destructCB have been deleted from
  the ppmModelAttr structure.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmirtFlushTargetModeTagged enables conditional flushing of code
  blocks, depending on whether they have been tagged using vmimtTagBlock.
- New function vmirtSetPCDS enables a processor simulated program counter to
  be set to a delay slot instruction; once the instruction is executed, control
  is immediately transferred to a second address. This function is useful for
  models that require exception handlers to be able to return to delay slot
  instructions.
- New functions vmirtGetNetPortByName and vmirtGetNextNetPort enable access to
  and iteration of net ports on processors (useful in intercept libraries).
- New functions vmirtGetBusPortByName and vmirtGetNextBusPort enable access to
  and iteration of bus ports on processors (useful in intercept libraries).
- New functions vmirtGetFifoPortByName and vmirtGetNextFifoPort enable access to
  and iteration of fifo ports on processors (useful in intercept libraries).
- Status of function vmirtInstallNetCallback has been changed from deprecated
  to active because it is useful in intercept libraries. The function has been
  enhanced to allow callbacks to be installed on both output and input ports.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions vmimtFCompareRRC and vmimtFCompareSimdRRC have been added. These
  are similar to existing functions vmimtFCompareRR and vmimtFCompareSimdRR but
  generate instruction-specific result values instead of the fixed result values
  of type vmiFPRelation generated by the existing functions.
- New function vmimtTagBlock allows blocks to be tagged when generated to
  prevent them being deleted by vmirtFlushTargetModeTagged.
- New functions vmimtEnterDelaySlotC and vmimtEnterDelaySlotR allow control
  transfer to a delay-slot block at any address, followed by control transfer
  to a different simulated address.
- vmiBusPort structure has a new field 'domain' of type memDomainP. This field
  is filled with the memory domain associated with any bus which is connected
  to the port, or is left NULL if the port is unconnected. Processor models may
  allocate a memory domain object and assign it to a NULL port domain field if
  required; this technique can be used to expose memory domains that are
  defined internally to other platform components such as intercept libraries.
  
BHM API (see OVP BHM and PPM API Function Reference documentation)
-------------------------------------------------------------------------------
- The BHM function interface for serial devices has been enhanced. New functions
  bhmSerReadN and bhmSerWriteN implement *non-blocking* reads and writes of
  serial devices. New functions bhmSerReadB and bhmSerWriteB implement
  *blocking* reads and writes of serial devices. Blocking functions block only
  the current PSE thread, not the entire simulation. Functions bhmSerRead and
  bhmSerWrite have been deleted and replaced with #defines to bhmSerReadN and
  bhmSerWriteN, respectively. Note that the deleted function bhmSerWrite used to
  block the entire simulation until data could be sent, so consider using
  bhmSerWriteB as a replacement if this behavior is required.
- The BHM function interface for Ethernet devices has been enhanced in an
  analogous fashion to the serial device interface described above. New
  functions bhmEthernetReadFrameN and bhmEthernetWriteFrameN implement
  *non-blocking* reads and writes. New functions bhmEthernetReadFrameB and
  bhmEthernetWriteFrameB implement *blocking* reads and writes. Functions
  bhmEthernetReadFrame and bhmEthernetWriteFrame have been deleted and replaced
  with #defines to bhmEthernetReadFrameN and bhmEthernetWriteFrameN,
  respectively.
- Peripheral record/replay has been enhanced with the introduction of a new text
  file format. The old format is still supported but deprecated.
- Function bhmReplayEvent now takes an additional maxBytes argument, which
  specifies the maximum size of the data packet, in bytes.

Simulator Core
-------------------------------------------------------------------------------
- A code generator bug causing incorrect execution of conditional instructions
  under some circumstances has been fixed.
- A bug has been fixed which would cause the native X87 register stack to be
  corrupted when exceptions were generated by a floating point operation with
  a result adjustment callback.
- A bug has been fixed which caused an assertion for a jump with delay slot
  at the top of memory (e.g. 0xfffffffc) and the delay slot instruction at the
  wrapped low memory address (e.g. 0x00000000).
- A bug has been fixed in which the value returned by the vmiNextPCFn in a model
  would be corrupted if the returned address was more than 4Gb from the current
  instruction address.
- A bug has been fixed which could occasionally cause bad code to be generated
  in badly-written processor models that fetch instruction bytes using
  vmicxtFetch* functions from addresses *before* the instruction address.
- The 'variant' parameter is applied at only the parent processor of an SMP 
  cluster. Reporting a bad variant is done only once by the parent, previously
  it could be reported by all children.
- Symbol lookup for interception and tracing has been enhanced so that symbols
  are correctly found when ELF files are loaded onto processors with non-uniform
  memories.

###############################################################################
##                                                                           ##
## Date 2015-February-11                                                     ##
##                                                                           ##
## Release 20150205.0                                                        ##
##                                                                           ##
###############################################################################

 -mno-ms-bitfields added to SIM_CFLAGS for Windows host compilation
-------------------------------------------------------------------------------
The -mno-ms-bitfields gcc option has been added to SIM_CFLAGS for Windows 
targets in the file bin/Makefile.include. This is needed because some gcc
implementations (e.g. gcc version 4.8.1 provided as part of Windows32 MinGW)
have changed the default setting for the ms-bitfields option from off to on
causing bugs when linking objects created with this flag on with objects
created with it off.

mips.ovpworld.org MipsMaltaLinux platform
-------------------------------------------------------------------------------
- An alias has been added from the high 2GB to the low 2GB of the physical 
  address space to model an undocumented feature of the MipsMalta that is
  required for kernels configured with support for using the EVA feature of
  the latest processor families.
- An additional 1.5GB of RAM has been added at 0x2000.0000 to 0x7fff.ffff to
  model memory that is available on later versions of the Malta. 

armAngel Semihost Library
-------------------------------------------------------------------------------
The values returned by the armAngel semihost SYS_HEAPINFO call on AARCH64 have 
been modified.
- The addresses returned will now always be at the top of the 2GB area that
  includes the program (as determined by the pointer passed to the semihost 
  call). This is required because the default C startup code for AARCH64 only
  maps a 2GB region in the MMU, leaving other addresses inaccessible.
- The value returned for HEAP_BASE has been changed from 0x8000000 to either
  0x60000000 or 0xE0000000, depending on whether the program is in the low
  or high 2GB area. This was needed because the 0x80000000 value overlaps
  the text area which by default starts at 0x80000000.

ICM C++ Interface (& TLM2)
-------------------------------------------------------------------------------
- icmTerminate is now called when the first icmCpuManagerItem is destroyed.
  Previously it was called only when an icmPlatform object was destroyed. This 
  forces icmTerminate to be called before any icm objects have been destroyed,
  which can lead to a segmentation violation. This also removes the requirement 
  to call icmTerminate in a C++ platform that does not explicitly define an 
  icmPlatform object. 

TLM2 Interface
-------------------------------------------------------------------------------
- The TLM2 transaction layer has been enhanced so that the current processor
  context is passed using an icmInitiatorExtension object (derived from the
  tlm_extension class) for the active TLM2 transaction. This means that the
  active processor is always known in a callback context, and consequently
  constant values ICM_UNKNOWN_PROCESSOR and VMI_UNKNOWN_PROCESSOR are no longer
  required and have been removed from the ICM and VMI headers, respectively.
  
- Fixed a bug in the Imperas TLM decoder which caused an incorrect calculation
  of the DMI memory region.

ArmVersatileExpress-CA9 platform enhancements
-------------------------------------------------------------------------------
- The NOR0 and NOR1 Flash memories have been modified to use the fixed-size
  NorFlashP30_64MB model rather than the variable size NorFlashP30 model. This
  is required to support building a SystemC TLM version of the platform, as
  variable size ports are not supported for TLM platforms.

New fixed-size NorFlashP30_64MB peripheral model added
-------------------------------------------------------------------------------
A new peripheral modeling a 64MB Intel StrataFlash P30 NOR Flash device has  
been added to at:
    ImperasLib/source/intel.ovpworld.org/peripheral/NorFlashP30_64MB/1.0
This is a fixed-size version of the NorFlashP30 model. This is required to 
support SystemC TLM, as variable size ports are not supported for TLM 
platforms.

ArmVersatileExpress-CA15 platform changes 
-------------------------------------------------------------------------------
The ArmVersatileExpress-CA15 platform is now generated by iGen. The main effect  
of this change is that the platform's command line arguments have changed:
- The simulator's command line parser is now used, and thus all standard 
  command line arguments are accepted. The --help argument may now be used
  to see all available command line arguments.
- The command line arguments previously accepted by the platform have changed:
    OLD FORMAT      NEW FORMAT
    ----------      ----------
    V  <variant>    --variant <variant>
    B  <boot code>  --boot <boot code>
    SD <image>      --sdimage <image>
    U  <port>       --uart0port <port>
    nographics      --nographics
    wallclock       --wallclock
    Android         --android

OVPsim_Linux_ArmVersatileExpress_arm_Cortex-A15MP Demo
-------------------------------------------------------------------------------
The OVPsim_Linux_ArmVersatileExpress_arm_Cortex-A15MP Demo directory no longer
contains the executable platform, instead it uses the platform from the VLNV 
tree. See the README file in the demo for details.

AlteraCycloneV_HPS platform changes
-------------------------------------------------------------------------------
The AlteraCycloneV_HPS platform is now generated by iGen. The main effect of 
this change is that the platform's command line parameters have changed:
- The simulator's command line parser is now used, and thus all standard 
  command line arguments are accepted. The --help argument may now be used
  to see all available command line arguments.
- The arguments previously accepted by the platform, e.g.:
    ZIMAGE zImage
  now must be have a "--" prepended, and are accepted in lower case, e.g.:
    --zimage zImage

OVPsim_Linux_Altera_Cyclone_V_HPS_Cortex-A9MPx2 Demo
-------------------------------------------------------------------------------
The OVPsim_Linux_Altera_Cyclone_V_HPS_Cortex-A9MPx2 Demo directory no longer
contains the executable platform, instead it uses the platform from the VLNV 
tree. See the README file in the demo for details.

V850 Processor Model
-------------------------------------------------------------------------------
- Fixed an issue where a pending interrupt can be missed during the RETI
  instruction

ICM API
-------------------------------------------------------------------------------
- Functions have changed name (macros map the old to new names so you need not
  change your code)
    icmGetNextParamInfo    becomes icmGetNextProcessorParamInfo
    icmGetNextBusPortInfo  becomes icmGetNextProcessorBusPortInfo
    icmGetNextNetPortInfo  becomes icmGetNextProcessorNetPortInfo
    icmGetNextFifoPortInfo becomes icmGetNextProcessorFifoPortInfo
- New access functions:
    icmGetInterceptVlnv          Get the VLNV of this intercept object                          
    icmGetNextInterceptParamInfo Return the next intercept parameter info                              
    icmGetMMCVlnv                Get the VLNV of this MMC
    icmGetNextMMCBusPortInfo     Return the next MMC bus port description
    icmGetNextMMCParamInfo       Return the next MMC parameter description      
    icmGetPSEVlnv                Get the VLNV of this PSE
    icmGetNextPSEBusPortInfo     Return the next PSE bus port description                
    icmGetNextPSENetPortInfo     Return the next PSE bus port description
    icmGetNextPSEParamInfo       Return the next PSE parameter description
- If these functions fail, they no longer cause the simulation to fail:
    icmLoadBus   
    icmLoadSymbols
    icmLoadProcessorMemory
  Their return values MUST be checked if their success is important. To report
  why they failed, see icmLastMessage().
  
- New function
    const char *icmLastMessage()
  Returns the last message produced by the simulator, even if it was suppressed.
  
- fixed a bug in icmGetNextPSEBusPortInfo.
- fixed a bug in icmGetVlnvString - was confused by spurious directories in the
  <version> directory of a model.
  
- Function icmCLParser takes new values ICM_AC_SIM and ICM_AC_LIB to allow the
  users program to separately request simulator or library management flags.
  
- New functions icmDocSectionAdd and icmDocTextAdd allow a platform to create
  documentation that can be interrogated with the ICM API.
 
ARM Processor Model
-------------------------------------------------------------------------------
- Support added for VIC Ports to the ARM processor model. This adds new  
  netports VICADDR and VICACK to the model for those variants that support VIC 
  ports.
  If SCTLR.VE=1 when an IRQ interrupt is received then the processor will write
  a value of 1 to the VICACK netport and then expect a 32 bit address to be 
  immediately written to the VICADDR netport and this address will be used as 
  the exception vector for the interrupt.
  This behavior is only supported in the appropriate variants, currently: 
  ARM1026EJ-S, ARM1136J-S, ARM1156T2-S, ARM1176JZ-S, Cortex-R4 and Cortex-R4F.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- The vmi command argument parser can now parse Uns64 values (formerly the
  Addr type had to be used for 64-bit values). The new enumeration VMI_CA_UNS64
  added to the enumerated type vmiArgType is used to parse this type.
  
VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- Unary operations added:
    vmi_CTZ     (count trailing zeros)
    vmi_CTO     (count trailing ones)
    vmi_BSFZ    (get bit index of least-significant zero)
    vmi_BSFO    (get bit index of least-significant one)
    vmi_BSRZ    (get bit index of most-significant zero)
    vmi_BSRO    (get bit index of most-significant one)
- Binary operations added:
    vmi_IREM    (signed remainder)
    vmi_REM     (unsigned remainder)

Imperas VLNV Library Build Infrastructure
-------------------------------------------------------------------------------
- Makefile.igen build peripheral xml files independently of peripheral template
  files. All pse xml files generated are names pse.igen.xml
  
###############################################################################
##                                                                           ##
## Date 2014-November-05                                                     ##
##                                                                           ##
## Release 20141103.0                                                        ##
##                                                                           ##
###############################################################################

Imagination Technologies MIPS Models
-------------------------------------------------------------------------------
- Imagination Technologies have released, through OVP, models of it's new Warrior 
  class of processors.
  The MIPS32 variants M5100, M5150 and P5600 are fully released
  The MIPS64 variant MIPS64R6 is released in beta form and not yet fully 
  complete. 
 
Nios_II Shadow register / RDPRS /WRPRS
-------------------------------------------------------------------------------
- The estatus[CRS] and bstatus[CRS] register fields were marked as readonly as
  per the status[CRS] register field, this has been corrected to be read/write.

- The instructions RDPRS and WRPRS have been added.

SMSC LAN9118 peripheral model fixes
-------------------------------------------------------------------------------
Minor fixes to register read values to support UEFI Boot Loader:
- Clear "MII_ACC" register "MII Busy" bit when it has been set by a write.
- Fix incorrect value returned for "PHY Basic Status" register.

ARM MmciPL181 peripheral model fixes
-------------------------------------------------------------------------------
Minor fixes for CMD8 to support UEFI Boot Loader.

ARM SmartLoader peripherals
-------------------------------------------------------------------------------
The ARM Linux SmartLoader pseudo-peripherals will no longer generate extraneous
warning messages about unused attributes when they have been disabled.

Nios_II reset_n pin
-------------------------------------------------------------------------------
An additional change has been made to the reset_n pin, so that the first
net value of 0 is seen as an active edge transition. 
The removes the need to initialize the net to 1 at startup.

ArmVersatileExpress-CA9 platform enhancements
-------------------------------------------------------------------------------
The following changes have been made to the ArmVersatileExpress-CA9 platform 
to support UEFI booting:

- System Configuration Controller, 'Fast' AXI matrix and 'Slow' AXI matrix 
  address spaces may now be read and written (no underlying functionality has 
  been added, just the ability to read/write those addresses)
- The NOR0 and NOR1 Flash memories are now modeled with the new NorFlashP30
  peripheral which models the Flash programming process. These were previously
  just modeled as RAM.

New NorFlashP30 peripheral model added
-------------------------------------------------------------------------------
A new peripheral modeling the Intel StrataFlash P30 NOR Flash device has been 
added to at ImperasLib/source/intel.ovpworld.org/peripheral/NorFlashP30/1.0

TzpcBP147 (ARM TrustZone Protection Controller) peripheral model
-------------------------------------------------------------------------------
TzpcBP147 peripheral model has been enhanced to support 16 protection outputs
per register rather than 8, in order to match the Versatile Express 
implementation.

Peripheral Model Diagnostics
-------------------------------------------------------------------------------
- Standard MACROs are included to obtain the diagnostic level.

Xilinx xps-timer
-------------------------------------------------------------------------------
- Fixed an issue of reading the Count register, whilst counting not enabled
  The count register would only be loaded when counting enabled, this has been
  corrected so that the load occurs when the status load bit is set

ARM Cortex-M (armm) processor model
-------------------------------------------------------------------------------
- Writes to the reset net that do not change its value now have no effect.
- Performance of MOVT instructions has been greatly improved.
- Virtual memory constructor has been modified to use new functions
  vmirtSetProcessorInternalCodeDomain and vmirtSetProcessorInternalDataDomain
  to identify internal domains. The effect of this is that callbacks added
  with icmAddFetchCallback, icmAddReadCallback or icmAddWriteCallback will be
  activated by processor accesses prior to any system control space re-mappings
  have been applied.
- A warning message is now issued when an unrecoverable exception causes a
  cpu lockup
- Bits 31:30 of the VTOR register are now writable, per the latest revision of
  the ARM architecture specification.  

Nios_II reset_n pin
-------------------------------------------------------------------------------
The Nios_II model now behaves correctly when the reset_n pin is set/cleared
On a neg-edge the Nios_II goes into reset, on a pos-edge the Nios_II exits 
reset with all of its internal registers set to the reset condition. Code
execution then resumes at the RESET_VECTOR

armNewlib semihosting supports additional newlib function names
-------------------------------------------------------------------------------
The armNewlib semihost library has been enhanced to support newlib function
names with an additional "_" prepended to them (e.g. "__open" as well as "_open".
This allows semihosting of ELF files generated by certain toolchains which use
this convention (such as IAR).

armAngel semihosting extended to support Cortex-M model
-------------------------------------------------------------------------------
The armAngel semihost library now supports the Cortex-M (armm) models.

Libraries versioned for libelf & libdwarf
-------------------------------------------------------------------------------
The simulator is now linked against specific versions of libelf and libdwarf libraries
this is to overcome the case where external tools use there own versions
of libelf and libdwarf

Unsupported Dwarf version message added
-------------------------------------------------------------------------------
A check for ELF files using an unsupported DWARF version has been added. Only 
versions 3 and earlier are supported. For GNU toolchains the command line 
option -gdwarf-2 is recommended to get a supported DWARF version.

Note that DWARF information only affects line number queries and certain VAP 
tools, so it is not an error to use an ELF file with an unsupported DWARF 
version. 

arm.ovpworld.org ArmVersatileExpress-CA9 platform
-------------------------------------------------------------------------------
Added a dummyPort placeholder for the serial bus PCI device address range.  
Required for the Debian kernel to boot.

arm.ovpworld.org MmciPL181 peripheral
-------------------------------------------------------------------------------
Fixed uninitialized memory bug in the model that prevented the Debian network 
boot installer from working.

MIPS Processor Model
-------------------------------------------------------------------------------
- The integration support "stop" pseudo-register will now cause a processor to
  stop even when it is in debug mode (Debug.DM=1). Previously, processors in
  debug mode were unaffected by changes to this register.
- Full cache model has ben enhanced to distinguish fetch and load accesses.
- The initial values for the segctl registers when EVAReset=1 have been fixed
- Virtual memory constructor has been modified to use new functions
  vmirtSetProcessorInternalCodeDomain and vmirtSetProcessorInternalDataDomain
  to identify internal domains. The effect of this is that callbacks added
  with icmAddFetchCallback, icmAddReadCallback or icmAddWriteCallback will be
  activated by processor accesses prior to any CDMM, GCR, cache model, SPRAM
  or ITC re-mappings have been applied.
- A new resource code is added for debug access of the pseudo-register 'stop'.
- Byte-sized accesses to memory-mapped CMP registers are now supported.
- Correct microAptivCF configuration to MD00934-2B-microAptivUC-SUM-01.03

ARM Cortex-A (arm) processor model
-------------------------------------------------------------------------------
- Writes to the reset net that do not change its value now have no effect.
- Performance of MOVT instructions has been greatly improved.
- Virtual memory constructor has been modified to use new functions
  vmirtSetProcessorInternalCodeDomain and vmirtSetProcessorInternalDataDomain
  to identify internal domains. The effect of this is that callbacks added
  with icmAddFetchCallback, icmAddReadCallback or icmAddWriteCallback will be
  activated by processor accesses prior to any TCM re-mappings have been applied.

VMI API
-------------------------------------------------------------------------------
- Type memAccessAttrs has been enhanced to allow fetch and read accesses to be
  distinguished. Valid values for variables of type memAccessAttrs are:
    MEM_AA_FALSE                (indicates artifact read/write)
    MEM_AA_TRUE                 (indicates true read/write)
    MEM_AA_FALSE|MEM_AA_FETCH   (indicates artifact fetch)
    MEM_AA_TRUE|MEM_AA_FETCH    (indicates true fetch)
- New macros MEM_AA_IS_TRUE_ACCESS and MEM_AA_IS_ARTIFACT_ACCESS must be used
  to identify true and artifact accesses, given a value of type memAccessAttrs.
- New functions vmirtReadNByteDomainVA and vmirtWriteNByteDomainVA have been
  added. These are similar to vmirtReadNByteDomain and vmirtWriteNByteDomain
  but additionally allow a nominal virtual address (VA) to be passed. This
  virtual address is available as the VA argument of callbacks of type
  vmiMemReadFn, vmiMemWriteFn and vmiMemWatchFn activated by the read or write,
  and also similar platform callbacks of type icmMemReadFn, icmMemWriteFn and
  icmMemWatchFn. Existing functions vmirtReadNByteDomain and
  vmirtWriteNByteDomain always report identical 'address' and 'VA' arguments.
- Memory watch callback installation and removal functions (vmirtAdd*Callback
  and vmirtRemove*Callback) have been enhanced. It is now possible to pass the
  special value VMI_MASTER_SCOPE as the 'scope' argument to these callbacks,
  to indicate that the callback should be activated only by master-side
  accesses by any processor.
- New functions vmirtSetProcessorInternalCodeDomain and
  vmirtSetProcessorInternalDataDomain allow internal code and data domains for
  a processor to be identified. If these functions are not called during
  processor construction, domains associated with externally-connected code
  and data busses will be used (in other words, processor internal and
  external domains will be the same).
- New functions vmirtGetProcessorInternalCodeDomain and
  vmirtGetProcessorInternalDataDomain return the processor internal domains.
- Types vmiSymbolType and vmiSymbolBinding have been deleted; use types
  ordSymbolType and ordSymbolBinding instead. The definition of these types is
  in file ImpPublic/include/host/ord/ordTypes.h.
- Functions vmirtGetSymbolType and vmirtGetSymbolBinding have been modified to
  return values of type ordSymbolType and ordSymbolBinding, respectively.
- The shared data interface has been modified to improve usability, as follows:
  - Function vmirtRemoveSharedData now takes a 'vmiSharedDataHandleP' argument
    instead of a 'const char *' argument.
  - Function vmirtRegisterListener now takes a 'void *' argument as its third
    argument instead of a vmiosObjectP. This allows the shared data listener
    functions to be used in contexts other than intercept libraries.
  - Function vmirtUnregisterListener now takes a 'void *' third argument, which
    must match the corresponding argument given to vmirtRegisterListener for the
    listener to be deleted.
  - Function type VMI_SHARED_DATA_LISTENER_FN is now passed a void *' first
    argument instead of a vmiosObjectP argument. This is because the listener
    functions have been generalized so that they can be used in contexts other
    than just intercept libraries. Existing intercept library code that uses
    listeners can be made to conform to the new interface by adding this line:
        vmiosObjectP object = userObject;
- New functions have been added to access processor parameters of different
  types from intercept libraries:
    vmirtProcessorBoolAttr
    vmirtProcessorDoubleAttr
    vmirtProcessorUns32Attr
- Functions with names vmiosExtension*Attribute have been deleted. Extension
  libraries are now parametrized in the same way as processor models, and
  all parameters must be formally declared in a vmiParameter table structure.
  See the Imperas Binary Interception Technology User Guide for more details.
- Functions with names vmimmcGet*Attribute have been deleted. Memory model
  components are now parametrized in the same way as processor models, and
  all parameters must be formally declared in a vmiParameter table structure.
  See the Memory Model Component Function Reference Guide for more details.

ICM API
-------------------------------------------------------------------------------
- New function icmProcessorClocks(processor)
  returns the total number of instructions executed, including those 'executed'
  in the halted state.
- Behavior of icmAddFetchCallback, icmAddReadCallback and icmAddWriteCallback
  has been modified so that callbacks are added to processor internal domains
  instead of external domains as was the case previously. This allows callbacks
  to be installed before any structure such as a cache, which was not possible
  previously. To install callbacks on external domains, use existing functions
  icmAddBusFetchCallback, icmAddBusReadCallback or icmAddBusWriteCallback.
- icmGetProcessorElfcode has changed its parameters. Please refer to icmQuery.h
  if you use this function.
- Passing a non NULL value to the semihost-file argument of icmNewPSE will cause
  an error. If native code is used to provide behavior of a PSE model it 
  is only specified in the PSE model itself.
- MMC implementation has been improved so that transparent and full models are
  both connected to busses as normal (previously, transparent models required a
  special connection idiom). Functions icmConnectTransparentMMC and
  icmChainTransparentMMC have been deleted.
- New functions icmGetBusPortAddrBitsMin and icmGetBusPortAddrBitsMax return
  the number of address bits when a model offers a range.
  
Simulator Core
-------------------------------------------------------------------------------
- Behavior of asynchronous interrupts from a debugger has been modified so that,
  for processors with delay slot instructions, the interrupt is safely deferred
  until the following non-delay-slot instruction.
- Function vmirtDisassemble has been enhanced as follows:
  - When called in an intercept library context, the function will now invoke
    the disassembly function either in a subsequent intercept library or in the
    processor model; previously, the function could invoke the disassembly
    function in the *current* intercept library, which could cause an infinite
    recursion. The new behavior is more useful when writing intercept libraries
    that modify the behavior of a specific instruction in a processor
    instruction set.
  - Type vmiDisassAttrs contains a new DSA_BASE entry, which specifies that
    disassembly should always be performed using the processor model disassembly
    function (not a function defined in any intercept library).
- The QuantumLeap parallel simulation algorithm has been enhanced to improve
  usability, as follows:
  - Simulation is now Nice instead of Greedy by default. See the OVPsim and
    Imperas CpuManager User Guide for more information about Nice and Greedy
    simulation modes and how to configure which algorithm is used.
  - A new control file option --parallelThreads allows the number of parallel
    threads that run simultaneously to be restricted if required. See the OVPsim
    and Imperas CpuManager User Guide for more details.
  - The standard QuantumLeap algorithm now allows simulation of platforms with
    any number of processor cores within them (previously, a separate license
    was required to enable simulation of platforms with more than 8 cores).
  - A separate license is required now for simulations with more than 4 threads
    running in parallel.
- Control file options
    --gdb has been deleted. Use --port 0 instead.
    --gui has changed to --mpdigui.
    --argv <parameters> passes parameters to the application's main()
    Note that this swallows all following parameters so must be used last.
    --envp <var>=<value> <var>=<value> ...
      Passes environment variables to the application's main().
    --showcommands and --showoverrides now prevent the simulator from
      creating a debug console.
- A code generator bug causing incorrect code to be generated in complex
  sequences of overlapping register moves has been fixed.
- A bug has been fixed that caused an assertion error with 32-bit products when
  running on hosts with native FMA support when FMA instructions caused floating
  point exceptions to occur.
- An issue has been fixed that could cause unexpected floating point exceptions
  when emulating fused-multiply-add instructions.
  
###############################################################################
##                                                                           ##
## Date 2014-July-31                                                         ##
##                                                                           ##
## Release 20140731.0                                                        ##
##                                                                           ##
###############################################################################

Phillips ISP1761 USB controller model added
-------------------------------------------------------------------------------
- A new USB device has been added to philips.ovpworld.org. See the file
  ImperasLib/source/philips.ovpworld.org/peripheral/ISP1761/1.0/README-OTG.txt
  for info on configuring the host computer to use it.

SMSC LAN9118 and LAN91C111 ethernet controller models added
-------------------------------------------------------------------------------
- 2 new ethernet devices have been added to smsc.ovpworld.org. See the file
  ImperasLib/source/smsc.ovpworld.org/peripheral/LAN9118/1.0/README-EMAC.txt
  for info on configuring the host computer to use them.

Functional USB and Ethernet models added to VersatileExpress platforms
-------------------------------------------------------------------------------
- Working ethernet and USB models have been added to the following platforms:
    ArmVersatileExpress
    ArmVersatileExpress-CA9
    ArmVersatileExpress-CA15
    ArmVersatileExpressLinuxwithMicroBlaze
    QuadArmVersatileExpress

ArmVersatileExpress-CA9 platform
-------------------------------------------------------------------------------
- Added missing cardin and wprot net connections between the MmciPL181 and 
  VexpressSysRegs peripherals so the MmciPL181 now is usable in Linux when a disk
  image is specified for it using the SD_DRIVE parameter.

ARM Cortex-M (armm) processor model
-------------------------------------------------------------------------------
- The SYST_CSR.CLKSOURCE field has been changed to read-as-1/write ignored
  since external clock sources are not supported by the model.

MIPS Processor Model
-------------------------------------------------------------------------------
- Correct default values of SegCtl registers on interAptivUP to 3 GiB MUSUK
  segment when EVAReset asserted.
- Configuration bits in the FCSR register of the microAptivCF variant have been 
  corrected.
- Config5.K is correctly forced to 1 when EVAReset parameter set.
- Correct potential crash when calling icmDisassemble on a multi-core or multi-
  VPE processor.
- Added SI_ExceptionBase and SI_UseExceptionBase input nets to variants that
  support them. Note that CMP variants do not have these inputs - the GCR 
  register GCR_CL_REGISTER_BASE is used instead. Also variants before 24K do not 
  have these nets either.
  Also added SI_EVAReset, SI_ExceptionBasePA and SI_ExceptionBaseMask inputs to 
  variants that support Segment control but do not have CMP. (currently only 
  the interAptivUP variant meets this criteria).
  These nets are only sampled on a reset, so if you want a value written to 
  these nets to take effect at the beginning of simulation, the reset net must 
  be set to 1 and then 0 at the beginning of simulation.
- The SI_* nets are provided for cases where these inputs to the processor model
  are controlled by other simulated devices. When this is not needed there are 
  corresponding model parameters which may be used to specify the values to use
  for inputs that never change during the simulation. 
  These parameters are:
    ExceptionBase
    UseExceptionBase
    EVAReset
    ExceptionBaseMask
    ExceptionBasePA
  Note these parameters are ignored when CMP is present. The last three are
  ignored unless segment control is present.
  These parameters simply provide a way to specify the values used at simulation 
  startup. If the SI_* nets are connected and written to, that will override
  the initial value from the parameters.
- The LegacyUseBEVBase parameter has been deleted in favor of the new 
  UseExceptionBase parameter, which has slightly different functionality.
- The BEVBase parameter has been deleted in favor of the new ExceptionBase 
  parameter. Note that unless the new UseExceptionBase parameter is set to 1 
  it will be ignored.
- The BEVBasePA and BEVBaskMask parameters have been renamed ExceptionBasePA
  and ExceptionBaseMask to match the latest MIPS documentation.
  
TLM Platforms
-------------------------------------------------------------------------------
- Several TLM platforms in the library and in the Examples directories which
  specified memories that were one byte too large have been corrected.
- The TLM decoder now checks that the high address is not lower than the low
  address.
- A crash when hitting a register event breakpoint in the TLM platform has been
  fixed.

Signal Handling
-------------------------------------------------------------------------------
- When connected to a debugger, signals received by the simulator could finish
  the simulation. This has been fixed.

Control files
-------------------------------------------------------------------------------
- OVPsim can now read a control file. Please refer to OVP_Control_File_User_Guide

New "append" parameter added to SmartLoaderLinuxArm peripheral
-------------------------------------------------------------------------------
- A new parameter named "append" has been added to the SmartLoaderLinuxArm
  peripheral. When set, the string will be appended to the command line passed 
  to the Linux kernel. This is useful for adding things to the default command
  line. The "command" parameter may still be used to override the default
  command line.  

New VirtioBlkMMIO peripheral model added
-------------------------------------------------------------------------------
- A new peripheral device that models a VIRTIO MMIO Block device has been added.
  This device models a legacy (or v1) device as described in the document:
    http://docs.oasis-open.org/virtio/virtio/v1.0/virtio-v1.0.pdf
  and may be used to model a disk drive in Linux platforms. 
  Use the VB_DRIVE parameter to specify the disk image file to use.

ARM Cortex-A/R Processor Model
-------------------------------------------------------------------------------
- Non-functional debug registers have been added to ARMv8 processor model
  (sufficient to allow operating systems such as Linux to boot).
- Coprocessor registers in the debug view are now sorted alphabetically instead
  of by index number.
- A bug has been fixed in which monitor addresses used by LDREX/STREX
  instructions were incorrect in AArch64 state in some circumstances.
- A bug has been fixed which caused incorrect memory aborts when AArch32 EL0
  processes were executed with AArch64 EL1 TLB management.
- Condition flag settings for AArch64 ANDS, BICS and TST instructions have been
  corrected (previously, flags were incorrectly set in the same way as for
  equivalent AArch32 instructions, meaning that PSTATE.V was not changed).
- A bug has been fixed which prevented Cortex-R models from exiting reset state
  with ATCM or BTCM enabled when signals INITRAMA or INITRAMB were high.
- A new Boolean parameter "useInternalTCMs" has been added to processor variants
  with ATCM/BTCM memories. When set to true, this parameter forces the model to
  use internal TCM memory models even when ATCM/BTCM ports appear to be
  externally connected. This allows internal ATMC/BTCM memories to be used in
  SystemC platforms in which ATCM/BTCM ports are connected to dummy devices and
  not actually implemented externally.

VMI API
-------------------------------------------------------------------------------
- vmiFPConfig structure has new 'tininessAfterRounding' field, which specifies
  that tininess of floating-point results should be detected after rounding
  instead of before rounding (the default).
- vmiFPConfig structure 'suppressDF' field has been deleted and replaced with
  a field 'suppressFlags' of type vmiFPFlags. This enables any flag generated
  by a floating-point operation to be suppressed if required.
- vmiFPConfig structure has new 'stickyFlags' field, which, if True, specifies
  that floating-point operation result flags should be combined with the current
  flags using bitwise-or. If False, floating-point operation result flags are
  directly assigned to the flags specified with the operation.
- Function prototypes of vmiMemReadFn, vmiMemWriteFn and vmiMemWatchFn memory
  callback functions have been modified so that the order of arguments conforms
  to similar functions in the ICM API. Define callbacks using VMI_MEM_READ_FN,
  VMI_MEM_WRITE_FN and VMI_MEM_WATCH_FN macros to ensure portability.

Simulator Core
-------------------------------------------------------------------------------
- An issue has been fixed that occasionally caused halted processors to be
  incorrectly restarted by a preceding call to the ICM function icmInterrupt.
- Memory model performance with large virtual pages has been improved.
- Combination of -enabletools and -finishafter caused internal error. This is
  fixed.
- An issue has been fixed that caused slow simulation on Windows hosts with
  QuantumLeap parallel simulation when the number of simulated cores exceeded
  the available cores on the host.
- An issue has been fixed that caused incorrect behavior on 64-bit hosts in
  some circumstances for simulations using large amounts of virtual memory.
- Performance of all floating point operations that set sticky flags has been
  significantly improved.
- Performance of most SIMD floating point operations has been significantly
  improved.

ICM API
-------------------------------------------------------------------------------
- The use of icmInit() has been replaced with icmInitPlatform() in most of the 
  example and library platforms. The new function names the platform as part
  of the simulation initialization.
  
- icmCLParserAdd has new argument types
  ICM_AT_PAIRLIST     parses -flag name=value name=value ... (until another -)
  ICM_AT_FC_ARGVPAIR  parses -flag name=value name=value ... (until another -)
  ICM_AT_STRINGSLAST  parses -flag string string ... (until the last argument)
  ICM_AT_FC_ARGVLAST  parses -flag string string ... (until the last argument)
  
  Note that some of the ICM_AT_xxx macro names have changed.
  
- Custom object reader has moved:
     from ImpPublic/include/host/icm   to   ImpPublic/include/host/ord
     
  Please refer to the include-file in this directory.   
  
  The callbacks created by the user must supply an extra argument -
    the user data passed to your entry function.
  Information is passed back to the simulator in the ordObjectInfo structure
  instead of as arguments to the callback.
  (see Examples/Platforms/objectReader/loader/loader.c)
  
  New functions to extract more information from ELF files:
  icmReadObjectFileHeaderInfo - More comprehensive version of icmReadObjectFileHeader
  icmReadObjectFileInfo       - Get a list of regions to be loaded.
  Function to load a program with an external offset
  icmLoadProcessorMemoryOffset()

- New function icmMapExternalNativeMemory allows memory regions to be created
  that are accessed either by callback function or as direct memory for read
  or write, if the corresponding callback is NULL.
  
- New function icmGetFaultAddress returns the fault address associated with any
  processor with a stopReason which is one of:
      ICM_SR_RD_PRIV
      ICM_SR_WR_PRIV
      ICM_SR_RD_ALIGN
      ICM_SR_WR_ALIGN
      ICM_SR_FE_PRIV
      ICM_SR_RD_ABORT
      ICM_SR_WR_ABORT
      ICM_SR_FE_ABORT

###############################################################################
##                                                                           ##
## Date 2014-April-25                                                        ##
##                                                                           ##
## Release 20140430.0                                                        ##
##                                                                           ##
###############################################################################

ARM V8 Toolchain support
-------------------------------------------------------------------------------
- $IMPERAS_HOME/lib/$IMPERAS_ARCH/CrossCompiler/AARCH64.makefile.include:

  This may be used to build AArch64 baremetal applications. See the comments in 
  the file for details on how to use it. The executables it creates assumes 
  Arm Angel semihosting is present.
  
- $IMPERAS_HOME/lib/$IMPERAS_ARCH/CrossCompiler/AARCH32.makefile.include:

  This may be used to build AArch32 baremetal applications.  See the comments in 
  the file for details on how to use it. The executables it creates assumes 
  Arm Angel semihosting is present.
  
  Since processors boot into AArch64 mode by default, to run this executable
  directly on a V8 processor you must either boot the processor in AArch32 mode 
  (using the "override_RMR" processor model parameter) or an AArch64 program 
  must switch to AArch32 mode when it jumps to it. 

ARM Cortex-A/R Processor Model
-------------------------------------------------------------------------------
- Exceptions HypervisorCall8 and HypervisorCall20 have been renamed
  HypervisorCall and HypervisorTrap to indicate more clearly their function.
- Mode and exception information has been removed from the root level of MPCore
  cluster processors: it should be present at leaf level only.
- A bug was fixed that could cause a result of 0x01 instead of 0x00 for 
  AArch32 SIMD VQRSHL.U8 and VRSHL.U8 instructions when the shift amount was 
  less than -7.
- A bug was fixed that could cause incorrect rounding and flags on some corner
  cases for the SIMD and VFP Fused Multiply Accumulate instructions 
  vfma/vfms/vfnma/vfnms
- A bug was fixed that could cause the FPSCR.QC (cumulative saturate) flag to 
  be incorrectly set to 1 on certain corner cases of the VQRSHRUN instruction 
  with a signed operand.
- TLB entry cache has been enhanced so that overlapping entries with different
  ASIDs can be held simultaneously.
- For processors with active stage 1 and stage 2 translation tables, stage 1 and
  stage 2 data is now merged into a single TLB entry. Previously, stage 1 and
  stage 2 entries were maintained separately.
- Processor variants of architecture versions ARMv7 and ARMv8 now support
  additional variant-specific configuration signals.
- Processor parameters have been revised so that only parameters relevant to
  the instantiated version are presented.
- Cortex-R4 and Cortex-R4F variants now have additional parameters
  override_ATCMRR and override_BTCMRR that allow implementation-specific TCM
  base addresses and sizes to be set.
- IT blocks now strictly check the legality of instructions within them and
  take an Undefined Instruction exception for invalid instructions (the
  behavior of such instructions is unpredictable according to the ARM ARM, so
  correctly-written code should be unaffected).
- Input signal SLVERR has been added. The value of this signal is used when an
  external abort is generated to set the ExT bit in the DFSR and IFSR registers.
  Previously, this bit was always set to 1.

ARM Cortex-M Processor Model
-------------------------------------------------------------------------------
- A bug was fixed that could cause incorrect rounding and flags on some corner
  cases for the SIMD and VFP Fused Multiply Accumulate instructions 
  vfma/vfms/vfnma/vfnms.
- IT blocks now strictly check the legality of instructions within them and
  take an Undefined Instruction exception for invalid instructions (the
  behavior of such instructions is unpredictable according to the ARM ARM, so
  correctly-written code should be unaffected). 
  
armAngel Semihost Library
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect errno values to be set in the 
  armAngel semihost library
- Support for setting errno in executables built with the IAR Embedded Workbench 
  toolchain has been added to the armAngel semihost library.

ICM API
------------------------------------------------------------------------------
- A bug has been fixed that caused the ICM_ELF_USE_VMA flag on 
  icmLoadProcessorMemory() calls to be ignored
  
- icmLoadProcessorMemory now reads the program header flags when loading an
  executable.
  If the execute bit set it uses the processor instruction bus port.
  If the execute bit is clear it uses the processor data bus port.
  (In a platform which connects both ports to the same bus, this has no effect).
  
  icmLoadProcessorMemory accepts a new loader attribute ICM_ELF_SECTION_HDRS.
  When set, the loader loads the section headers rather than the program headers.
  Normally this should not be required.
  
- If you are installing your own loader, note that the loadSection callback
  now requires you to supply an extra argument - the execute bit.
  
VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Range table objects (created with vmirtNewRangeTable) have been enhanced to
  support overlapping regions. Function vmirtGetLastRangeEntry has been deleted.
  New function vmirtGetNextRangeEntry allows delete-safe iteration over range
  table entries.
- vmirtEvaluateCodeLocation() has been changed.
     It has an extra argument fullFile which points to the fully qualified path
     to the code location.
     both sourceFile and fullFile are now correctly declared as "const char *"
     because they should not be written over by the user.
     sourceLine is now (more precisely) declared as Uns32*.
- vmirtAddArg is a new function used in the same context.
- New functions vmirtAddCommandParse vmiosAddCommandParse vmimmcAddCommandParse
  should not be used until documented.
- vmirtGetLicenseErrString now accepts a name argument which must be the same
  value that was passed to the failing vmirtGetLicense function.
- New function vmirtSetLoadStoreMask has been added which allows load/store
  most-significant address bits to be masked off and either filled with zeros
  or ones. This enables tag bits to be efficiently implemented.

VMI OS SUPPORT FUNCTION INTERFACE (see VMI OS Support Reference documentation)
-------------------------------------------------------------------------------
- vmiosAddCommand vmirtAddCommand vmimmcAddCommand 
  All have a new argument (vmiCommandAttrs attrs) which controls how a command
  is handled in a graphical interface.
  Set to VMI_CT_DEFAULT to maintain existing behavior.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- All memory access functions have been enhanced to support any load/store size
  from 1 to 128 bytes.

Simulator Core
-------------------------------------------------------------------------------
- An issue has been fixed where a call to icmInterrupt when a processor is
  halted caused control to be directed to an attached debugger instead of
  causing return from icmSimulate/icmSimulatePlatform.
- A code generator bug causing incorrect code generation for operations using
  operation vmi_SHRR for operands of width less than 32 bits has been corrected.
- Some corner cases results for floating point fused-multiply-add operations
  have been corrected. In fused mode, the operations are now implemented as
  follows:
    vmi_FMADD:      d <- ( a * b) + c
    vmi_FMSUB:      d <- ( a * b) - c
    vmi_FNMADD:     d <- (-a * b) - c
    vmi_FNMSUB:     d <- (-a * b) + c
    vmi_FMSUBR:     identical to vmi_FNMSUB
  In fused mode, all arithmetic operations are performed at infinite precision
  followed by a single rounding event at operation completion.
- New floating point ternary operation types vmi_FMADDH, vmi_FMSUBH and
  vmi_FMSUBRH have been added. These are equivalent to vmi_FMADD, vmi_FMSUB and
  vmi_FMSUBR except that they also perform a final halving operation. In fused
  mode, they are therefore implemented as:
    vmi_FMADDH:     d <- (( a * b) + c) / 2.0
    vmi_FMSUBH:     d <- (( a * b) - c) / 2.0
    vmi_FMSUBRH:    d <- ((-a * b) + c) / 2.0
- New floating point unary operation type vmi_FAWAY has been added. This
  implements IEEE754-2008 round-to-nearest, tie-away rounding.
- New rounding mode vmi_FPR_AWAY has been added. This implements IEEE754-2008
  round-to-nearest, tie-away rounding.
- Floating point QNaN result handlers have been enhanced to allow return of
  non-NaN results. If such a result is returned, an Illegal Operation is not
  signaled.
- Allow virtual mapping to be made where the page address is not aligned to
  the size of the page being mapped.

Generated Peripheral Model File Naming
-------------------------------------------------------------------------------
- The peripheral model source code generated by iGen naming has changed. 
  Please be aware that the generated files of form pse.* are now given a model
  specific name.
  For example for the peripheral LcdPL110: pse.igen.h is now LcdPL110.igen.h
- The files named *.macro.igen.h are now named *.macros.igen.h for consistency.

TLM Interface
-------------------------------------------------------------------------------
  - Transaction tracing. With tracing turned on, the OVP TLM Processor
    interface prints more information:
    * data referenced by the TLM data pointer
    * DMI requests and answers
    * Which processor port is acting as TLM initiator.
    
  - DMI is now negotiated on debug as well as transport transactions.
  - DMI negotiation is now attempted only once for each region, until the 
    region is invalidated.
    
  - The OVP MMC interface no longer modifies the transaction data pointer
    (in violation of the TLM protocol).
    
  - Prototype of method icmCpuMasterPort::mapLocalMemory has changed to
    void mapLocalMemory(Addr lows, Addr high, icmBusObject* &localBus);
    
    This fixes a problem that made it impossible to use local memory for
    a region required by both instruction and data ports. See
    OVPsim_Using_OVP_Models_in_SystemC_TLM2.0_platforms.pdf.

###############################################################################
##                                                                           ##
## Date 2014-January-24                                                      ##
##                                                                           ##
## Release 20140127.0                                                        ##
##                                                                           ##
###############################################################################

OVP BHM PPM Function Reference Manual
-------------------------------------------------------------------------------
Several errors have been fixed and additional clarifications have been added to
Section 8 Serial Device Support. 

MIPS32 Processor Model
-------------------------------------------------------------------------------
- A new interAptivUP variant has been added to the mips.ovpworld.org mips32 
  model.
- A new integration support pseudo-register "stop" has been added. When written
  with non-zero, this stops the processor executing. The purpose of the register
  is to allow integration with debuggers that expect to be able to stop
  individual cores in a multicore platform while allowing simulation to continue
  on other cores.

IMPORTANT!   ICM API object names
-------------------------------------------------------------------------------
Named objects (nets, buses, FIFOs, processors, peripherals, memories, ports,
parameters, platforms) must use legal characters in their names.
This is now enforced. Legal characters are : A-Z a-z, 0-9 _
Please ensure that calls to icmNewProcessor() etc. use legal names.

Remote Debug
-------------------------------------------------------------------------------
The remote debug interface has changed. In the event of the debugger (gdb, mpd,
or other debugger) crashing or causing a protocol error, the simulator will no
longer exit in all cases. Where possible the simulator will stop and wait for a
new connection. If this happens, simply restart the debugger and reconnect to
the same port number as before.

Powerpc32 ISA Model
-------------------------------------------------------------------------------
The LWARX/STWCX have been enhanced to work in a multiprocessor environment.
Whenever a reserved location is accessed by another processor during a load
store sequence. The store will fail in the correct manner in a multiprocessor
platform.

ARM Cortex-A Processor Model
-------------------------------------------------------------------------------
- The processor model parameter 'override_genericTimerScale' has been renamed
  to be 'override_timerScaleFactor' and now applies to the mpCore local, 
  private and watchdog timers in the A5 and A9 models as well as the generic  
  timers in the A7 and A15 models that it previously applied to. 
  
  When this value is not overridden the timing is unchanged from previous 
  simulator versions. With this change the mpCore timer frequency may now be
  controlled in all cases.
  
- The CNTFRQ register in models that implement generic timers (currently just
  the A7 and A15 models) is now initialized at reset to the timer clock 
  frequency that is being modeled. This frequency may be changed using the 
  'override_timerScaleFactor' parameter described above.
  
- MPCore block global, generic and event timers are now modeled more accurately
  using monotonic timers (see new function vmirtCreateMonotonicModelTimer)

- Added an artifact register 'transactAT' that returns the access type of any
  active memory transaction, encoded as:
  0: virtual address;
  1: physical address (from TLB pagewalk).

- Uncooked disassembly mode includes a new keyed field "IS" giving the
  instruction set of the decoded instruction. Possible values are:
    "32" (for traditional 32-bit instruction)
    "T"  (for Thumb instruction)

- Disassembly of bkpt and svc instructions has been modified to conform to the
  ARM ARM. Previously, these instructions were disassembled in the form:
    svc     0x1234
    bkpt    0x123
  The revised form includes the # constant identifier:
    svc     #0x1234
    bkpt    #0x123

- Descriptions of system registers in the processor documentation have been
  improved.

ARM Cortex-M (armm) Processor Model
-------------------------------------------------------------------------------
- Interrupt inputs now properly latch an input edge rather than ignoring an 
  interrupt if it lowered before it became active. Previously a pulse triggered
  input could be modeled by writing 1's to the interrupt net to simulate a
  pulse, and never writing a 0. This did not allow proper modeling of level 
  sensitive interrupts, so now a pulse must be modeled by writing a 1  
  followed by writing a 0. The 0 may follow immediately - there is no need to 
  simulate for any cycles in between. 
  
- Level sensitive interrupts are now fully supported:
  Interrupt inputs that remain high upon the return from the service routine 
  will now properly cause a new interrupt exception. Previously this would
  only happen if a 1 was written again to the interrupt net once the interrupt 
  went active.
  
- A bug has been fixed where writes to NVIC_ICPRx registers would improperly 
  clear the pending state when the interrupt input was asserted. The 
  architecture specifies that the pending state should not be cleared by writes  
  to NVIC_ICPR when the corresponding interrupt input is still asserted.
  
- A bug has been fixed where writes to SHCSR did not cause the current execution
  priority to be updated if active bits changed state as a result.

- Uncooked disassembly mode includes a new keyed field "IS" giving the
  instruction set of the decoded instruction. This is always "T" because
  Cortex-M processors implement only the Thumb instruction set.

MIPS Processor Model
-------------------------------------------------------------------------------
- CMP block programmable interrupt timers are now modeled more accurately using
  monotonic timers (see new function vmirtCreateMonotonicModelTimer)

- A bug has been fixed in which values of floating point registers accessed
  using the debug interface at the VPE level of a processor with a
  single-threaded FPU were not correctly returned.

Nios_II Processor Model
-------------------------------------------------------------------------------
During a TLB read, the line field of pteaddr.VPN was incorrectly being 
overwritten. This has now been fixed

ICM API
------------------------------------------------------------------------------
Two new arguments required:

void icmCLParserAdd (
    icmCLPP       parser,
    const char*   name,
    const char*   shortName,
    const char*   argDesc,
    const char*   group,       <-- name of group (clarifies -help output)   
    icmCLPArgType type,
    icmArgTypes   pointer,
    const char*   description,
    Uns32         useMask,
    Uns32         userData,
    Bool          mandatory    <-- if set, this argument _must_ be supplied
)

New function provides a usage message, printed by -help or if an error occurs.

void icmCLParserUsageMessage(icmCLPP parser, const char *message)

VMI API
-------------------------------------------------------------------------------
- Processor parameter value size callback (entry paramValueSizeCB in the
  vmiIASAttr structure) now takes an additional "variant" argument, which is
  the requested processor variant (or NULL, if no variant is being requested).
  The variant can be used to configure the presented parameters so that they
  are variant-specific.
- New field 'Bool QLQualified' added to the 'vmiProcessorInfo' structure. Set
  this to True if your model is qualified to run with QuantumLeap.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmimtAtomic allows identification of atomic instructions and
  similar constructs, allowing processor models to be used with the QuantumLeap
  parallel simulation algorithm.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmirtGetProcessorIPS returns the nominal instructions-per-second
  for a processor (i.e. the instructions-per-second implied by the "mips"
  processor parameter at creation.
- New function vmirtCreateMonotonicModelTimer allows the creation of monotonic
  timers. Monotonic timers are guaranteed to present a consistently-increasing
  view of system time to a processor mode.
- Semantics of timer operation have been clarified (refer to the documentation).

Simulator Core
-------------------------------------------------------------------------------
- A code generator bug causing incorrect execution of conditional instructions
  under some circumstances has been fixed. The bug was introduced in Release
  20131018.0.
- Arithmetic exceptions that are not generated by processor models are now
  handled like other exceptions (i.e. they generate a standard abort message or
  are routed to previously-installed numeric exception handlers).
- A new simulation algorithm (QuantumLeap) allows multicore platforms to
  simulate in parallel on multiple cores of the host machine. See the OVPsim and
  Imperas CpuManager User Guide for more information.
- OVP now supports up to 4 instruction type intercepts per processor, which
  allows limited semihosting based on instruction type to be used with OVP.
  This allows ARM AngelTrap semihosting to be used with OVP (previously, this
  semihosting was available only with Imperas Professional products).
- Function vmirtDisassemble is now available for use with OVP. This enables
  semihost libraries that require instruction type decode to be used with OVP.
- Verbose mode simulation time statistics have been improved so that time taken
  at a debug prompt does not distort results.
- When control files are enabled, a new option -o0 is implemented that
  disables aggressive JIT compiler optimizations.

ARM AngelTrap Semihosting
-------------------------------------------------------------------------------
- The armAngel semihosting library which is loaded and used in an example 
  platform BareMetalArmCortexASingleAngelTrap have been moved to the 
  arm.ovpworld.org vendor in the Imperas VLNV library.
- The demo Imperas_angeltrap_arm_icm has been renamed and made available
  in the OVP demo packages OVPsim_demo_arm and OVPsim_demo_arm_Cortex-A as
  a statically built demo OVPsim_single_angeltrap_arm_Cortex-A9UP.

terminal.exe
-------------------------------------------------------------------------------
- Fixed a bug which caused this program to consume excess CPU time at the end
  of simulation. (this program allows the user to communicate with a UART
  model in some Demos and Examples).

###############################################################################
##                                                                           ##
## Date 2013-December-05                                                     ##
##                                                                           ##
## Release 20131018.1                                                        ##
##                                                                           ##
###############################################################################

Rerunning a platform with peripheral model system events
-------------------------------------------------------------------------------
- Fixed a bug which caused a crash when attempting to use
  icmInit and icmTerminate in a platform containing a peripheral model that
  uses system events.

ELF File Reader
-------------------------------------------------------------------------------
The ELF File reader has been altered to use the program headers in preference
to the section headers. If there are no-program headers then the section 
headers are used to load memory.
By default the LMA addresses are used for placement, if the ELF requires that
the VMA addresses are used, then this can be overridden using the command line
flag --elfusevma, or the ICM API call icmLoadProcessorMemory() can be
configured to use the VMA addresses in the attrs argument setting the 
value ICM_ELF_USE_VMA.

ARM Cortex-A Processor Model
-------------------------------------------------------------------------------
- The maximum interrupt lines setting of the ITLinesNumber field of the 
  GICD_TYPER register for the Cortex A7 variant that can be specified using the
  parameter 'override_GICD_TYPER_ITLines' has been corrected to support a 
  maximum value of 15.
- The maximum value allowed by the simulation model for the 
  GICD_TYPER.ITLinesNumber field on the Cortex-A5 variant has been corrected to
  be 7 rather than 15. 
  CAUTION: This was a bad fix that is still present in branch at 20130630.6

MIPS Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect behavior for configurations with
  a CMP block and only one processor (GCR_CONFIG.PCORES=0).

Host Compilers
-------------------------------------------------------------------------------
The versions of Host compilers used to build libraries and models have been
upgraded to the following versions
Linux32   : 4.5.2 i686-nptl-linux-gnu (Crosstool-NG)
Linux64   : 4.4.3 x86_64-unknown-linux-gnu  (Crosstool-NG)
Windows32 : 4.4.7 (mingw32)
Windows64 : 4.4.7 (mingw64)

###############################################################################
##                                                                           ##
## Date 2013-October-23                                                      ##
##                                                                           ##
## Release 20131018.0                                                        ##
##                                                                           ##
###############################################################################

Nios_II Processor Model
-------------------------------------------------------------------------------
The Nios_II /F /S /E processors are now supported.
The model includes full support for the configuration options to control
MMU(Associativity & Size), MPU, MUL, MULX, DIV.
In addition a reference platform has been created to boot Linux, this is 
based around a Cyclone_III 3c120 configuration

New Freescale Vybrid VF5 and Kinetis K60 Platforms
-------------------------------------------------------------------------------
New platforms have been added for the Freescale Vybrid VF5 and Kinetis K60
SOCs. These have sufficient functionality to boot the MQX RTOS. Uarts are 
modeled to sufficient detail to be usable, but no other peripherals are 
modeled.

ARM Processor Model
-------------------------------------------------------------------------------
- The Cortex-A15 and Cortex-A7 models no longer emit the following bogus 
  warning when certain TLB Maintenance instructions are used in a processor 
  that implements the Multiprocessing Extensions:
  "Warning (ARM_CP_TLBMBD1)...TLB maintenance broadcast disabled by ACTLR.FW=0"
- The Cortex-A5 model secure mode ICDDCR register now properly supports the
  Enable Non-secure bit (bit 1). Previously this bit was incorrectly RAZ/WI.
- The Cortex-A7 model has been corrected so that the SDIV and UDIV instructions
  are enabled by default
(following is also included in patched branch 20130630.5)
- The maximum value allowed by the simulation model for the 
  GICD_TYPER.ITLinesNumber field on the Cortex-A7 variant has been corrected to
  be 15 rather than 7.
  
ELF reader
-------------------------------------------------------------------------------
The ELF reader has been modified so that it now loads to Load Memory Addresses 
(LMA) by default rather the Virtual Memory Addresses (VMA). 

In most ELF files the LMA is the same as the VMA so there will be no change in
behavior. 

The LMA differs from the VMA in ELF files when data is to be copied by a 
program's startup code, usually from ROM to RAM. The icmLoaderAttrs
ICM_LOAD_PHYSICAL enum (or --loadphysical command line option) was sometimes 
used to get ELF files that had a different LMA to work. This option has other 
side effects that can cause problems, and should no longer be used except 
in the rare architectures that actually do specify physical addresses in the 
ELF file.

If the previous behavior of using the VMA address is needed you may use the 
icmLoaderAttrs ICM_ELF_USE_VMA value. There is also a command line option, 
--elfusevma that has the same effect.
  
Demos/Examples
-------------------------------------------------------------------------------
- NEW Demo/OVPsim_Linux_QuadArmVersatileExpress_arm_Cortex-A15MP
    Instantiates 4 quad core ARM Cortex-A15MPx4 processors in platforms; each 
    ARM Cortex-A15MPx4 runs a separate Linux kernel

- NEW Demo/OVPsim_Linux_Altera_CycloneV
    Platform representing the Altera CycloneV platform; runs a Linux kernel on 
    an ARM Cortex-A9MPx2

- NEW Demo/OVPsim_single_Nios_II, OVPsim_multicore2_Nios_II, OVPsim_manycore24_Nios_II
    Shows baremetal applications on platforms with one to many Nios II processors

- NEW Demo/OVPsim_Nios_II_tlm2.0
    Shows baremetal applications running on a SystemC TLM2.o platform with Nios II

- NEW Examples/Platforms/ARM_specific/trustzone
    NOTE: This example requires the Imperas Professional Simulator to run 
    A number of examples showing the support for ARM TrustZone in OVP processor
    models and how this is realized in an OVP platform. 
        1.ignoreTrustZone
        2.alwaysSecure
        3.alwaysNonSecure
        4.programControl

- UPDATE Demo/OVPsim*_arm_Cortex-A7UP demos have been updated to correctly build 
    and execute a Cortex-A7 application.
  
POWERPC32 Processor Model
-------------------------------------------------------------------------------
(following is also included in patched branch 20130630.2)
Model Enhanced to support instructions wrtee and wrteei
(following is also included in patched branch 20130630.4)
Added 2 new Parameters to control unimplemented instructions
UNIMP_TO_NOP, WARN_NOP
UNIMP_TO_NOP=True - map all unimplemented instructions to NOP
WARN_NOP=True     - warn on any mapped instructions to NOP
also all cache instructions have been mapped to NOP

Imperas ARM TrustZone Platform Modeling Application Note
-------------------------------------------------------------------------------
A new application note describing an efficient technique for modeling platforms
implementing ARM TrustZone-aware peripherals has been added. See:
  doc/appnotes/Imperas_ARM_TrustZone_Platform_Modeling_Application_Note.pdf
  
Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect operation when a breakpoint was
  placed in an ARM Thumb "if-then" block. Under some circumstances, instructions
  executed on resumption after the breakpoint would be executed unconditionally.
- A bug has been fixed which caused an assertion when simulating mask-generating
  floating point comparison operations (e.g. vmi_FQCMPEQ) with DAZ enabled in
  the floating point control word when one of the two operands is denormal.
- A bug has been fixed which caused incorrect behavior in 32-bit hosts for a
  64-bit integer divide-by-zero when the processor model integer exception
  handler returned VMI_INTEGER_CONTINUE.
(following is also included in patched branches 20130630.2/20130315.5)
- A bug has been fixed which caused incorrect behavior for indirect branch
  instructions in which the branch target register is the same register as the
  link register and the code block containing the branch instruction is
  physically-mapped (relocatable).
(following is also included in patched branches 20130630.2/20130315.6) 
- A bug which could in rare circumstances cause a crash on 64 bit hosts of a
  simulation using very large amounts of memory has been fixed.

New ArmVersatileExpress-CA9 Platform
-------------------------------------------------------------------------------
A new platform, ArmVersatileExpress-CA9, has been added to arm.ovpworld.org.
The new platform has the following changes:
- Explicitly identifies which ARM Versatile Express daughterboard (CA9) is being
  modeled. Other daughterboards are modeled in separate OVP platforms.
- Now models the TrustZone Peripheral Controller to allow restriction of
  non-secure accesses to certain peripherals
- Uses the iGen platform generator to create the platform from a tcl description
- Command line options have been enhanced to allow much more extensive control 
  of the simulation from the platform command line then the deprecated platform.
The existing ArmVersatileExpress platform has been deprecated. 

dynamicBridge peripheral
-------------------------------------------------------------------------------
A new dynamicBridge peripheral has been added which dynamically creates and 
removes a bridge between an input slave port and an output master port under  
control of an input net. This may be used for dynamically controlling access to
a peripheral for specific addresses, e.g. for Arm TrustZone implementations.

dummyPort peripheral
-------------------------------------------------------------------------------
The dummyPort peripheral has been moved from altera.ovpworld.org to ovpworld.org.
This should not require any changes to platforms using it unless the vendor
was explicitly specified.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmimtValidateBlockMaskR allows any processor register to be used
  for block mask validation. Previously, only a single 32-bit built-in block
  mask register was available.
- Function vmimtSync has been renamed vmimtYield, for consistency with the
  equivalent vmirtYield.
- New function vmimtInterrupt causes simulation to stop on completion of the
  current simulated instruction and return to the calling context (the
  icmSimulate or icmSimulatePlatform invocation).
- All floating-point morph-time SIMD functions now support any repeat in the
  range 1..16.
- New function vmimtAtomic can be used to specify that the current instruction
  must be executed atomically in a multiprocessor simulation.
 
VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmirtInterrupt causes simulation to stop on completion of the
  current simulated instruction and return to the calling context (the
  icmSimulate or icmSimulatePlatform invocation).
  
ICM API
-------------------------------------------------------------------------------
- ICM is now Version 2.0.0 :

- The callback for icmIterUserAttributes() now has an extra Boolean parameter,
  which is true if the attribute has been set in the platform.
  
- icmSetPlatformName has been deprecated.
  To initialize ICM and set the platform name, please use:
      icmInitPlatform(ICM_VERSION, simAttrs, protocol, port, platformName);
      
- ICM now strictly checks that an initialization function is called before
  other functions (and does not load the simulator until one of these functions
  is called).
  It is permissible to call any of these functions first:
      icmInit()               (deprecated)
      icmInitPlatform()       (replaces icmInit)
      icmSetEndSchedFn()      (deprecated)
      icmSetDebugNotifiers()  (replaces icmSetEndSchedFn)
      icmOverride()
      icmPrintf()
      icmMessage()
      icmIgnoreMessage()
      icmCLParser()
      icmCLParseStd()
      
- icmConnectProcessorNet(processor, net, portname, direction)
  and
- icmConnectPSENet(pse, net, portname, direction)
  These functions now ignore the direction argument. Please set this to 0.
  The direction is taken from the model.
- icmNewPSE(name, modelFile, attributelist, semiHostFile, semiHostSymbol)
  The semiHostFile argument is now not required in most cases because a peripheral model
  automatically loads its own extension library. 
  The semiHostSymbol argument is always ignored.
  
- ICM Command line parser has a new function which can be used to parse the command line
  when only standard arguments are required:
  icmCLParseStd(const char *exeName, icmCLPArgClass args, int argc, const char *argv)
  
  icmCLParser now takes an enumerated type to select which standard arguments to parse.

PPM API
-------------------------------------------------------------------------------
- The modelAttrs structure which was optional is now mandatory. It is used to:
  define bus ports, net ports and parameters used by the model, and to load
  the model's extension library if one is required.
  When created by igen, this structure is written automatically.
  Please refer to the documentation or, for an example, see
     Examples/Models/Peripherals/creatingDMAC/4.interrupt/dmac.attrs.igen.c

ARM Cortex Toolchain Support
-------------------------------------------------------------------------------
- The support makefile.include files, for example ARM_CORTEX_A15.makefile.include
  have been updated to support CodeSourcery Lite GCC toolchains release version
  2013.05-23 available from
  http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition
   
  
###############################################################################
##                                                                           ##
## Date 2013-October-14                                                      ##
##                                                                           ##
## Release 20130630.5                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect operation when a breakpoint was
  placed in an ARM Thumb "if-then" block. Under some circumstances, instructions
  executed on resumption after the breakpoint would be executed unconditionally.

ARM Processor Model
- The maximum value allowed by the simulation model for the 
  GICD_TYPER.ITLinesNumber field on the Cortex-A7 variant has been corrected to
  be 15 rather than 7.
  
###############################################################################
##                                                                           ##
## Date 2013-Sept-17                                                         ##
##                                                                           ##
## Release 20130630.4                                                        ##
##                                                                           ##
###############################################################################

POWERPC32 Processor Model
-------------------------------------------------------------------------------
Added 2 new Parameters to control unimplemented instructions
UNIMP_TO_NOP, WARN_NOP
UNIMP_TO_NOP=True - map all unimplemented instructions to NOP
WARN_NOP=True - warn on any mapped instructions to NOP
also all cache instructions have been mapped to NOP

###############################################################################
##                                                                           ##
## Date 2013-Sept-11                                                         ##
##                                                                           ##
## Release 20130630.3                                                        ##
##                                                                           ##
###############################################################################

POWERPC32 Processor Model
-------------------------------------------------------------------------------
Model Enhanced to support instructions wrtee and wrteei

###############################################################################
##                                                                           ##
## Date 2013-August-27                                                       ##
##                                                                           ##
## Release 20130630.2                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect behavior for indirect branch
  instructions in which the branch target register is the same register as the
  link register and the code block containing the branch instruction is
  physically-mapped (relocatable).
- A bug which could in rare circumstances cause a crash on 64 bit hosts of a
  simulation using very large amounts of memory has been fixed.

###############################################################################
##                                                                           ##
## Date 2013-July-30                                                         ##
##                                                                           ##
## Release 20130630.1                                                        ##
##                                                                           ##
###############################################################################

IMPERAS_PROXY_SERVER
-------------------------------------------------------------------------------
Some users reported that access through the IMPERAS_PROXY_SERVER was not 
working correctly. This was identified as the HTTP protocol not being
specified, this is now corrected

###############################################################################
##                                                                           ##
## Date 2013-July-08                                                         ##
##                                                                           ##
## Release 20130630.0                                                        ##
##                                                                           ##
###############################################################################

###############################################################################
##                                                                           ##
## Date 2013-August-23                                                       ##
##                                                                           ##
## Release 20130315.6                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
-------------------------------------------------------------------------------
- A bug which could in rare circumstances cause a crash on 64 bit hosts of a
  simulation using very large amounts of memory has been fixed.

###############################################################################
##                                                                           ##
## Date 2013-August-19                                                       ##
##                                                                           ##
## Release 20130315.5                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect behavior for indirect branch
  instructions in which the branch target register is the same register as the
  link register and the code block containing the branch instruction is
  physically-mapped (relocatable).

*******
PPM API
-------------------------------------------------------------------------------
- Added a Boolean artifactAccess to read and write callbacks. Use this to
  prevent side effects in peripherals when accessed by a debugger or the
  simulator reading ahead during code translation.
  (code written using callback macros need not be changed).

ICM API
-------------------------------------------------------------------------------
- Added a function icmOverride(const char *attributePath, const char *value)
  which has the same effect as (or overrides) icmAddStringAttr.
  Can be called after icmInit but before any objects are constructed, allowing
  attributes to be set separately from construction.
- Added standard command line parser.
  Functions:
    icmCLParser     create a parser
    icmCLParserAdd  add an argument top be parsed by the CLP
    icmCLParseArgs  parse an argc,argv list
    icmCLParseFile  parse a file of arguments (CpuManager only)
  These macros define prototypes for callbacks used by CLP:
    CLPA_BOOL_FN 
    CLPA_INT_FN 
    CLPA_UNS64_FN 
    CLPA_DOUBLE_FN 
    CLPA_STRING_FN
    CLPA_STRINGS_FN
- Added function icmAddBoolAttr(icmAttrListP list, Bool value) to support
  setting Boolean parameters on processors and peripherals.
- icmSetSchedFn has been deprecated; this new function replaces it:
      typedef struct icmDebugNotifierS { 
        icmStartSimFn     start;           // Called once at start of simulation
        icmEndSchedFn     sched;           // Called after each application
                                           // processor has run one time-slice
        icmEndSchedFn     schedPSE;        // Called after each PSE has run
        icmTimeAdvanceFn  advance;         // Called when time advances
        icmFinishFn       finish;          // Called once at end of simulation
        void              *userData;       // Passed to each callback
      } icmDebugNotifier, *icmDebugNotifierP;
      icmSetDebugNotifiers(icmDebugNotifierP notifiers)
- Symbol tables added by icmLoadSymbols are now considered for a possible match
  (for labels in trace and interception) *before* symbols implicitly added by
  icmLoadProcessorMemory; previously, the order was reversed. This affects the
  symbol selected when both symbol file and object file contain a candidate
  for a particular address.

Semihost libraries
-------------------------------------------------------------------------------
- Fixed bug that could cause an abort from a microblaze semihosted newlib
  function calls that returned an error.
- Revamped all newlib semihosting libraries to clean up error handling. The
  errno value is now set to the proper value when an error occurs for both
  reentrant and non-reentrant version of newlib.
- All newlib semihost libraries now use a single code base defined in:
    ImperasLib/source/ovpworld.org/semihostSupport/1.0/model/newlibSemihost.c.h
- All newlib semihost files now support interception of at least the following 
  functions:
        exit(), open(), close(), read(), write(), lseek(), fstat(), lstat(), 
        stat(), kill(), gettimeofday(), times(), unlink() and time()

TLM Processor Classes
-------------------------------------------------------------------------------
The following additional optional arguments have been added to the class 
constructors for the icmCpu class and each specific processor's SystemC  
TLM class:

        Uns32 addressBits (defaults to 32)
        bool  dmi         (defaults to true)
        Uns32 cpuFLags    (defaults to 0)

Previously these values could not be set from an instantiation of a processor
in a C++ or SystemC TLM platform. Now the user may specify the values to be 
used. (These have default values defined for them and thus are optional 
arguments, so no changes to existing platforms are necessary.)


doc/ovp/OVPsim_Using_OVP_Models_in_SystemC_TLM2.0_Platforms.pdf
-------------------------------------------------------------------------------
The example used in the SystemC TLM2.0 documentation has been enhanced to show
an example of driving a processor's reset input as well as specifying an 
attribute for a peripheral.

Some references to obsolete file names and function definitions have been 
cleaned up in this document.

C++ ICM C API Export
-------------------------------------------------------------------------------
Expanded the getPC and setPC functions to better support MP processors  

ARM Processor Model
-------------------------------------------------------------------------------
- Implemented an uncooked disassembly format to simplify downstream tools.
- The model has been updated to use the new floating point FPU configuration
  structure (see Simulator Core changes below)
- Fixed errors in names of 2 MPCore registers:
    ICCIDR  changed to ICCIIDR
    ICDGRPR changed to ICDISR
  (only cores where the version 1 GIC is present are affected: Cortex-A5* and
   Cortex-A9*)
- The SCTLR CP15 register RR field was incorrectly implemented as R/W. It is 
  now correctly implemented as RAZ/WI
- The SCTLR CP15 register Z field was incorrectly implemented as RAZ/WI. It is 
  now correctly implemented as RAO/WI

ARMM Processor Model
-------------------------------------------------------------------------------
- Implemented an uncooked disassembly format to simplify downstream tools.
- The model has been updated to use the new floating point FPU configuration
  structure (see Simulator Core changes below)
- Added read-only integration pseudo-register 'executionPRI', which gives the
  current processor execution priority.
- Added read-only integration pseudo-register 'stackDomain', which gives the
  memory domain used to store the stack with the current execution priority.
- Fixed bug that caused a hard fault to occur when interrupts were enabled 
  while an interrupt input was active but the interrupt was disabled.

MIPS Processor Model
-------------------------------------------------------------------------------
- The microMips32 FPU instructions are now supported.
- Implemented an uncooked disassembly format to simplify downstream tools.
- The model has been updated to use the new floating point FPU configuration
  structure (see Simulator Core changes below)
- On 4k-derived variants, mul instruction now properly leaves an intermediate 
  result in HI/LO registers.
- Divide by zero sets Hi/LO to predefined values, to match hardware.
- Some variants do not translate address of CACHE Index operations via TLB,
  thus not generating TLB exceptions. A "cacheIndexBypassTLB" parameter has
  been added to control this feature and set on the appropriate variants.
- Configuration of microAptiv and proAptiv updated to match hardware.
- COP0 Config4/Config5/Config6 implemented on appropriate variants.
- Fixed bug in UDI: inadvertent modification of register $zero.
- New attributes added for more detailed control of CPU configuration:
    config3BP, config3BI, config3VZ, config5NFExists, configMDU, 
    configMM, intctlIPFDC.
- Cache invalid tag changed to match the hardware (1 instead of all-ones).
- Corrected cache behavior when all lines are locked - using a direct 
  transaction to memory.
- Implemented cache WST and DYT operations.
- Added support for COP0 registers:
    BadInstr, BadInstrP, KScratch1-6, NestedEPC, NestedExc
- Reserved bits of SegCtl0-2 made read-only.
- Bits Status.SR and Status.RE changed to read-only.
- Fixed validation of EVA address.
- Fixed functions prologues: incorrect register bank selection.
- Fixed incorrect ISA mode switching on Debug exception.
- Take exception when a restricted instruction is executed in branch delay 
  slot.  Needed to match a real hardware.
- LLAddr register changed to match hardware (address is now left shifted by
  the cache line size bits.
- Registers SRSCtl and SRSMap made always available, but read-only until 
  enabled by SRSCtl.HSS.
- Multi-region SPRAM supported.
- When FTLB disabled, Config4.MMUExtDef and Config4.MMUConfig are set to 
  predefined value (not zero).
- Mode Config.MT==MT_FMM is supported as one of valid TLB MMU modes.
- Added parameter fcsrABS2008 (enables IEEE-754-2008 ABS/NEG behavior).
- Added parameter fcsrNAN2008 (enables IEEE-754-2008 recommended QNaN/SNaN
  format).
- Added parameter supportDenormals (indicates that the processor FPU is able
  to support denormal arguments and results instead of taking an Unimplemented
  Operation exception).
- Annulled delay slot instructions now do not cause fetch-related exceptions
  (e.g. TLB miss).

POWERPC32 Processor Model
-------------------------------------------------------------------------------
- The powerpc32_400 processor model has been added as a new processor model for
  vendor power.ovpworld.org. This model supports variants m440, m460, m470 and
  m476. Please examine the processor specific documentation for further 
  information.

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused the native MXCSR register not to be
  preserved over a call to icmSimulate or icmSimulatePlatform.
- A bug has been fixed which caused processor read and write abort handler
  functions to be called even when simulated exceptions are disabled. These
  functions are now called only if simulated exceptions are enabled.
- A bug has been fixed in which calls to icmSetProcessor*WatchPoint functions
  could cause a segmentation fault if executed before start of simulation.
- The way that component names are reported has changed. Previously, processor
  and peripheral names were sometime reported as a full hierarchical name,
  including the platform name, and sometimes reported as a non-hierarchical
  processor or peripheral name only. Now, names are always reported as full
  hierarchical names when a platform name has been set using icmSetPlatformName.
  Specifically, these cases are changed:
  - processor names in trace output are hierarchical;
  - processor name returned by vmirtGetProcessorName is hierarchical;
  - file names of peripheral replay files or peripheral output files are now
    the full hierarchical name with '/' characters converted to '_'.
  This has changed the specification of processor names in control files; do
  not put a leading '/' on a controlfile specification.
- A bug has been fixed that caused some underflow cases not to be reported for
  floating point operations using X87 types and some ternary operations.
- Semantics of floating-point ternary operations have been improved. Previously,
  with roundInt=False, these operations always performed calculations rounding
  intermediates to 80-bit precision. Now, when using IEEE argument types,
  multiply result intermediates are represented to infinite precision. This
  means that such operations now correspond to the IEEE fused-multiply-add
  definition.
- Environment variable IMPERAS_LOOP_ON_EXCEPTION has been added which, if set
  to 1, causes the simulator to enter a wait loop on an assertion failure or
  uncaught signal, allowing a debugger to be attached to the simulator
  process to debug the cause of the fault.

VMI API
-------------------------------------------------------------------------------
- Function of type vmiIFetchFn declared using the VMI_IFETCH_FN macro now takes
  an additional Boolean argument 'annulled' indicating whether the instruction
  fetch is for an annulled delay slot instruction.
- Functions of type vmiDisassFn and vmiosDisassFn declared using the
  VMI_DISASSEMBLE_FN and VMIOS_DISASSEMBLE_FN macros, respectively, now take
  an additional argument of type vmiDisassAttrs. This argument is one of:
      DSA_NORMAL    (indicating normal disassembly is required)
      DSA_UNCOOKED  (indicating "uncooked" disassembly is required)
      DSA_MODEL     (indicating other model-specific disassembly is required)
  "Uncooked" disassembly should return components of a decoded instruction in
  a form that can be easily parsed by intercept libraries.
- A Boolean field 'noTraceChange' has been added to the vmiRegInfo structure; if
  True, the associated register is not traced when change tracing is enabled.
- The arithmetic exception handler ('arithExceptCB' entry in the vmiIASAttrs
  structure) now handles integer exceptions only. Floating point exceptions are
  now routed to a new floating point exception handler 'fpArithExceptCB' of type
  vmiFPArithExceptFn in the processor FPU configuration (type vmiFPConfigCP).
- Types vmiNumericExceptionType and vmiNumericExceptionResult have been
  replaced with new types vmiIntegerExceptionType and vmiIntegerExceptionResult,
  clarifying the new behavior that the arithmetic exception handler is now
  called for integer exceptions only.
- QNaN result handler function types vmiFPQNaN32ResultFn and vmiFPQNaN64ResultFn
  now have additional 'allArgNum' and 'allArgs' arguments which are the total
  operand count for the floating point operation that generates a QNaN result
  and an ordered list of all operands, respectively.
- Tiny handler functions type vmiFPTinyResultFn and vmiFPTinyArgumentFn now have
  additional 'setFlags' arguments which can be used to specify additional
  floating point status flag settings when a floating point operation takes a
  tiny operand or generates a tiny result.
- Floating point type vmiFPNaNArg has been replaced with a more general type
  vmiFPArg. The name change reflects the fact that this type is now used to pass
  information about floating point arguments in general, not just NaN arguments.
  The 'isFlt32' field has been replaced with a more general 'type' field,
  allowing the argument value to be fully interpreted.
- Arguments of type vmiFP80Arg in indeterminate result handlers have been
  changed to type vmiFPArg for consistency with QNaN result handlers.
- Member vmi_FT_64_UNS has been added to enumeration vmiFType, enabling
  conversion between floating point and Uns64 types.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- All floating-point morph-time functions have been updated to take an
  additional 'config' argument of type vmiFPConfigCP, allowing operation details
  to be modified on an operation-specific basis.
- Operations vmi_QABS and vmi_QNEG have been added to the vmiFUnnop enumeration,
  implementing IEEE 754-2008 operations that affect sign bit only and do not
  generate exceptions.
- Operations vmi_FROUNDC and vmi_FLOG2 have been added to the vmiFUnnop
  enumeration.
- vmiFUnnop member vmi_FROUND has been renamed vmi_FNEAREST to make it clear
  that the rounding mode used is round-to-nearest.
- Operations vmi_FMIN, vmi_FMAX, vmi_FSCALEF and vmi_FSCALEI have been added to
  the vmiFBinop enumeration.
- Operations vmi_FQCMPEQ...vmi_FQCMPNOR have been added to the vmiFBinop
  enumeration (quiet comparisons producing bitmask result).
- Operations vmi_FSCMPEQ...vmi_FSCMPNOR have been added to the vmiFBinop
  enumeration (signaling comparisons producing bitmask result).
- Function vmimtFConvertSimdRR has been added (performs SIMD floating point
  conversions).

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Function vmirtDisassemble now takes an additional argument of type
  vmiDisassAttrs, indicating the required form of the disassembled instruction
  (see above).
- Function vmirtConfigureFPU has been modified to take an argument of type
  vmiFPConfigCP to specify the FPU configuration.
- Function vmirtRestoreFPState has been added, allowing embedded functions to
  obtain a clean environment in which to execute floating point operations.
  Failure to call this prior to execution of floating point code in the embedded
  call could cause the results of that floating point code to be affected by
  simulator floating point instructions executed on the processor making the
  embedded call.

Environment
-------------------------------------------------------------------------------
- A new environment variable, IMPERAS_SHRSUF, has been added to select the file
  extension for shared objects, either Windows dll or Linux so

Build Support Infrastructure
-------------------------------------------------------------------------------
- The build support directory has been moved out of the source directory.
  Files that were found at ImperasLib/source/buildutils can now be found at
  ImperasLib/buildutils 

Example/Platforms/interruptSimulation
-------------------------------------------------------------------------------
- This example was incorrectly using icmInterrupt in a memory callback to 
  interrupt the simulation. In a memory callback, or similar, icmYield should 
  be used to interrupt the simulation. icmInterrupt should only be used in a 
  Control-C handler or similar callback.

###############################################################################
##                                                                           ##
## Date 2013-June-24                                                         ##
##                                                                           ##
## Release 20130315.4                                                        ##
##                                                                           ##
###############################################################################

ARM Processor Model
-------------------------------------------------------------------------------
- The model has been updated to reflect a change in section B3.5.3 of the ARM
  Architecture Reference Manual. Version C of this manual stated that for first
  level page table descriptors with NS=1, the page table is located in
  non-secure memory. Version C.b of this manual states that for such first level
  page table descriptors, the page table is located in physical memory implied
  by the security state in force during the page table walk.

###############################################################################
##                                                                           ##
## Date 2013-May-14                                                          ##
##                                                                           ##
## Release 20130315.3                                                        ##
##                                                                           ##
###############################################################################

ARMM Processor Model 
(These changes failed to make the release branch for the 20130315.2 build)
-------------------------------------------------------------------------------
- Change default callback when reading memory mapped system registers to handle
  any data size
- Modify exception handling to report pending but disabled interrupt in ICSR

###############################################################################
##                                                                           ##
## Date 2013-May-10                                                          ##
##                                                                           ##
## Release 20130315.2                                                        ##
##                                                                           ##
###############################################################################
 
ARM and ARMM Processor Models
-------------------------------------------------------------------------------
- A bug in handling Thumb if-then state has been fixed. The symptom was that
  unconditional Thumb instructions would occasionally be skipped as if they
  were located in if-then blocks.

###############################################################################
##                                                                           ##
## Date 2013-April-15                                                        ##
##                                                                           ##
## Release 20130315.1                                                        ##
##                                                                           ##
###############################################################################

ARMM Processor Model
-------------------------------------------------------------------------------
- Change default callback when reading memory mapped system registers to handle
  any data size
- Modify exception handling to report pending but disabled interrupt in ICSR
  
###############################################################################
##                                                                           ##
## Date 2013-March-15                                                        ##
##                                                                           ##
## Release 20130315.0                                                        ##
##                                                                           ##
###############################################################################

SmartLoaderArmLinux peripheral reworked
-------------------------------------------------------------------------------
The SmartLoaderArmLinux peripheral in arm.ovpworld.org has been completely
reworked to make it both more flexible and clearer.

- A new attribute "bootaddr" has been added that specifies the address to jump
  to from the tiny boot loader code generated by SmartLoaderArmLinux. If not 
  specified the image load address is used.
- The "bootcode" attribute has been removed. Use "bootaddr" instead.
- The tiny boot code created by SmartLoaderArmLinux is now called first and 
  then jumps to the boot address ("bootaddr" or the image file load address)
  with the registers configured for the Linux Kernel call.
- The address to load the kernel and initrd image files may be specified with 
  new "kerneladdr" and "initrdaddr" attributes
- The "nbcpus" attribute has been removed (it was always ignored)

MIPS Processor model Config5/6 register definition fixes
-------------------------------------------------------------------------------
- Config5.M bit is now always 0, per the Architectural specification
- Config6 register is now properly present on the 74K/1074K/proAptiv variants
  and has the correct power on value
  
Internet Proxy Server
-------------------------------------------------------------------------------
The update checker can now access through a proxy server, for installations
which do not have direct access to the web. If the server name is proxy.com and
the port is 3128, setting the following variable will use the proxy server for
web access
export IMPERAS_PROXY_SERVER=proxy.com:3128

Preliminary Altera CycloneV platform added
-------------------------------------------------------------------------------
A preliminary implementation of the Altera CycloneV socfpga has been added to
altera.ovpworld.org/platform/AlteraCycloneV. It has sufficient functionality 
to boot a Linux kernel on the ARM Cortex-A9 HPS but most peripherals are
not modeled.

Handling of signals in OVPsim
-------------------------------------------------------------------------------
- Fixed bug which prevented SIGINT from interrupting simulation when RSP is
  active.
  
RSP (GDB) debugging
-------------------------------------------------------------------------------
- Processor names longer than 64 characters could cause premature exit of the
  simulator. This has been fixed.
- When simulator stops and passes control to GDB, the wrong thread could be
  selected. This has been corrected.
- OVPsim now supports GDB hardware watchpoints created using the GDB
  watch, rwatch and awatch commands.
  
OVPsim_linux_ArmVersatileExpress_arm_Cortex-A9MP Demo
-------------------------------------------------------------------------------
- The OVPsim_linux_ArmVersatileExpress_arm_Cortex-A9MP demo has been updated to
  include version 3.7.1 of the Linux kernel built using the vexpress_defconfig
  configuration.

MIPS Processor Model
-------------------------------------------------------------------------------
- Added FPU2008 support
- Added new parameters: configSB, config1WR, config3ITL, firHas2008, 
  pridRevision and intctlIPTI
- Added support for the WST mode INDEX_LOAD_TAG and INDEX_STORE_TAG cache ops
  to the cache model.
- Set ISA mode on debug exception.
- Set BadVAddr on EVA address exception.
- Added CMP registers to register view.
- GIC_CounterLo/GIC_CounterHi values have been modified so that values are
  common across all VPEs in a cluster (previously, different VPEs could see
  different values for these registers).
- Size of registers communicated to GDB has been corrected (all 32-bit on
  MIPS32, all 64-bit on MIPS64).
- interAptiv variant's Config5.M bit changed from 1 to 0 to match specification.

ARM Processor Model
-------------------------------------------------------------------------------
- Modification of mode bits by register write in Hypervisor mode has been
  enabled (this is officially unpredictable but Linaro appears to rely on this
  behavior).
- Event streams have been added to the Generic Timer model.
- Parameter override_genericTimerScale has been added to allow the rate at which
  Generic Timer counters increment to be specified as a fraction of the
  processor MIPS rate. Default value of 20 for Cortex-A7 and Cortex-A15 variants
  implies Generic Counter timers increment once every 20 instructions
  (previously, the counters incremented every instruction).
- Added non-functional ACTLR2 register to Cortex-A15 configuration.

ARMM Processor Model
-------------------------------------------------------------------------------
- Register sp_main has been added to the register view.
- Modified the GDB interface so that the 'fps' register is always passed even 
  if VFP is not present.
- Modified the GDB interface so that archaic floating point registers f0-f7 are
  passed in the "g" packet (matching ARM model interface).

ARC Processor Model
-------------------------------------------------------------------------------
- Modified the debug register interface so that build configuration registers
  are exposed.

ICM C++ Interface
-------------------------------------------------------------------------------
- Added method icmProcessorObject::interrupt() allowing processors to be
  interrupted.
- Deleted method icmProcessorObject::loadNativeMemory() with dubious semantics.
  Use icmProcessorObject::loadLocalMemory() instead.
- A bug has been fixed in the MMC C++ wrapper which caused transactions of
  greater than 4 bytes to be silently discarded.

ICM API
-------------------------------------------------------------------------------
- icmMemNotifierFn prototype had its first two arguments reversed.
  The definition and documentation has been corrected; the functionality remains the same.
  (processor is first, watchpoint second).
- icmMapNativeMemory now includes an icmPriv argument enabling the access
  permissions if the mapped memory to be specified.
- Requests to interrupt simulation using icmInterrupt will now not be routed
  to an attached debugger but instead always cause return from icmSimulate or
  icmSimulatePlatform with a stop reason of ICM_SR_INTERRUPT.
- Moved declaration of icmMapExternalMemory to icmConstruct.h for clarity.
- The values returned by icmGetExceptionInfoCode() for the arm processor model have
  changed. Previously the vector offset used by the exception was returned. Now a
  unique code is returned instead. See the model specific processor documentation
  for the values returned for a given processor.
- Changes to functions for processor introspection:
    deleted function
       icmGetProcessorProcdoc()
    new functions
       icmGetProcessorGroupH()
       icmGetProcessorGroupL()
       icmGetProcessorVariant()
- Stop reasons ICM_SR_RD_ABORT, ICM_SR_WR_ABORT and ICM_SR_FE_ABORT have been
  added to specify read abort, write abort or fetch abort generated by calls to
  icmAbortRead or icmAbortWrite. Previously, stop reasons ICM_SR_RD_PRIV or
  ICM_SR_WR_PRIV were returned.
- Added status argument to icmFinish (see icmGetStatus below).
- Added function icmGetStatus which returns any status code passed by a
  previous call to icmFinish or vmirtFinish.
- Function icmLoadNativeMemory with dubious semantics has been deleted. Use
  icmLoadProcessorMemory or icmLoadBus instead.
- The object reader function type ordSectionCB now requires an additional
  PAtoVA argument. If non-zero, this specifies the displacement from the
  physical section address to virtual symbol addresses in that section. When
  virtual and physical addresses match, the value should be zero. The version
  number ICM_OBJREADER_VERSION has been incremented to reflect this change.

VMI API
-------------------------------------------------------------------------------
The version of the VMI API has been changed. There are two effects:
- You will need to recompile any model or intercept object that uses VMI.
- It is now strongly recommended that fields in the VMI model attributes table
  are initialized by name rather than by position. Thus:
    .versionString  = VMI_VERSION,          /// version string 
    ...
    .constructorCB  = constructor,          // object constructor
    ...
    .intercepts = {
    ...  
- Two new entries of type vmiStartEndBlockFn have been added to the processor
  vmiIASAttrs structure. If non-NULL, startBlockCB is called just before
  translation of a new code block is started. If non-NULL, endBlockCB is called
  just after translation of a new code block has completed. The functions can be
  used to initialize and finalize data structures required during translation of
  a code block.
- A new entry postOpaqueCB of type vmiPostOpaqueFn has been added to the
  processor vmiAttrs structure. If non-NULL, this function is called in place of
  the morphCB for every instruction that has been opaquely intercepted. The
  purpose of the function is to allow processor state to be updated even if
  the instruction implementation is elsewhere.
- New vmiCache.h and vmiCacheAttrs.h headers have been added which define an
  interface to enable/disable and register callbacks for cache models integrated
  in a processor model. Note that currently only the MIPS32 model has an
  integrated cache model.
- A new entry of type vmiCacheRegisterFn has been added to the processor
  vmiAttrs structure to support model-specific registration of cache functions.
- The contents of the structure vmiProcessorInfo has changed. See
  vmiModelInfo.h for details.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Functions vmirtGetRegGroupByName and vmirtGetNextRegGroup have been added,
  allowing access to processor register groups from intercept libraries.
- Function vmirtGetNextRegIntGroup has been added, allowing iteration of
  processor registers by group.
- Functions vmirtGetCurrentMode and vmirtGetNextMode have been added, allowing
  access to processor modes from intercept libraries.
- Functions vmirtGetCurrentException and vmirtGetNextException have been added,
  allowing access to processor exceptions from intercept libraries.
- Function vmirtCacheRegister has been added to support registration of cache
  simulation functions.
- An additional 'scale' argument has been added to vmirtCreateModelTimer,
  allowing timers to be defined that operate at a fraction of processor MIPS
  rate. For example, scale=0 indicates the timer increments once every
  simulated instruction (the original mode); scale=8 indicates the timer
  increments once every (1<<8) = 256 instructions.
- Function vmirtGetModelTimerICount has been replaced with a new function
  vmirtGetModelTimerCurrentCount. The new function takes a 'ticks' argument
  which indicates whether the returned value should be in timer ticks (True)
  or processor instructions (False).
- Function vmirtGetModelTimerIDelta has been replaced with a new function
  vmirtGetModelTimerExpiryCount. The new function returns an absolute count
  instead of a delta and takes a 'ticks' argument which indicates whether the
  returned value should be in timer ticks (True) or processor instructions
  (False).
- A new 'scope' argument has been added to functions vmirtAddReadCallback,
  vmirtRemoveReadCallback, vmirtAddWriteCallback, vmirtRemoveWriteCallback, 
  vmirtAddFetchCallback and vmirtRemoveFetchCallback. If the argument is NULL,
  these functions behave as in previous VMI versions; if the argument is
  non-NULL, the callback called only when accesses are made by the given scope
  processor.
- Function vmirtGetSymbolLoadAddr has been added which returns the load address
  of a symbol.
- Function vmirtAddressLookup has been corrected so that it now always returns
  the load address of a symbol, not the virtual address.
- Implementation of Symbol Table Access and Dwarf Line Number Information
  Access routines has been extensively revised and improved. This corrects
  various obscure issues which caused symbol and line lookups to fail in some
  circumstances.
- Added new vmiMessage severity level "T" for Trace.
  
Simulator Core
-------------------------------------------------------------------------------
- An obscure bug has been fixed that caused bad code to be generated for divide
  instructions targeting the first word of a processor structure.
- Registers declared using VMI_TEMP are now written back to the processor
  structure before a divide operation, even if those registers do not appear
  to be subsequently used. This change means that temporary values are always
  valid within arithmetic exception handlers.
- A bug has been fixed that caused an abort when a register change callback is
  installed on the program counter and a block is executed with incorrect
  processor block mask, causing the block to be regenerated.
- The simulator main scheduler loop has been improved to give up to 25% faster
  performance for a single-instruction slice. When simulating multi-thread
  processors (e.g. MIPS 34Kc) the scheduling order of the individual threads is
  slightly different in some circumstances.
- A bug has been fixed which caused hierarchical object names to sometimes be
  reported with a leading slash character (e.g. /cpu0). These will now be
  correctly reported either with no platform name (e.g. cpu0) or with a prefixed
  platform name (e.g. platform1/cpu0).

SystemC TLM2.0 Processor Interface Thread
-------------------------------------------------------------------------------
- The icmCpuThread that calls simulate for an OVP Fast Processor model now 
  calls wait(sc_core::SC_ZERO_TIME) for an initial wait. This gives better 
  SystemC simulation startup characteristics.
 

###############################################################################
##                                                                           ##
## Date 2012-December-12                                                    ##
##                                                                           ##
## Release 20121212.0                                                        ##
##                                                                           ##
###############################################################################

ARM MMCI PL181 Peripheral Model
-------------------------------------------------------------------------------
- This model is now largely moved from PSE to native host code. The PSE still 
  provides the register interface and programmers view. The behavior is now 
  implemented as native host code. This has greatly improved the SD Card data
  read performance. In simulation it has been shown to run substantially 
  faster when booting the Android operating system from an SD Card. 

MICROBLAZE Processor Model
-------------------------------------------------------------------------------
- Enhanced the Exception information to expose all of the exception types 
  described in the System Register ESR[EC]

V850 Processor Model
-------------------------------------------------------------------------------
- Fixed an issue where 32 bit fetches performed a 2byte fetch followed by a 4
  byte fetch at the same address. This is now performed as 2x2byte fetch.
  The TLM wrapper may need enhancing to perform 4byte accesses and caching
  internally for 2byte access
- Fixed a bug where pending interrupts are not processed whenever a reti or ei
  instruction is executed. Writes to the PSW register affecting the ID bit,
  also cause pending interrupts to be re-evaluated

MIPS processor Model
-------------------------------------------------------------------------------
- Corrected a bug which caused writes to COP0 registers on a MIPS64 processor
  using the debug register interface to truncate written values to 32 bits.
- Added new parameters configKU and configK23 to allow overriding of the power 
  on values for the K0 and K23 fields of the COP0 Config register.
- Implemented merging of timer interrupt and external hardware interrupts in
  compatibility and vectored interrupt modes: previously, changes to either
  interrupt would cause an asserted interrupt from the other source to be lost.
- Debugger accesses to the Count and Random registers have been corrected so
  that the processor state is not perturbed.
- The debug register interface has been upgraded to support save/restore
  (Imperas Professional Tools only).
- Deleted obsolete COP0 register programmers view objects (use debug register
  interface instead).
- fixed several errors in SPRAM modeling: multiple regions now handled
  correctly and SPRAM memory is now properly written on INDEX_STORE_DATA
  and read on ISPRAM INDEX_LOAD_TAG
- The 34K variants no longer give a fail on an SC instruction when the 
  underlying memory has been modified by a different processor. A message 
  will be issued in this case. Note that modifications by other VPEs in the 
  same processor will still properly generate SC fails.

ARM Processor Model
-------------------------------------------------------------------------------
- Configurations have been added for variants Cortex-A15 and Cortex-A7
- Corrected a GIC bug related to acknowledgment of externally-asserted
  level-sensitive interrupts: these should become active and pending (not
  active).
- Corrected a GIC bug related to behavior of GICD_ISPENDR and GICD_ICPENDR for
  externally-asserted level-sensitive interrupts: these should be left pending
  if de-asserted.
- Corrected a GIC bug that prevented IRQ and FIQ interrupts being raised by
  writes to GICD_ISPENDR0.
- Corrected a GIC bug that prevented pre-emption of group 1 interrupts when
  using GICC_ABPR in some circumstances.
- Modified unpredictable result of MRS instruction in User or System mode to
  return 0 instead of CPSR.
- Made CBAR accessibility implementation-specific.
- Added non-functional stubs for Cortex-A5 implementation-specific registers
  allowing direct access to internal memory.
- Added override_SCTLR_CP15BEN_Present parameter, which enables the CP15BEN bit
  in the SCTLR register.
- Various parameters defined as integers with a valid range of 0..1 have been
  redefined as Booleans.
- Added an artifact register 'transactPL' that returns the privilege level of
  any active memory transaction (PL0, PL1 or PL2). This is usually the current
  processor privilege level, but can be PL0 if the processor is at PL1 and
  performing an LDRT/STRT instruction. This register is intended for use in
  memory callbacks that need to assemble transaction information (for example to
  emulate the ARM1176 AxPROT signals).
- Corrected a bug that caused values for 2-word coprocessor registers to be
  incorrect when viewed through the debug register interface.
- Corrected a bug that caused incorrect values to be returned for some banked
  registers using the debug register interface in Monitor mode when SCR.NS=1.
  Values are always now returned for the current security state.
- Corrected a bug that caused VFP rounding control and FTZ mode to be set
  incorrectly if FPSCR is updated when VFP is not enabled.
- Added secure and non-secure coprocessor register groups to the debug register
  interface for registers that are banked between secure and non-secure states.
- The debug register interface has been upgraded to support save/restore
  (Imperas Professional Tools only).
- Deleted obsolete coprocessor register programmers view objects (use debug
  register interface instead).

ARMM Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed causing incorrect behavior when the number of interrupts
  was specified to be more than 16.
- A bug has been fixed which caused CONTROL.FPCA to remain unset on completion
  of a floating point instruction in some circumstances on variants that support
  floating point.
- The debug register interface has been upgraded to support save/restore
  (Imperas Professional Tools only).
- Deleted obsolete system register programmers view objects (use debug register
  interface instead).

amd.ovpworld.org/peripheral/79C970 NIC model
-------------------------------------------------------------------------------
- Fixed bug seen when transmitting a packet length > 1500 bytes, causing
  infinite loop. Exposed by using NFS over Ethernet.

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused reported times to be occasionally inaccurate
  on Windows32 and Windows64 hosts.
- A bug has been fixed that caused a crash in vmirtAliasMemory when the physical
  domain region being aliased to contained multiple aliases of another region.
- A bug has been fixed that caused attempts to yield execution using icmYield
  to be ignored.
- A bug has been fixed that caused conditional branch-and-link instructions 
  generated by vmimtCondJumpReg occasionally to branch the wrong way when
  executing a physically-mapped code block.
- A bug has been fixed that caused indirect jumps to be work incorrectly for
  processors with 32-bit virtual address spaces and 64-bit physical address
  spaces.

ICM API
-------------------------------------------------------------------------------
- The behavior of icmAddReadCallback and icmAddWriteCallback has been changed
  so that the callback is associated with the processor physical data bus
  instead of the virtual data bus.
- Function icmAddFetchCallback has been added, allowing fetch accesses made on
  a processor physical instruction bus to be monitored by a callback.
- Functions icmAddBusReadCallback, icmAddBusWriteCallback and
  icmAddBusFetchCallback have been added which allow read, write or fetch
  accesses occurring on any bus to be monitored.
- Callbacks installed using any of the above-listed functions are now called
  only once for each domain in which they are installed. Previously, it was
  possible to have multiple calls per domain if the domain contained several
  bridges to a common underlying physical domain.
- Deprecated function icmInFetchContext has been modified to take a processor
  argument instead of implicitly operating on the current processor.
- Function icmGetRegInfoReadOnly has been deprecated: use new function
  icmGetRegInfoAccess instead which returns full accessibility information.
- New member ICM_ATTR_TRACE_CHANGE has been added to the icmNewProcAttrs
  enumeration, enabling tracing of all changed register values after every
  instruction.
- The function icmYield has been altered so that it no longer passes a SIGTRAP
  to an attached GDB but rather returns from simulation with a return cause
  set to ICM_SR_YIELD without affecting the GDB state.

VMI API
-------------------------------------------------------------------------------
- Save and restore callback functions have been added to the processor vmiAttrs
  structure to support processor model save and restore (under development).
- Register encoding of the vmiReg type has been modified so that a zeroed-out
  value is interpreted as VMI_NOREG, which is more intuitive than the original
  encoding.
- The format of the vmiRegInfo type has been updated as follows:
  1. Fields have been reordered more logically.
  2. The 'readonly' Boolean member has been replaced with an enumeration of type
     vmiRegAccess, allowing write-only access to be specified.
  3. A new 'noSaveRestore' Boolean member has been introduced which is used to
     specify registers that should not be automatically saved and restored.
  4. A new 'raw' field of type vmiReg has been introduced, allowing raw access
     to registers using the debug interface to be more easily described (a raw
     access is one that does not require a callback function). Previously, raw
     access could only be specified using special callback functions
     VMI_REG_RAW_READ_CB and VMI_REG_RAW_WRITE_CB and a special value of the
     'userData' field. This change allows raw access to registers for which
     'userData' is also required for another purpose.
  For future compatibility, please use named fields when filling vmiRegInfo
  structures.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Functions vmirtGetRegByName, vmirtRegRead and vmirtRegWrite have been added
  which behave identically to the previously-existing vmiosGetRegDesc,
  vmiosRegRead and vmiosRegWrite. The old vmios functions have been deleted and
  aliased to the new vmirt functions using #define. This change has been made
  because register access has more general applicability than semihosting
  support.
- Function vmirtGetNextReg has been added to allow iteration of processor
  registers.
- Function vmirtIterAllProcessors has been added, which applies a callback to a
  given processor and all its descendants.
- Functions vmirtSave and vmirtRestore have been added to support save and
  restore of model-specific items (Imperas Professional Tools only).
- Functions vmirtSaveModelTimer and vmirtRestoreModelTimer have been added to
  support save and restore of processor timers (Imperas Professional Tools
  only).
- Functions vmirtGetPostSlotCB and vmirtSetPostSlotCB have been added to support
  save and restore of post-delay-slot callback functions (Imperas Professional
  Tools only).
- Functions vmirtIsModelTimerEnabled, vmirtGetModelTimerICount and
  vmirtGetModelTimerIDelta have been added, allowing timer state to be queried.
- Obsolete function vmirtUns64FlagByName has been deleted. Use
  vmirtProcessorFlags instead.
- Obsolete function vmirtInstallNetCallback has been deprecated and should not
  be used. Port lists should be specified using the net port specification
  methodology described in the VMI Run Time Function Reference manual instead.
- Obsolete functions vmirtConceal and vmirtReveal have been deleted.

BHM API
-------------------------------------------------------------------------------
- Function Bool bhmBoolAttribute(const char *name)  has been added
  which can be used to fetch a two value attribute from the platform.
  Returns the Boolean value if set, false if not set.
- A PSE must define its interfaces with an attributes table similar to a
  processor. See Examples/Models/Peripheral/creatingDMAC

###############################################################################
##                                                                           ##
## Date 2012-September-06                                                    ##
##                                                                           ##
## Release 20120906.0                                                        ##
##                                                                           ##
###############################################################################

ARM Processor Model
-------------------------------------------------------------------------------
- MPCore debug messages have been improved.

Microblaze Processor Model
-------------------------------------------------------------------------------
- Added Exceptions for Instruction Bus Error and Data Bus Error

ICM API
-------------------------------------------------------------------------------
A discrepancy in the naming of parameters in icmBridgeBuses has been corrected.
The prototype is now :

void icmBridgeBuses (
    icmBusP slave, icmBusP master,
    Addr lowAddrSlave, Addr highAddrSlave, Addr lowAddrMaster
);
Note that the names have changed to reflect their true meaning though a program
which uses this function does not need to be changed.
 
SystemC TLM Demos and Examples
-------------------------------------------------------------------------------
- The release of the OSCI systemc-2.3.0 simulator, has added support for the 
  MinGW Compiler under Windows. In response to this, all of the SystemC TLM 
  Demos (Imperas/Demos) have been modified to use the link library built using
  the MinGW compiler.
  We will continue to supply an example which compiles using the MSVC compiler
  in addition to the MinGW compiler

AMD 79C970 NIC model
-------------------------------------------------------------------------------
- Fixed a bug in amd.ovpworld.org/peripheral/79C970/1.0/pse/net.c where the
  value specified with the MAC attribute was not converted to the correct MAC
  address.

Corrected name of Philips USB Model
-------------------------------------------------------------------------------
- The Philips USB device model is now correctly named in the VLNV library as
  philips.ovpworld.org/peripheral/ISP1761/1.0

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Arguments to vmirtAliasMemoryVM and vmirtUnaliasMemoryVM have been modified:
  what was previously a Boolean argument, isGlobal, is now an Uns32 argument,
  ASIDMaskOrG. This change enables easier implementation of processor models
  that support hypervisors.
- Exception handling routines of types vmiRdAlignExceptFn and vmiWrAlignExceptFn
  have been enhanced so that they are passed the memory domain of the failing
  access.
- The functions vmirtPlatformStringAttribute and vmirtPlatformUns64Attribute
  have been un-deprecated, as they are still needed to allow intercept libraries
  to get attribute information for a processor model.

New Demo for eCos real-time operating system
-------------------------------------------------------------------------------
- The demo OVPsim_eCos_ArmIntegratorCP provides a number of examples compiled
  with the eCos operating system and running on an ARM920T on the Arm 
  Integrator Compact Platform.

C++ Wrapper
------------------------------------------------------------------------------- 
- Fixed icmPlatform constructor/destructor to support delete/new for
  icmPlatform objects (equivalent to calling icmTerminate followed by icmInit).
  Note only one platform may exist at a time. 

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused an artifact access to an unmapped memory
  address to cause a processor to take a data abort exception (for example,
  a read or write by a debugger).
- A bug has been fixed that caused vmirtGetDomainMappedASID to return
  ASID_MAP_ACTIVE or ASID_MAP_INACTIVE for virtual memory pages that have been
  unmapped: these now always return ASID_MAP_NONE.
- A bug has been fixed that occasionally caused breakpoints on virtual addresses
  to be ignored if those virtual addresses correspond to physical addresses for
  which there is another virtual mapping with no breakpoint.
- A bug has been fixed that caused occasional stack misalignment errors on
  64-bit hosts.
- A bug has been fixed that caused occasional assertion on 64-bit hosts for an
  out-of-range jump.
- A bug has been fixed that caused segmentation faults when addressing outside
  the implemented range of a physical bus (for example, reading or writing an
  address with bit 29 set when a bus of width 28 bits has been connected to
  the processor data port). Such loads or stores wrap into the implemented
  memory range.
- Environment variable IMPERAS_BACKTRACE has been added. When set to 1, this
  causes a backtrace to be generated for an assertion or uncaught signal (on
  Linux hosts only). This can be used to help locate the code causing the
  assertion or signal.

###############################################################################
##                                                                           ##
## Date 2012-September-07                                                    ##
##                                                                           ##
## Release 20120614.8                                                        ##
##                                                                           ##
###############################################################################

ARM Processor Model
-------------------------------------------------------------------------------
- Major revision of GIC implementation to correct non-secure state views for
  many distributor and CPU interface registers.
- Memory type attributes in TLB entries are now filled at entry creation
  (previously, attributes were created on demand when required for address
  translation functions, with the effect that badly-written applications that
  modify PRRR or NMRR without flushing the TLB could see values returned in
  the PAR that differ from hardware).
- Fault status is now correctly reported for debug events resulting from BKPT
  instruction execution.
- Exception return instructions have been corrected to set the event register.
- Coprocessor registers have been divided into 32-bit and 64-bit groups when
  viewed through the register access API.
- Incorrect write mask for ACTLR in Cortex-A5 variants has been fixed.
- Cortex-A5/Cortex-A9 global timer has been modified so that it increases
  monotonically for all processors in a cluster.
- Fixed a bug that caused the global timer Counter and Comparator registers 
  to be described in the processor specific model documentation and debug 
  interface as 32-bit registers when they are in fact 64-bit registers, and
  also reads and writes using icmReadReg/icmWriteReg to affect only the least
  significant 32-bits of these registers.
- Fixed a bug in the GIC that caused all but one of multiple concurrent SGI
  interrupts with the same target CPU and interrupt number but different source
  CPU to be discarded.

###############################################################################
##                                                                           ##
## Date 2012-August-29                                                       ##
##                                                                           ##
## Release 20120614.7                                                        ##
##                                                                           ##
###############################################################################

ARM Processor Model
-------------------------------------------------------------------------------
- Fixed a bug that caused the global timer Counter and Comparator registers 
  to be described in the processor specific model documentation and debug 
  interface as 32 bit registers when they are in fact 64 bit registers.

Processor Model Xilinx MicroBlaze
-------------------------------------------------------------------------------
- The 'Reset' input to the Xilinx MicroBlaze processor model did not allow 
  for the processor to be held in reset. This is corrected. An active high 
  reset signal will now hold the processor in a reset state.
- Fixed a bug with the interrupt handling for Level sensitive interrupts not
  causing the interrupt handler to be called

TLM2 Interface File Semihost Disable
-------------------------------------------------------------------------------
- The generated interface files for the processor models now allow the 
  semihosting to be disabled by setting the argument to "" (empty string) 

###############################################################################
##                                                                           ##
## Date 2012-August-17                                                       ##
##                                                                           ##
## Release 20120614.6                                                        ##
##                                                                           ##
###############################################################################

ELF Loader
-------------------------------------------------------------------------------
- The 32 & 64 bit ELF loaders now load sections with header types 14, 15 & 16
  corresponding to 3 kinds of array initializer supported by some compilers.
  
- Option ICM_ZERO_BSS to icmLoadProcessorMemory and icmLoadBus allow the BSS
  section to be filled with zeros. See icmLoaderAttrs in icmTypes.h
  Note that the ICM C++ API and custom loader API have also changed,
  though the existing C++ methods remain.

###############################################################################
##                                                                           ##
## Date 2012-July-25                                                         ##
##                                                                           ##
## Release 20120614.5                                                        ##
##                                                                           ##
###############################################################################

V850 Processor Model
-------------------------------------------------------------------------------
- Fixed a problem with the V850E1F Variant when performing FP operations 
  writing to register R0
- Fixed Decoding error for the DIVF.S instruction

OVP License Date Server Access
-------------------------------------------------------------------------------
- The format from the date server used by OVPsim changed and introduced an 
  error that made the date lookup, and hence license check, fail.
  
###############################################################################
##                                                                           ##
## Date 2012-July-16                                                         ##
##                                                                           ##
## Release 20120614.4                                                        ##
##                                                                           ##
###############################################################################

ARMM Processor Model
-------------------------------------------------------------------------------
- Reset signal is now level-sensitive (processor will remain halted while reset
  is high).
- Fixed a bug in memory-mapped system register handling that caused side effects
  on debugger accesses (specifically, reads of SYST_CSR).

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused virtual-to-physical address mapping errors
  when a processor switched mode using vmirtSetMode when in both the old and new
  modes the execution address was in the same virtual page, but this page had
  different physical mappings in each mode.

###############################################################################
##                                                                           ##
## Date 2012-July-13                                                         ##
##                                                                           ##
## Release 20120614.3                                                        ##
##                                                                           ##
###############################################################################

GDB Interface
-------------------------------------------------------------------------------
- Fixed a bug in the GDB interface that made memory addresses that are mapped 
  to internal processor registers inaccessible through GDB. In particular, 
  this prevented printing Cortex-M System Control register values using GDB 
  memory accesses.

###############################################################################
##                                                                           ##
## Date 2012-July-10                                                         ##
##                                                                           ##
## Release 20120614.2                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused an assertion on an attempt to halt a
  processor using vmirtBlock when running with multiple instructions per slice.
- A code generator bug has been fixed that caused registers beyond the first
  1Kb zone of a processor structure to be written with incorrect values in some
  obscure circumstances.

ImperasLib/buildutils/Makefile.TLM.Platform.*
-------------------------------------------------------------------------------
- The environment variable SYSTEMC_HOME is used by default to define the 
  location of the SystemC root directory. However, if it is NOT defined and
  SYSTEMC is defined, SYSTEMC will now be used.
- On Linux, if /usr/bin/execstack does not exist a warning will be issued rather
  than an error occurring. (execstack is used to configure SELinux to permit 
  the executables built to run code from the HEAP.)

MIPS Processor Model
-------------------------------------------------------------------------------
- ITC: now supports byte and halfword accesses and architecturally reserved 
  views are now implemented as a bypass.

ARM Processor Model
-------------------------------------------------------------------------------
- A bug that would allow an MSR instruction to modify the CPSR.T and .J bits
  (which should have writes ignored) has been fixed.   
- Implemented 64-bit coprocessor register view.
- Fixed bug that caused assertion failure when the override_Control_V 
  parameter was set on a processor with an MPU (as opposed to a TLB) such as
  the Cortex-R4.

###############################################################################
##                                                                           ##
## Date 2012-June-27                                                         ##
##                                                                           ##
## Release 20120614.1                                                        ##
##                                                                           ##
###############################################################################

MIPS CrossCompiler Support with CodeSourcery lite
-------------------------------------------------------------------------------
- The support Makefiles CS_*MIPS*.makefile.include that aids the use of a 
  CodeSourcery (lite) CrossCompiler toolchain have been updated for use with
  the latest version available 2012.03-64. This adds support for the MIPS 
  64-bit architecture
- An Imperas TargetLibrary to support the MIPS 64-bit architecture is added 

MIPS Processor Model
------------------------------------------------------------------------------- 
- New parameter config7HCI added to allow users to set Config7.HCI bit in the
  processor model (it is off by default).

ARM Processor Model
-------------------------------------------------------------------------------     
- Cortex-A5MPx1, Cortex-A5MPx2, Cortex-A5MPx3 and Cortex-A5MPx4 variants have
  been added.
- Misnamed variant Cortex-A9MP has been deleted; use Cortex-A9MPx4 instead.
- Accessibility of CBAR, PCR and NEONB registers has been corrected.
- Added a new input net port named spiVector to variants that implement a  
  GIC (Generic Interrupt Controller).
  This input is a net port that supports writing a value to any of the SPI 
  (Shared Peripheral Interrupt) inputs via the icmWriteNet function. 
  Bit 0 of the value written specifies the value written to the SPI input 
  (0 or 1). Bits 31:1 specify which SPI input is written. 
  Writing an out of range value (less than 32 or greater than the maximum SPI 
  supported by the implementation) will be ignored. 
- Added override_GICD_TYPER_ITLines parameter to override the value of the 
  ITLinesNumber field in the GICD_TYPER register. This value defines the number 
  of SPI inputs that are implemented. 
  Changing this value also changes the number of implemented interrupt 
  registers for the following (these have different names depending on whether 
  a variant implements GIC v1 or GIC v2): 
        GIC v1 names        GIC v2 names
        ------------        ------------
        ICDGRPR             GICD_IGROUPR
        ICDISER             GICD_ISENABLER
        ICDICER             GICD_ICENABLER
        ICDISPR             GICD_ISPENDR
        ICDICPR             GICD_ICPENDR
        ICDABR              GICD_ISACTIVER
        ICDIPR              GICD_IPRIORITYR
        ICDIPTR             GICD_ITARGETSR
        ICDICFR             GICD_ICFGR
        SPI_STATUS          GICD_SPISR
        
ARMM Processor Model
-------------------------------------------------------------------------------
- Register view has been corrected to add these system registers that were
  previously omitted: ICSR, SHCSR, SHPR*, STIR, NVIC_ISER*, NVIC_ICER*,
  NVIC_ISPR*, NVIC_ICPR*, NVIC_IABR*, NVIC_IPR*, MPU_RBAR*, MPU_RASR,
  MPU_RBAR_A* and MPU_RASR_A*.
  
Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused an assertion on an attempt to halt a
  processor using vmirtBlock in an unannulled delay slot instruction.

###############################################################################
##                                                                           ##
## Date 2012-June-19                                                         ##
##                                                                           ##
## Release 20120614.0                                                        ##
##                                                                           ##
###############################################################################

Peripheral Model arm.ovpworld.org LcdPL110
-------------------------------------------------------------------------------
This model has been updated to address two issues
- Not passing the correct BPP value to the SDL layer
- Support setting the BPP to a value other than the default (16BPP)

New configuration parameters added to MIPS model
-------------------------------------------------------------------------------
The MIPS model has the following new Boolean parameters:
      fixedMMU
      removeDSP
      removeCMP
      removeFP
These are intended to be used with the Aptiv family variants to create different
implementations. When set the specified feature is modified/removed.

Note that the existing GCR_PCORES parameter may also be used to change the 
number of cores in multiprocessor (the value should be set to the number of 
cores desired minus 1, e.g. 1 for a dual core configuration)

For example, the interAptiv variant, which has by default 4 cores and an FP
unit may be changed to model a 2 core, no floating point implementation by  
adding the following to the platform:
    icmAddStringAttr(procAttrs, "variant",   "interAptiv");
    icmAddStringAttr(procAttrs, "removeFP",  "true");
    icmAddUns64Attr (procAttrs, "GCR_PCORES", 1);

New Demos 
-------------------------------------------------------------------------------
New demos have been created
- FreeRTOS on ARM Cortex-M3 processor model. OVPsim_FreeRTOS_arm
  A new demo has been added to show the operation of a simple application based
  upon the FreeRTOS operating system running on the ARM Cortex-M3 processor.
- OVPsim_mips64(_tlm2.0)
  Two demos have been added to show the mips64, (the MIPS 64-bit architecture)
  model running some simple applications.
- MIPS32 Aptiv processor model demos.
  A set of demos are provided in a new package, OVPsim_demo_mips32_Aptiv, to 
  show the Aptiv variants, microAptiv, interAptiv and proAptiv, running simple 
  applications. These are provided as single, multicore2 and manycore24 example
  platforms.
  
TLM2.0 Interface
-------------------------------------------------------------------------------
- A bug has been fixed so that a processor model now correctly responds to the
  invalidate_direct_mem_ptr request.
- Processor models can now have bus ports left unconnected without error.

Peripheral Modeling API (BHM)
-------------------------------------------------------------------------------
- A set of new functions bhmSerOpenAuto, bhmSerRead, bhmSerWrite and bhmSerClose
  have been added to provide an interface for use by serial devices. The library
  ovpworld.org/modelSupport/pseSockets/1.0 has been deprecated.

V850 Processor Model
-------------------------------------------------------------------------------
- Vendor renaming, the vendor has been renamed from necel.ovpworld.org to
  renesas.ovpworld.org, this is to bring the naming into line with the name
  change of the company
- Variant renaming, all variants now appear as UPPER CASE in order to match
  Renesas Documentation.
  V850, V850E1, V850ES and V850E2
- Addition of variant V850E1F, supporting the Single Precision Floating Point
  Unit for the V850E1(F) series devices

MIPS Processor Model
-------------------------------------------------------------------------------
- The mips64 model has been released, supporting initial variants 5Kf, 5Kc, 
  5KEf and 5KEc.  
- New variants added to the MIPS processor model to support the MIPS Aptiv 
  microprocessor cores. The model now provides support for variants of the 
  microAptiv, interAptiv and proAptiv microprocessor cores.
- Support for ISPRAM and DSPRAM added (enabled using configISP and configDSP
  parameters to override Config.ISP and  Config.DSP, respectively).
  Example added at Examples/Models/Processor/FeatureUsage/MIPS_SPRAM_Internal
- Support for ITC added (enabled using ITCNumEntries and ITCNumFIFO parameters,
  used to specify the total number of ITC cells and the number of FIFO cells,
  respectively). 
  Example added at Examples/Models/Processor/FeatureUsage/MIPS_ITC_Internal
- A minor bug introduced in the 20120313.0 release that caused incorrect
  behavior when overlapping TLB entries were written on 24K and higher variants
  was fixed. On these variants a machine check exception should occur if both 
  conflicting entries have a Valid bit set, but instead the conflicting entry
  was disabled and no machine check exception was taken in this case.  
- Read and write privilege exception handlers have been simplified using
  vmiLoadStoreAction (see VMI API changes).
- The implementation of the WAIT instruction has been corrected so that, if
  Config7.WII=1, the processor will not wait if there is an active interrupt,
  irrespective of whether the interrupts are enabled (Status.IE=1) or whether
  the processor is interrupt-exempt (TCStatus.IXMT=1).
- Added "fixedMMU" parameter which when true sets Config.MT=3, Config.KU/K23=2  
  and Config1.MMUSizeM1=0. This changes the MMU type to be a fixed mapping
  MMU. This may be used on any processor that normally has a TLB MMU.
- Added "removeDSP" parameter which when true sets Config3.DSPP/DSP2P=0. This
  removes the DSP. This may be used on any variant that normally has a DSP.
- BEV Exception Base is now configurable
  Support for specifying the initial value for BEV Exception Base has been
  added:
  For non-CMP processors: 
    A new config value named BEVBase which models the SI_ExceptionBase input 
    available on some implementations has been added. To maintain previous 
    behavior this has been set to 0xbfc00000 in each non-CMP variant in 
    mipsConfigList.c. It may be overridden with the new BEVBase parameter.
  For CMP Processors:
    A new config value named GCR_RESET_BASE has been added to specify the 
    power-on value for the CMP GCR_Cx_RESET_BASE registers. GCR_RESET_BASE is an
    array with up to 4 entries for cores 0 through 3. (If there are more than 4
    cores present, the last value is used for all additional cores.)
  To maintain previous behavior these have been set to 0xbfc00000 in each 
  non-CMP variant in mipsConfigList.c. They may be overridden with the new 
  GCR_Cx_RESET_BASE parameters (where x=0, 1, 2 or 3).

ARM Processor Model
-------------------------------------------------------------------------------
- CPSR.A and CPSR.F mask values on exception entry have been corrected for
  processors that implement Security Extensions.
- Cortex-R4 and Cortex-R4F variants have been added.
- Banked TCMs have been implemented (ARM1176 variants).
- Secure TCMs and secure DMA have been implemented (ARM1176 variants).
- TLB preload operations have been implemented (Cortex-A8 variants).
- VCR and VIR have been implemented (Cortex-A5 and Cortex-A9 variants).
- TCMs are now exposed as bus ports for external connection if required.
- The align64as32 configuration option and override_align64as32 parameter have
  been removed from both the arm and armm models. The behavior is now modeled
  on an instruction basis, not a variant basis.
- The rotateUnaligned configuration option and override_rotateUnaligned
  parameter have been removed from both the arm and armm models. Legacy
  alignment/rotation behavior is always enabled when SCTLR.A=0 and SCTLR.U=0 in
  the arm model and never enabled in the armm model.
- Warning messages generated when undefined or inaccessible coprocessor
  registers are read or written been improved.
- Coprocessor register interface has been revised to ensure that presence of
  registers matches ARM documentation for each processor variant more closely
  (particularly for placeholder registers such as Cache Operation registers).
- The model has been enhanced to use the new explicit read and write address
  snap functions in the vmiAttrs structure: see chapter 12 of the OVP Processor
  Modeling Guide for a detailed description of this feature.
- Read and write privilege exception handlers have been simplified using
  vmiLoadStoreAction (see VMI API changes).
- For processor variants supporting ARMv6 and later, when parameter
  override_deviceStrongAligned=1 the arm model generates misaligned access
  exceptions for loads or stores to Device or Strongly Ordered regions
  irrespective of whether the processor has unaligned accesses enabled. The
  default behavior (if override_deviceStrongAligned=0) is to allow such
  misaligned accesses.
- Behavior of conditional undefined instructions on ARMv6 and before has been
  corrected: these instructions should not cause an Undefined Instruction
  exception if the condition code prevents the instruction being executed.
  Parameter override_condUndefined has been added to allow this behavior to be
  modified if required (set override_condUndefined=1 to enable Undefined
  Instruction exception irrespective of the condition).
- ARM instruction set decode of SDIV and UDIV has been added.
- Implemented ARMv7 MPU background region and subregions.
- FPU system registers have been added to the register view for processor
  variants that support them.
- Defined mode names have been corrected to match ARM standard capitalization
  (for example, "User" instead of "USER").

GDB RSP Interface
-------------------------------------------------------------------------------
- The RSP interface now supports the automatic starting of a debugger when RSP
  Mode is enabled. The debugger is selected by the model from the Imperas
  Installation, the port number is allocated by the system. Use the simulator
  attribute ICM_GDB_CONSOLE to enable this feature.
- On Linux, the gdb console is an xterm. To override the default path to the
  xterm (/usr/bin/xterm) set the environment variable IMPERAS_XTERM_PATH.
- To supply a gdb command file to run before the prompt, use the following:
  export IMPERAS_GDB_COMMAND_FILE=<your_file>
- To set the number of seconds timeout used by  gdb's remote protocol, set the
  environment variable IMPERAS_GDB_TIMEOUT to the required value.
- If an interrupt was received while waiting for a GDB target to connect, the
  simulation would start without the connection being made. This has been fixed.

Serial device model support
-------------------------------------------------------------------------------
- Any model which uses the library ovpworld.org/modelSupport/psesockets/1.0 can
  now automatically create a console window connected to the serial device.
- The feature is enabled by a new argument 'console':
  sockOpenBlocking(int port, char *log, char *source, Bool verbose,Bool console)

VMI API
-------------------------------------------------------------------------------
- The vmiBusPort structure has been enhanced to specify minimum and maximum
  bit widths for connected ports.
- The vmiBusPort structure has a new 'domain' field which gives the memDomain
  object connected to this port. Note that this means that port descriptions can
  no longer be static objects but must be instance-specific.
- It is now possible to specify any number of bus ports to a processor instance.
  When the virtual memory constructor is called, the 'domain' field in each port
  structure will have been filled with the memory domain to which that port has
  been connected. If the port is unconnected, the 'domain' field will be NULL.
- The restriction that ports should be named only INSTRUCTION or DATA has been
  removed. Bus ports can now have any name.
- The memPriv type has a new member, MEM_PRIV_ALIGN, which forces all accesses
  to regions with this privilege to be aligned. This allows aligned/unaligned
  behavior dependent on address (required by ARM processors).
- Explicit read address snap and write address snap functions have been added
  to the processor vmiAttrs structure (previously, address snapping was done by
  the read and write alignment exception callbacks if required). See chapter 12
  of the OVP Processor Modeling Guide for a detailed description.
- Read and write privilege exception handlers have a new by-ref parameter
  'action' of type vmiLoadStoreAction. If set to VMI_LOAD_STORE_TERMINATE (the
  default value), the current load or store is terminated. If set to
  VMI_LOAD_STORE_CONTINUE, the current load or store will be retried when
  control returns from the privilege exception handler. Default behavior is
  backwards-compatible with previous product versions.
  
VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- A new function vmirtBlock() has been added, taking a processor argument. If
  the processor is the currently-executing processor, the current instruction is
  aborted and the processor is halted. On restart, the current instruction is
  re-executed. If the processor is not the current processor, behavior is
  identical to vmirtHalt().

ICM API
-------------------------------------------------------------------------------
- The icmPriv type has a new member, ICM_PRIV_ALIGN, which forces all accesses
  to regions with this privilege to be aligned. This allows aligned/unaligned
  behavior dependent on address (required by ARM processors).

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that prevented SystemC 'wait' calls from working
  correctly in memory callbacks. The bug was introduced in release 20120313.0.
- A bug has been fixed that prevented vmirtFlushTargetMode from working
  correctly in some circumstances for modes other than the current processor
  mode.
- A bug has been fixed that allowed execution in ASID-disabled regions when
  VAP tools were enabled.

###############################################################################
##                                                                           ##
## Date 2012-March-16                                                        ##
##                                                                           ##
## Release 20120313.0                                                        ##
##                                                                           ##
###############################################################################

MIPS BareMetal platforms memory standardized
-------------------------------------------------------------------------------
All of the MIPS BareMetal platforms now implement the same memory maps. 
Non-TLM2.0 platforms implement a fully populated memory map. TLM2.0 platforms, 
which should not implement a fully populated memory map because DMI memory may 
not be demand mapped, now all implement a memory map that is the same for all 
MIPS BareMetal platforms and is a superset of the memory maps required by 
various toolchains that are used for testing.

AMD 79C970 Model - bug fixed
-------------------------------------------------------------------------------
The bug prevented a platform using multiple instances of this model.

RSP Interface
-------------------------------------------------------------------------------
- The GDB RSP interface [activated by icmInit("rsp", <port_number>)] now supports
  the gdb 'detach' command which allows the simulator to run on without debugger
  interaction. The debugger can also be reconnected to the running simulator on
  the same port number. Note that this port number is now reserved for the entire
  duration of the simulation.

- The RSP interface now detects when a processor is stopped in a delay slot,
  preventing operations that would put the processor into an inconsistent state.

- The RSP interface in OVPsim now presents each member of a multicore processor
  as a thread. After starting and connecting gdb to your platform, use the command
  'info threads' to see the individual cores.

MIPS Processor Model
-------------------------------------------------------------------------------
- Support for Dual Variable/Fixed TLB implementation support added. Enabled by
  configuring Config.MT=4 and setting Config4 register values appropriately.
- Configuration parameter overrides (aka attributes) are now fully range 
  checked to ensure specified values are legal.
- Added support for TLBINV/TLBINVF instructions, enabled by Config4.IE field.
- Added support for EntryHi.EHINV field when Config.IE is set or a Dual
  Variable/Fixed TLB is present.
- Deprecated the hiddenTLBentries configuration parameter, which improved
  Linux performance by keeping TLB Entries active when possible. To get a 
  similar result, set the config1MMUSizeM1 parameter to 63. Platforms which
  use hiddenTLBEntries will see changes in the TLB behavior.
- Read and write callbacks for aborts have been added.
- A full cache model has been added for the MIPS processor model. Set  the
  string attribute "enablecache" to "full" or "tag" to enable it. Simulation
  performance is greatly reduced when the cache model is enabled.
- YQ nets are now correctly present in all MT processor variants and excluded
  from non-MT variants.
- The default initial configuration for 34K processors has been changed to 
  implement 2 TCs, one on each VPE (previously it was 5 TCs, all initially
  on VPE0). The VPE0MaxTC and mvpconf0tc parameters may be specified to 
  override this behavior.
- The model can now generate a bus error exception for accesses to memory
  that is not defined in the platform by setting the busErrors configuration
  parameter on a MIPS processor to 1. 

ARM Processor Model
-------------------------------------------------------------------------------
- "pabort" and "dabort" input signals have been deleted: use icmAbortRead and
  icmAbortWrite to force external abort of memory accesses (change required so
  that exception state is correctly set).
- Large Physical Address (LPA) extension has been implemented.
- Security Extensions are supported in the processor core and MPCore block.
- Model has been changed to reflect new privilege level nomenclature (PL0...PL2)
  instead of old nomenclature (user and privileged).
- ACTLR specification has been corrected for each variant that supports it.
- Fixed bug in WFI instruction: processor should not wait if there is pending
  but masked interrupt when this instruction is executed.
- The model has been enhanced to use the new domain-specific load and store
  morph-time functions (better performance and simpler code for LDRT/STRT etc).
- simulateExceptions argument to constructor is now ignored (see ICM API changes
  below).
- For ARMv6 and ARMv7, endianness now applies only to data accesses (instruction
  fetch is always little-endian).
- Many Cp15 registers have been added to the model register view.
- The CPACR.D32DIS bit which disables the high half of the SIMD/VFP
  register bank for VFP instructions is now supported.

ARMM Processor Model
-------------------------------------------------------------------------------
- "pabort" and "dabort" input signals have been deleted: use icmAbortRead and
  icmAbortWrite to force external abort of memory accesses (change required so
  that exception state is correctly set).
- Fixed bug in WFI instruction: processor should not wait if there is pending
  but masked interrupt when this instruction is executed.
- The model has been enhanced to use the new domain-specific load and store
  morph-time functions (better performance and simpler code for LDRT/STRT etc).
- simulateExceptions argument to constructor is now ignored (see ICM API changes
  below).
- override_VTOR parameter added to allow override of the reset value for the
  VTOR system control register. 

ARC Processor Model
-------------------------------------------------------------------------------
- simulateExceptions argument to constructor is now ignored (see ICM API changes
  below).

ICM API
-------------------------------------------------------------------------------
- ICM_ATTR_RELAXED_SCHED and ICM_ATTR_APPROX_TIMER are now deprecated:
  simulation is now always both fast and exactly accurate with regard to
  instruction count.
- ICM_ATTR_SIMEX behavior has been clarified: this flag now determines only
  whether load/store privilege and alignment exceptions are enabled.
- icmSetSchedFn() startcb callback behavior change
  The startcb used to occur during the call to icmSimulationStarting but now
  occurs in the first call to icmSimulate, before the processor executes its
  first instruction. The semantics are still valid, but attention should be paid
  to any interlocks held between a debugger and the platform.
- Connections to PSE ports are now subject to strict checks:
  - PSE bus ports that are not connected at the platform level generate a
    warning.
  - Connections made at the platform level to unknown PSE bus and net ports
    generate an error.

- A new function icmSMPIsLeaf() has been added, which returns true if the given
  part of an SMP executes code and false if it is a 'container'.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions vmimtStoreRRODomain, vmimtStoreRCODomain, vmimtLoadRRODomain,
  vmimtTryStoreRCDomain and vmimtTryLoadRCDomain have been added that allow
  code to be generated to load or store to any domain (previously, only loads
  and stores to the current data domain could be specified). This simplifies
  code generation for instructions such as STRT and LDRT on ARM processors.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- A new function vmirtGetSMPCpuType has been added to query the SMP details
  of a processor.
- exception handling routines of types vmiRdPrivExceptFn, vmiWrPrivExceptFn
  and vmiIFetchFn have been enhanced so that they are passed the the memory
  domain of the failing access.
- The simulateExceptions argument to vmiConstructorFn is now always passed
  True (models should assume that all exceptions are always enabled).
- Documentation of vmirtAddReadCallback, vmirtAddWriteCallback and
  vmirtAddFetchCallback has been corrected.
  
Simulator Core
-------------------------------------------------------------------------------
- The core of the simulator has been modified so that SIGSEGV signals are no
  longer used for internal purposes. Any SIGSEGV signal now indicates a true
  error.
- Performance for small quantum sizes has been improved by up to 6x (depending
  on the exact platform and quantum size).
- A bug has been fixed that caused bad code to be generated, exposed by ARM
  instruction sequences of the form:
        mov     r1,r0
        uadd8   r1,r1,r2
        sel     r1,r3,r4
- A bug has been fixed that caused instruction fetch callbacks not to be called
  in some circumstances for physically-mapped code blocks.

RSP Interface
-------------------------------------------------------------------------------
The GDB RSP interface [activated by icmInit("rsp", <port_number>)] now supports
the gdb 'detach' command which allows the simulator to run on without debugger
interaction. The debugger can also be reconnected to the running simulator on
the same port number. Note that this port number is now reserved for the entire
duration of the simulation. 

ARM9.makefile.include and ARM11.makefile.include removed
-------------------------------------------------------------------------------
These two Makefiles were provided with the OVP ARM Toolchain. The ARM toolchain 
only contained libraries to support the ARM7 processor family. These makefiles
have now been removed as they could cause linkage errors or inconsistent output.

###############################################################################
##                                                                           ##
## Date 2012-January-4                                                       ##
##                                                                           ##
## Release 20111125.2                                                        ##
##                                                                           ##
###############################################################################

Statically Linked Demos Licensing Fixed
-------------------------------------------------------------------------------
An error was introduced into the statically linked Demos, these are the demos
OVPsim_single_*, OVPsim_multicore2_*, OVPsim_manycore24_* and BareMetal*, this 
has now been rectified. 
The error required that the license feature IMP_OVPSIM was always available.

###############################################################################
##                                                                           ##
## Date 2011-December-15                                                     ##
##                                                                           ##
## Release 20111125.1                                                        ##
##                                                                           ##
###############################################################################

Unconnected Output Nets Written
-------------------------------------------------------------------------------
The result of writing to an unconnected net has been modified. 
Previously, a net must be connected with another device listening to the net 
with a callback. If this was not correct the simulation would stop on a write
to the unconnected net.
Nets may now be left unconnected and writes to an unconnected net complete. 

Model Licensing
-------------------------------------------------------------------------------
Models that cannot run without a license must use a new API.
Processor Models:
    Bool        vmirtGetLicense(void)
        Checks out a license for the model. The simulator determines the feature name.
        Please contact Imperas for details.
    const char *vmirtGetLicenseErrString(void)
        Returns the error message should the license check fail.
        
Plugins and intercept libraries:
    Bool        vmiosGetLicenseFeature(const char *feature)
        Checks out a license for the model. The simulator determines the feature name.
        Please contact Imperas for details.
    
    const char *vmiosGetLicenseFeatureErrString(const char *feature)
        Returns the error message should the license check fail.
        

OVP Model SmartLoaderArmLinux
-------------------------------------------------------------------------------
This is a 'dummy' device used to setup the environment for a Linux kernel to 
start execution. The model has been enhanced to allow setting of new parameters
and to modify the physical base address when a separate boot program is loaded.
 
Environment Variables
-------------------------------------------------------------------------------
To see a list of environment variables read by this and other Imperas products
setenv IMPERAS_ENV=1  before invoking any program that uses icmInit().

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- The definition of vmiReg has been enhanced to support 64-bit hosts.
- The first argument of vmimtArgReg has been changed from bits to enumerated
  type vmiRegArgType to allow floating point arguments to be identified
  (required for 64-bit host port).
- Archaic register type VRT_USEBASE is no longer supported: do not use.
- Functions vmimtTestRR, vmimtTestRC and vmimtTestCR have been added (set a
  flag byte depending on the result of a bitwise-and comparison).
- Functions vmimtGetBlockMask, vmimtSetBlockMaskC and vmimtSetBlockMaskR have
  been added to allow direct manipulation of the processor block mask.
- The busErrorCB callback in the vmiAttrs structure has been replaced with
  rdAbortExceptCB and wrAbortExceptCB callbacks (so that read and write aborts
  from memory callbacks can be distinguished).
- The rdPrivExceptCB and wrPrivExceptCB callbacks in the vmiAttrs structure now
  have an extra argument 'attrs' of type memAccessAttrs, which will be
  MEM_AA_FALSE if this is an artifact read or write (for example, by a
  debugger). For such accesses, the functions may wish to create memory mappings
  (so that the artifact access can complete successfully) but should not update
  true processor state (by, for example, taking an exception for a bad address).
  Previously, processor models were not notified of artifact accesses and
  therefore could not create memory mappings that might have been required to
  support those accesses.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- VMI Header file vmiI86.h has been deleted: no assumptions should be made
  regarding native registers used by the simulator core.
- Function vmirtGetBlockMask has been added (returns the current processor
  block mask).
- Callback functions of type vmiMemReadFn and vmiMemWriteFn now have an extra
  argument 'attrs' of type memAccessAttrs which should be used to distinguish
  true reads/writes (generated by processor models) and artifact reads or writes
  (for example, by a debugger). The three possible states are:
    1. processor=NULL, attrs=MEM_AA_FALSE:
       an artifact read with no processor context
    2. processor=non-NULL, attrs=MEM_AA_FALSE:
       an artifact read with the passed processor context
    3. processor=non-NULL, attrs!=MEM_AA_FALSE:
       a true read with the passed processor context
  Previously, only states 1 and 3 were supported.

ICM API
-------------------------------------------------------------------------------
- icmSetMemStatusFail has been replaced by icmAbortRead and icmAbortWrite (so
  that read and write aborts can be distinguished in processor models).

New Processor Model
-------------------------------------------------------------------------------
There are new processor models added to the OVP Fast Processor Model library.

- Xilinx MicroBlaze
  The Xilinx MicroBlaze processor has been added to the OVP library, a description
  of the support status is detailed below, including some missing/partial implementation
    Instruction Set: This model fully implements the instruction set up to and including V8.2
    Privileged Instructions: Implemented
    Virtual-Memory Management: Partially Implemented, still undergoing development
    Reset, Interrupts, Exceptions and Break: Implemented
    Floating Point Unit: Implemented
    Stream Link Interface: Implemented
    Supported Core Configuration Parameters
        Barrel Shifter
        Hardware Divider
        Machine Status Set/Clear Instructions
        Hardware Exceptions
        Pattern Compare Instructions
        Floating Point Unit (FPU)
        Disable Hardware Multiplier
        Processor Version Register (PVR)
        Hardware Multiplier 64-bit Result
        Floating Point Conversion and Square Root Instructions
        Memory Management Unit
        Extended Stream Instructions 
        Count Leading Zeros Instruction
        Memory Barrier Instruction
        Allow Stream Instructions in User Mode
    

New Examples
-------------------------------------------------------------------------------
Two new platform examples have been provided:
Example/Platforms/resetControl: 
    This illustrates how a 'reset' net can be used to hold a processor model in
    a reset state after simulation has started.
Example/Platforms/queryProcesor: 
    This shows the query functions that can be used to obtain information from
    the processor model. Note: This example attempts to read from several 
    different processor types, the result will depend if the model is available
    in the specific installation.
    
Simulator Core
-------------------------------------------------------------------------------
- Bug causing occasional memory corruption when vmirtSetMode or
  vmirtSetBlockMask was called during execution of delay slot instruction has
  been fixed.
- Bug causing incorrect behavior for 128-bit, 256-bit, 512-bit and 1024-bit
  arguments to vmimtTryStoreRC and vmimtTryLoadRC fixed.
- 64-bit memory addressing bug fixed (when the memory address high word was held
  in a native register and dirty).

ARM Processor Model
-------------------------------------------------------------------------------
- Bug in behavior of VPUSH/VPOP instructions fixed (stack pointer was not being
  updated).
- processor model now implements improved debug memory access (all memory
  regions present in the MMU are accessible to a debugger irrespective of
  whether the processor has accessed those regions)
- MPCore registers have been added to the ICM register interface.
- The NEON vld4.32 to all lanes with alignment specified as 128 would give an 
  unimplemented instruction error. This has been fixed.
- Support for the SIMD/VFP Fused MAC instructions (vfma, vfms, vfnma, vfnms)
  has been added.

ARMM Processor Model
-------------------------------------------------------------------------------
- processor model now implements improved debug memory access (all memory
  regions present in the MMU are accessible to a debugger irrespective of
  whether the processor has accessed those regions)

MIPS Processor Model
-------------------------------------------------------------------------------
- The FCSR.Cause.E bit is now properly set when the floating point ADD.S or
  MUL.S instructions produce a denormal result.
- Accesses to CP0 Register 29, Select 0 and 2 (ITagHi and DTagHi) on 24K and 
  later processors will now read/write the value rather than generate a message
  that the register is unsupported. The underlying functionality of these
  registers is not supported however.
- When loading MIPS ELF files, if the program header p_paddr field differs from
  the p_vaddr field then the code for that section will be loaded at both 
  addresses (note these are both virtual addresses). This occurs in ELF files
  used to load data to a ROM where a monitor or boot loader program copies the
  data to RAM. The simulation may or may not include this monitor or boot
  loader. By loading to both addresses the simulation will work either way. 
- processor model now implements improved debug memory access (all memory
  regions present in the MMU are accessible to a debugger irrespective of
  whether the processor has accessed those regions)

###############################################################################
##                                                                           ##
## Date 2011-September-29                                                    ##
##                                                                           ##
## Release 20110906.3                                                        ##
##                                                                           ##
###############################################################################

MIPS Processor Model
-------------------------------------------------------------------------------
- The mode access API has been corrected to report true MIPS modes (Kernel,
  Debug, Supervisor and User) instead of implementation modes (Kernel/ERL0,
  Kernel/ERL1, Supervisor and User).
- MTFPU configuration option now supports specification of multithreaded FPU
  with traditional MTTC1/MTTHC1/MFTHC1 behavior (MTFPU=1) or modified MTTC1/
  MTTHC1/MFTHC1 behavior consistent with newer cores (MTFPU=2).

Simulator Core
--------------
- Bug causing incorrect address to be targeted for platforms with 64-bit virtual
  address space and 32-bit physical address space.
- Bug causing incorrect code block to be executed in obscure circumstances in
  processors supporting delay slots has been fixed. This manifested itself on
  the MIPS processor when exceptions were taken on delay slot instructions and
  the exception handler changed the EPC to return to the delay slot instruction 
  (rather than the branch instruction as it normally would) and that instruction 
  caused a second exception.

Preparation Work for 64 bit port
-------------------------------------------------------------------------------
Work has begun on porting the OVP libraries to be 64-bit compatible. This will
eventually replace the current 32-bit emulation, on 64-bit host which is
used under both Linux and Windows. This work requires some changes to the
directory structure within the product trees, for example
Imperas/bin/Linux,   becomes Imperas/bin/Linux32
Imperas/lib/Linux,   becomes Imperas/lib/Linux32
Imperas/bin/Windows, becomes Imperas/bin/Windows32
Imperas/lib/Windows, becomes Imperas/lib/Windows32
The make infrastructure files have been updated accordingly, and
the environment setup scripts bin/setup.sh and setup.bat have been updated to
reflect these changes. In addition the Windows installers have also been
updated to reflect these changes.
If you have written any scripts of your own, these will need to be updated
accordingly.

Added new function: icmAddPtrAttr()
-------------------------------------------------------------------------------
A new function, icmAddPtrAttr(), has been added for passing a native host 
pointer to a model as an attribute. 

The types and macros in vmiParameters.h have been modified to support this
new native host pointer type.


Component (TLM2.0) Library
-------------------------------------------------------------------------------
The component library now has TLM interface files for each variant of each
processor model. 
The generic interface is     :  processor.igen.hpp
The variant interfaces are   :  <processor_name>_<variant>.igen.hpp

###############################################################################
##                                                                           ##
## Date 2011-August-22                                                       ##
##                                                                           ##
## Release eng.20110822.0                                                    ##
##                                                                           ##
###############################################################################

Component Library
-------------------------------------------------------------------------------
Moved the special version of the UART 16450 model used in the MIPS Malta platform
from national.ovpworld.org/peripheral/16450C to mips.ovpworld.org/peripheral/16450C

MIPS Processor Model
-------------------------------------------------------------------------------
- Config3.ISAOnExc is now not writable unless both MIPS32 and microMIPS
  are present.
- TCStatus.TSSt bit has been removed

ICM API
-------------------------------------------------------------------------------
icmGetProcessorElfCode() now returns a _list_ of ELF codes (some processors
use more than one). The list is zero terminated.

icmSetMemStatusFail() now requires 2 arguments : processor and failing address.

TLM2.0 Interface
-------------------------------------------------------------------------------
A bus error in the TLM2.0 interface (e.g. caused by a missing decode)
resulting in an incomplete access can be signaled using icmSetMemStatusFail
(see above). This function can now cause a processor model to take an exception
if the model is programmed to do so.

VMI API
-------------------------------------------------------------------------------
A new field alternativeElfCodes can be used to supply  a list of alternative
ELF codes (some processors use more than one). The list must be zero terminated.

OVPsim Program loader (e.g. using icmLoadProcessorMemory).
-------------------------------------------------------------------------------
When loading the cores of an MP processor with different programs, a bug
prevented each starting at its correct location. This has been fixed.

###############################################################################
##                                                                           ##
## Date 2011-July-21                                                        ##
##                                                                           ##
## Release 20110721.1                                                        ##
##                                                                           ##
###############################################################################

MIPS Processor Model
-------------------------------------------------------------------------------
- Model has been restructured to allow implementation of MIPS64 processor (not
  yet complete).
- Config3.VInt default value corrected
  The Config3.VInt bit was not set by default on several processor families
  whose  architectural specification called for it to be set.
  It is now set to 1 by default on all variants in the 4KE, 24K, 24KE and 34K 
  families, matching the architectural specifications. The MIPS processor model 
  parameter "vectoredinterrupt" can be set to "disable" to override the default 
  value if needed.
  Note that the 74K, 1004K, 1074, M14Kc and M14K families already had this bit
  properly set by default. This bit is still properly not set in the 4K family.

ICM API. icmTerminate MUST be called explicitly at the end of a session.
-------------------------------------------------------------------------------
This function was executed using 'atexit', but this is no longer the case.
This release includes code to detect the missing call.

ICM API. Deprecated functions:
-------------------------------------------------------------------------------
Functions
    icmFreeBus,
    icmFreeBusBridge,
    icmFreeFifo,
    icmFreeMemory,
    icmFreeMMC,
    icmFreeNet,
    icmFreeProcessor,
    icmFreePSE
have been deprecated.

Please use icmInit() at the beginning of a session, and icmTerminate() at the end.

VMI API. IMPORTANT CHANGE TO MODEL ATTRIBUTES TABLES 
-------------------------------------------------------------------------------
Processors, intercept objects and MMCs all have a new field which MUST be
correctly initialized for the model to compile and function correctly.
It's the 2nd field in the table, called 'modelType'; it must be set to 

VMI_PROCESSOR_MODEL, VMI_INTERCEPT_LIBRARY or VMI_MMC_MODEL
    
accordingly.


Preliminary ARM Cortex-A5 Variant Added (arm.ovpworld.com/processor/arm)
-------------------------------------------------------------------------------
A new variant 'Cortex-A5UP' has been added. By default this includes the 
optional SIMDv2 (NEON) and VFPv4 extensions. 

The optional NEON and floating point extensions may be disabled on all Cortex-A 
processors by setting the new 'override_advSIMDPresent' and 'override_vfpPresent'
parameters to 0. 

While it includes all relevant publicly documented features of the A5, currently 
this model is described as preliminary since it does not include support for the 
new Fused MAC instructions that have yet to be fully documented publicly by ARM.


###############################################################################
##                           C A N D I D A T E                               ##
## Date 2011-July-01                                                         ##
##                                                                           ##
## Release 20110701.0                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
--------------
- Code dictionary memory management has been improved (reduces out-of-memory
  conditions in platforms with many processor instances).
- Processor attribute "dictionarysize" is deprecated.
- Recovery from out-of-memory situations has been improved (bogus assertions
  eliminated).

ICM API Used to connect nets to processors
-------------------------------------------------------------------------------
Note that all interrupt (and other single-bit) inputs are now always connected
to the top level of a processor model, rather than to the lower-level
processors. The names of the processor inputs have been modified to take this
into account. For example:

Was
     // handle to main processor, note the name
    icmProcessorP processor = icmNewProcessor("u1", ......);
    
    // find the VPE by hierarchical name
    icmProcessorP vpe0 = icmFindProcessorByName("u1_VPE0");
    
    // connect to net on VPE
    icmConnectProcessorNet(vpe0, net, "hwint0", ICM_INPUT);

Becomes
     // handle to main processor
    icmProcessorP processor = icmNewProcessor("u1", ......);
    
    // connect to hierarchically named net on main processor
    icmConnectProcessorNet(processor, net, "hwint0_VPE0", ICM_INPUT);

VMI API. New method of creating model attributes. 
-------------------------------------------------------------------------------
(note that model-specific attributes are now referred to as model parameters).

deprecated:
    vmirtPlatformStringAttribute
    vmirtPlatformUns64Attribute

The model must provide two new functions in the model attrs table:

VMI_PROC_PARAM_TABLE_SIZE_FN(arcParamValueSize) {
    // return the size of the parameter values table
}

VMI_PROC_PARAM_SPECS_FN(getParamSpec) {
    // return the next model parameter specification
}

Each parameter is specified by a structure containing:
name, type, default value, legal values, description etc.

Please refer to vmiParameters.h

VMI API. Method of creating bus ports.
-------------------------------------------------------------------------------

The model must provide a function in the model attrs table to return the next
bus port specification

VMI_BUS_PORT_SPECS_FN(getNextBusPort) {
    // return the next bus port spec
}

see vmiPorts.h

VMI API. New method of creating net ports.
-------------------------------------------------------------------------------

The model must provide a function in the model attrs table to return the next
net port specification

VMI_NET_PORT_SPECS_FN(getNextNetPort) {
    // return the next net port spec
}

see vmiPorts.h

VMI API. New method of creating conn ports (point-to-point links).
-------------------------------------------------------------------------------

The model must provide a function in the model attrs table to return the next
conn port specification

VMI_FIFO_PORT_SPECS_FN(getFifoPortSpec) {
    // return the next conn port spec
}

see vmiPorts.h

VMI API. New method of installing simulator information in a processor model
-------------------------------------------------------------------------------
See vmiDoc.h and VMI_PROC_INFO_FN() in vmiModelInfo.h 

ICM API - Access to processor model information
-------------------------------------------------------------------------------
New functions have been added to give access to data that is now available in
the processor model. They include:

icmGetProcessorVlnv             Directory where the model normally lives.
icmGetProcessorDefaultSemihost  Directory where the default semihost library
                                lives.
icmGetProcessorElfcode          The regular ELF code used by the processor's
                                tool chain.
icmGetProcessorEndian           Endian of this processor model.
icmGetProcessorGdbPath          Path in an Imperas release to a gdb that works
                                with the model.

Reading a processor's documentation:
icmGetProcessorDoc              Get a documentation node

icmDocNextNode, icmDocChildNode Search a document hierarchy
icmDocIsText                    What kind of node?
icmDocText                      Get the name or text content

ICM memory interface with SYSTEMC TLM2.0
-------------------------------------------------------------------------------
ICM memory Access routines:

  icmReadProcessorMemory
  icmDebugReadProcessorMemory
  icmWriteProcessorMemory
  icmDebugWriteProcessorMemory

  icmReadBus
  icmWriteBus

Now return Bool status to indicate if successful. Used with a TLM2.0 platform,
The icmXXXProcessorMemory functions can now detect if the TLM transactions were
successful.

An example of the use of these functions is in
$IMPERAS_HOME/Examples/Debugger/threads/main.cpp

A new function icmSetMemoryStatusFail() can be used during a memory callback
to signal that the attempt has failed.


ARM Cortex-M Profile Processors (arm.ovpworld.com/processor/armm)
-------------------------------------------------------------------------------
A new variant named 'Cortex-M4' with support for the ARMv7E-M DSP extension has 
been added.

A new variant named 'Cortex-M4F' with support for the ARMv7E-M DSP and FPv4-SP 
VFP extensions has been added.

A new model parameter named 'disableBitBand' has been added. When set to '1' 
this disables the bit banding feature on any Cortex-M processors.


ICM API
-------------------------------------------------------------------------------
- The value ICM_ATTR_NOTRACE_ANNUL can be added to a processor instance to
  prevent tracing of annulled instructions.
- icmGetAllProcessorCommands() Internal error fixed.
- Added new functions icmDebugReadProcessorMemory and
  icmDebugWriteProcessorMemory which will cause TLM debug transactions and will
  not cause side effects in the processor model. If writing a debugger, use
  these functions in preference to icmReadProcessorMemory and
  icmWriteProcessorMemory.
- Added return code of type Bool to icmReadMemory, icmWriteMemory, icmReadBus,
  icmWriteBus, icmReadProcessorMemory and icmWriteProcessorMemory. The return
  code is True if the access succeeded and False otherwise.
  In the case of writes, unwritable bytes are ignored; in the case of reads,
  unreadable bytes are filled with the pattern 0xbadc0de4.
- Added function icmSetMemStatusFail, which can be called within callback-mapped
  memory function (icmMemReadFn or icmMemWriteFn) to specify that the access
  has failed (reported in the return code from the read and write functions
  listed above).
- Added member ICM_ATTR_NOTRACE_ANNUL to processor attributes enumeration
  (icmNewProcAttrs): if present, this prevents trace being emitted for annulled
  delay slot instructions.

VMI API
-------------------------------------------------------------------------------
- vmirtReadNByteDomain and vmirtWriteNByteDomain now have a return code of type
  memMapped. The return code is one of:
    MEM_MAP_NONE: entire read/write failed;
    MEM_MAP_PART: some part of the read/write failed and some part succeeded;
    MEM_MAP_FULL: entire read/write succeeded.
  In the case of writes, unwritable bytes are ignored; in the case of reads,
  unreadable bytes are filled with the pattern 0xbadc0de4.

Multicore2 Demos
-------------------------------------------------------------------------------
The application 'multicore2.c' used in demos has been altered to split the
receiving and writing parts into separate files. While the code generated is
the same this improves the visualization while debugging.

Demos for Eclipse Helios 3.6.2
-------------------------------------------------------------------------------
The Eclipse demo scripts provided in multi-core demos have been extended to
show how to select the core that you wish to debug.
Additionally, if the Imperas M*SIM is available, how to select and debug multiple
cores.

MIPS Processor Model
-------------------------------------------------------------------------------
- The 'modelconfig' attribute is deprecated. Use 'variant' instead.
- Config7.WII has been implemented (processors are awoken from WAIT instruction
  by interrupt even if interrupts are disabled or the processor is interrupt
  exempt). This bit is enabled in default configurations of 24K, 34K, 74K, 1004K
  and 1074K variants.
- Register view (function mips32RegInfo) has been enhanced to allow access to
  shadow registers, where the processor implements them.
- Boolean attribute MIPS_TRACE has been added which (if set to "enable") causes
  instruction and register traces to be emitted in standard MIPS format
  (specifically, only register changes are reported).
- LLaddr register removed from 4K, 24K and 74K variants.
- Address held in LLaddr register changed from virtual to physical.
- SC now validates only that LLbit is set when performing write (not that the
  physical address matches).
- Debug mode is partially implemented.
- Config1.EP is enabled to indicate presence of debug mode.
- Fixed bug in update of TCStatus.DT (in some circumstances, this bit was set to
  1 one instruction too early).

###############################################################################
##                                                                           ##
## Date 2011-April-27                                                        ##
##                                                                           ##
## Release 20110427.0                                                        ##
##                                                                           ##
###############################################################################

Demos for Eclipse Helios 3.6.2
-------------------------------------------------------------------------------
A number of Demos now have additional scripts, identified by the prefix
DEBUG_ECLIPSE_ that setup an Eclipse workspace to contain a project that will
allow the application to be debugged using Eclipse CDT.
These make use of an Imperas Eclipse installation provided as an installer
Imperas_Eclipse_Helios_3_6_2.0.exe (A linux installer will be available later)

ARM Integrator Compact Platform added for Cortex-A9UP
-------------------------------------------------------------------------------
This release includes a platform based on the ARM 'Integrator' design with a
Linux kernel built for the ARM Cortex-A9

Source of Processor and Peripheral Models
-------------------------------------------------------------------------------
The source of processor and peripheral models is now included in the model
and simulator packages available for download from www.ovpworld.org
The www.ovpworld.org/library pages used to have .zip files that included the
source of the models - these are no longer needed and have been removed.

API Doxygen Formatting enhancement
-------------------------------------------------------------------------------
The OVP APIs documentation is created using Doxygen and can be viewed as part
of the OVP Local Documentation at $IMPERAS_HOME/doc/index.html.  This format
has been enhanced for readability and a search function on the top left has
been added.

ARM NEON support
-------------------------------------------------------------------------------
The ARM VFPv3 and Advanced SIMD instruction set extensions (aka NEON) have been
added for the Cortex v7-A and v7-R architectures. (Note that the pre-v7 VFP
instructions (VFPv2) are NOT supported.) All instructions including the
half-precision extensions are supported.

A new processor attribute named 'enableVFPAtReset' has been added. When set to
'1' this will change the reset values for the FPEXC.EN, CPACR.CP10 and
CPACR.CP11 fields so that SIMD/VFP instructions are enabled (when these bits
are not set these instructions give an Undefined Instruction exception). This
attribute is added as a convenience, so that it is not necessary to have boot
code that sets these fields.

Evaluation Licenses
-------------------------------------------------------------------------------
The mechanism related to licensing copies of OVPsim for evaluation has changed
and now OVPsim connects to the internet as part of the licensing. If OVPsim
cannot connect to the internet, or is blocked by firewall software, then the
software will not run. If this occurs during your evaluation, then please
allow your computer to connect to the internet and try to run OVPsim again.
If you need evaluation licenses for OVPsim that can be used with no internet
connection - then please email your request and reasons / information to
license@ovpworld.org.

VMI Run Time Interface (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- 16-bit integer type vmi_FT_16_INT added to vmiFType (allowing conversion
  between 16-bit signed integers and floating point types).
- 16-bit and 32-bit unsigned integer types vmi_FT_16_UNS and vmi_FT_32_UNS added
  to vmiFType (allowing conversion between unsigned integers and floating point
  types).
- new member vmi_FMSUBR added to vmiFTernop enumeration (multiply and subtract
  reversed).
- Argument indeterminateUns16 added to vmirtConfigureFPU to allow the
  indeterminate result value for 16-bit integers to be specified.
- Arguments indeterminate16ResultCB, indeterminate32ResultCB and
  indeterminate64ResultCB added to vmirtConfigureFPU to allow more flexible
  determination of indeterminate values.
- Argument fzClearsPF added to vmirtConfigureFPU to support ARM processors
  (which do not set precision flag when floating point results are flushed to
  zero).

Processor ISS Encapsulation
-------------------------------------------------------------------------------
A generic example showing how a third party ISS can be encapsulated and used
within the OVP simulation environment has been added into the Examples
directory supplied at Imperas/Examples/Models/Processor/Encapsulation
This now means that the specific example showing the encapsulation of the
Tensilica Xtensa processor model is no longer included. If you wish to use the
Tensilica Xtensa processor ISS within OVP please contact info@imperas.com

###############################################################################
##                                                                           ##
## Date 2011-April-08 (intermediate limited release)                         ##
##                                                                           ##
## Release 20110330.1                                                        ##
##                                                                           ##
###############################################################################

OVPsim/SystemC/Debugger
-------------------------------------------------------------------------------
- Bug causing a platform to restart after completion has been fixed.
- Bug causing OVPsim to ignore the return value of the end-of-schedule callback
  fixed.

TLM2.0
-------------------------------------------------------------------------------
The TLM2.0 interface now propagates SystemC hierarchical names to ICM platform
components.

The TLM2.0 interface can produce trace messages to help with debug. Please
refer to OVPsim_Using_OVP_Models_in_SystemC_TLM2.0_Platforms.pdf.

MIPS Processor Model
-------------------------------------------------------------------------------
- Bugs related to incomplete implementation of per-TC Status.FR have been
  fixed (specifically affecting mttc1, mftc1).
- Status.FR is now copied on a fork instruction.
- Register access from platform is now supported at both VPE and TC levels in
  MT variants.
- Built in support for MIPS AVP test termination added.
- Reset signal is now level-sensitive (processor will remain halted while reset
  is high).

ARM models
-------------------------------------------------------------------------------
- ARMM now has 16 external interrupts.
- ARM1136J-S now uses ARMv6K profile instead of ARMv6 (matches latest ARM
  documentation).
- Fixed bug which prevented multiple TLB lockdown entries for different ASIDs
  coexisting.
- Added multiprocessing extensions:
  - decode added for ARMv7 PLDW instruction;
  - SCTLR.SW enable of SWP/SWPB instructions added;
  - TLBIALLIS, TLBIMVAIS, TLBIASIDIS, TLBIMVAAIS and TLBIMVAA TLB maintenance
    registers added;
  - variant Cortex-A9MP added (use attribute override_numCPUs to change the
    number of cores from the default, which is 4).

###############################################################################
##                                                                           ##
## Date 2011-Feb-24                                                          ##
##                                                                           ##
## Release 20110223.0                                                        ##
##                                                                           ##
###############################################################################

Micrium uC/OS-II Demo
-------------------------------------------------------------------------------
A new demo has been added showing the Micrium uc/OS-II running on the ARM
Cortex-M3 processor model. This is available to download.

OVP Model Source Code
-------------------------------------------------------------------------------
All source code for OVP models is now included in the release. The source code
is found in the Vendor Library Name Version (VLNV) library structure found
at $IMPERAS_HOME/ImperasLib/source.

Building is carried out using the Makefile found at
        $IMPERAS_HOME/ImperasLib/source/Makefile.library

This requires certain arguments
   Must be set to identify the source library
     VLNVSRC    is typically set to $IMPERAS_HOME/ImperasLib/source but can be
                any source library in the correct VLNV structure
   Set one of the following to direct identify the output location to be used
     SYSTEMVLNV is set to build into the standard product output library
     VLNVROOT   is set to an alternative output library


ICM API (See OVP and CpuManager User Guide)
-------------------------------------------------------------------------------
- For clarity ICM functionality has been split into several header files.
  Existing applications can continue to use the existing header.

-------------------------------------------------------------------------------
- An extra argument (the current processor) has been added to icmReadBus and
  icmWriteBus. This should be NULL if this bus access is not caused by the
  current processor.
- These functions have been added to allow easier access to registers:
	icmGetRegByName
	icmGetRegByUsage
- These functions have been added to support register groups
	icmGetNextRegGroup
	icmGetRegGroupByName
	icmGetRegGroupName
	icmGetNextRegInGroup
	icmGetRegInfoGroup
- These functions have been added to allow exception state to be accessed:
    icmGetException
    icmGetNextException
    icmGetExceptionInfoName
    icmGetExceptionInfoCode
- These functions have been added to allow processor mode to be accessed:
    icmGetMode
    icmGetNextMode
    icmGetModeInfoName
    icmGetModeInfoCode

ICM Debugger Integration Example
-------------------------------------------------------------------------------
Example $IMPERAS_HOME/Examples/Platforms/debuggerIntegration has been modified
to demonstrate usage of the new ICM API functions listed above.

PSE Read/Write Memory Warning Corrected
-------------------------------------------------------------------------------
A warning is generated when a PSE attempts to read or write from an area of
memory that cannot support the access. This was testing with an incorrect
address calculation that was producing a warning when it should not have.

SystemC TLM2.0 Integration
-------------------------------------------------------------------------------
Net and Bus connect methods have been disambiguated.

A processor TLM interface can be configured to raise an interrupt if a TLM
transaction os not completed by a memory or peripheral device. This behavior
has been added to the ARM model.

SystemC Filenames
-------------------------------------------------------------------------------
The model file platform.cpp has been renamed tlmPlatform.cpp.
Other model files used in the SystemC TLM2.0 integration have also been renamed.

FlexLM License Queuing
-------------------------------------------------------------------------------
License Feature request can now queue and retry, rather than simply exiting
to enable this feature set the following environment variable
IMPERAS_QUEUE_LICENSE=1

SYSTEMC Building Makefile Examples
-------------------------------------------------------------------------------
The usage of the SYSTEMC_HOME and TLM_HOME environment variables was
inconsistent within the examples and demos provided as part of OVP. These have
all now been made consistent.
SYSTEMC_HOME=root of System C installation for Linux or Windows
TLM_HOME=root of TLM installation

VMI API
-------------------------------------------------------------------------------
- Major version is now 3 because of significant API changes.
- Registers may now be associated with a group (for debugger presentation): see
  vmiDbg.h for the definition of the vmiRegGroup type and its usage.
- Processor models should define new debugger integration functions in the
  vmiAttrs structure:
  - a register group iterator, which returns each register group in turn.
  - an exception description iterator, which returns the name and model-specific
    code for each exception type in turn.
  - a mode description iterator, which returns the name and model-specific code
    for each processor mode in turn.
  - a current mode method, which returns the description of the current
    processor mode.
- vmimtTryStoreRC and vmimtTryLoadRC now accept 'bits' of any power of two up to
  1024 (i.e. up to 128 bytes).
- Function vmirtSetPCException has been added to allow explicit identification
  of control flow changes caused by exceptions (as opposed to normal branches)
- Exception and mode switch programmer's view events are now created implicitly
  for all processors.

MIPS Processor Model
-------------------------------------------------------------------------------
- Bug fixed in RI/XI bit implementation for M14K.
- Moved implementation of MVPConf0 register to CPU level.
- Implemented MVPConf1 register at CPU level.
- Added MTFPU configuration option (enables multithreaded FPU)
- Restrict registers transferred by the dbg /g command to GPRs, sr, lo, hi, bad,
  cause, pc, FPRs, fsr, fir.
- vmiRegInfo objects have been assigned register groups.
- vmiExceptionInfo and vmiModeInfo accessors implemented.

ARM models
-------------------------------------------------------------------------------
- Simplified coprocessor module (merged CP14 and CP15 tables).
- Implemented ThumbEE extension for ARMv7 on.
- Migrated to use standard ARM names for coprocessor registers (e.g. MIDR).
- TEX remap registers implemented
- vmiRegInfo objects have been assigned register groups.
- vmiExceptionInfo and vmiModeInfo accessors implemented.
- Changed external interrupts to be edge sensitive instead of triggering on
  callback with or without a value change.

Files containing port number may be created when ports opened
-------------------------------------------------------------------------------
This allows a script to open the next available port (set port=0) from the pool
and then obtain the number of the port opened from a file.
- GDB port connection
  An environment variable IMPERAS_PORT_FILE may be set to the name of a file
  that will be created containing the port number of a socket opened by the
  simulator when a port is opened to connect to GDB.
- pseSocket modelSupport port connection
  An environment variable IMPERAS_SOCKET_FILE may be set to the name of a file
  that will be created containing the port number of a sockets opened by a PSE
  peripheral that utilizes the pseSocket model support library.

Simulator Core
-------------------------------------------------------------------------------
- Fixed bug in vmirtGetString (it returned an empty string for memory regions
  implemented by device callbacks)
- SIGSEGV Handler
  OVPsim and CpuManager install a SIGSEGV handler in icmInit() and rely on this
  signal to handle unmapped memory accesses. The simulator will now ensure that
  previously installed handlers will be called if the current fault address is
  not recognized.
  Handlers installed AFTER icmInit() must also do this.

###############################################################################
##                                                                           ##
## Date 2011-Jan-14                                                          ##
##                                                                           ##
## Release 20101126.5                                                        ##
##                                                                           ##
###############################################################################

ARM models
-------------------------------------------------------------------------------
- Fixed bug in Cortex-M3 exceptions (incorrectly not masked by PRIMASK in some
  cases).
- Made disassembly UAL syntax by default

mips32Newlib semihost library
-------------------------------------------------------------------------------
Added support for Code Sourcery Pro version compiler in the mips32Newlib
semihost library.

###############################################################################
##                                                                           ##
## Date 2011-Jan-6                                                          ##
##                                                                           ##
## Release 20101126.4                                                        ##
##                                                                           ##
###############################################################################

Linux Installer
-------------------------------------------------------------------------------
The Linux Installer now prompts for an installation directory.
The default installation directory does not include the minor release number
only the major release number is used.

ARM models
-------------------------------------------------------------------------------
- Added a Programmer's View Event trigger when a Reset exception occurs
  (previously this was the only exception that did not trigger an event).

###############################################################################
##                                                                           ##
## Date 2010-Dec-21                                                          ##
##                                                                           ##
## Release 20101126.3                                                        ##
##                                                                           ##
###############################################################################

MIPS Processor Model
-------------------------------------------------------------------------------
Implemented RI/XI bit for M14K

ARM Cortex Model compatibility Mode
-------------------------------------------------------------------------------
One of the modes has been renamed to nopBKPT as it is used to modify the
operation of the BKPT instruction to a NOP. This instruction is used by the
ARM RDI Monitor to gain control. The OVP debugging does not use this so in this
compatibility mode 'ignores' the instruction.

ARM Cortex-M3 CrossCompiler and default linker script
-------------------------------------------------------------------------------
The CrossCompiler file makefile.include (ARM_CORTEX_M3.makefile.include that
was formerly ARM_CORTEX-M3.Makefile.include) that is included when building for
the ARM Cortex-M3 has been renamed to ARM_CORTEX_M3 to avoid a gnu gcc compile
time warning.
The use of the CROSS variable in a Makefile to use this tool chain will need to
be updated.
The default linker script specified in ARM_CORTEX_M3 makefile.include has been
changed to use the generic-m-hosted linker script. The OVP semihosting utilizes
the included calls (read, write, exit, etc...) by intercepting them to provide,
for example, output to stdout.
Demo applications have been modified accordingly.

SELinux security issues
-------------------------------------------------------------------------------
Some of the executables and shared libraries were being flagged as a potential
risk on Linux due the the presence of the flag execstack flag in the elf header
This was in fact erroneous due the the fact that no code is executed on the
stack, but the presence of the flag causes a problem for SELinux.
This is now resolved

ovpworld.org peripheral component library
-------------------------------------------------------------------------------
The following Models have been moved to new vendor specific libraries
directories, to reflect the true functional device being modeled

Previous model Location                       New model Location
------------------------------------------    --------------------------------------------
ovpworld.org/peripheral/NicAM79C97x        -> amd.ovpworld.org/peripheral/79C970
ovpworld.org/peripheral/FloppyDrive        -> intel.ovpworld.org/peripheral/82077AA
ovpworld.org/peripheral/IntervalTimerI8253 -> intel.ovpworld.org/peripheral/8253
ovpworld.org/peripheral/IntPIIX4E8259      -> intel.ovpworld.org/peripheral/8259A
ovpworld.org/peripheral/PciPIIX4Ebase      -> intel.ovpworld.org/peripheral/82371EB
ovpworld.org/peripheral/PciPM              -> intel.ovpworld.org/peripheral/PciPM
ovpworld.org/peripheral/PciUSB             -> intel.ovpworld.org/peripheral/PciUSB
ovpworld.org/peripheral/Ps2Control         -> intel.ovpworld.org/peripheral/Ps2Control
ovpworld.org/peripheral/PciIDE             -> intel.ovpworld.org/peripheral/PciIDE
ovpworld.org/peripheral/Uart16450          -> national.ovpworld.org/peripheral/16450
ovpworld.org/peripheral/Uart16450C         -> national.ovpworld.org/peripheral/16450C
ovpworld.org/peripheral/SysGT6412x         -> marvell.ovpworld.org/peripheral/GT6412x
ovpworld.org/peripheral/MaltaFPGA          -> mips.ovpworld.org/peripheral/MaltaFPGA
ovpworld.org/peripheral/SmartLoaderLinux   -> mips.ovpworld.org/peripheral/SmartLoaderLinux
ovpworld.org/peripheral/RtcMC146818        -> motorola.ovpworld.org/peripheral/MC146818
ovpworld.org/peripheral/VgaCLGD54xx        -> cirrus.ovpworld.org/peripheral/GD5446

All platforms which use these peripherals have been updated to reflect the changes

###############################################################################
##                                                                           ##
## Date 2010-Dec-06                                                          ##
##                                                                           ##
## Release 20101126.2                                                        ##
##                                                                           ##
###############################################################################

ARM Cortex-M3 Demos
-------------------------------------------------------------------------------
A set of demos are available for the ARM Cortex-M3 processors. These are provided
as a single processor platform, dual processor platform and a manycore processor
platform. They have been provided with several benchmark applications to run,
including dhrystone, fibonacci etc.

ARM Cortex-M3 model added
-------------------------------------------------------------------------------
Support for the ARM Cortex-M3 device has been added into the model named 'armm'
found in the vendor directory 'arm.ovpworld.org'.
Along with the model are provided a number of specific ARM Cortex-M3 demos.
These include, single and multiple processor platforms running applications
such as benchmarks dhrystone, linpack and fibonacci and application using
shared memory to communicate between processors.

##
## 2010-11-26
##

ARM models
-------------------------------------------------------------------------------
- ARMv7 instructions have been added.
- Fixed bug in Thumb-mode LDR/STR immediate (address was sometimes wrong).
- Fixed bugs in Thumb-mode 32-bit LDR/STR instructions (these now take account
  of whether unaligned exceptions should be generated or not).
- Fixed STREX to validate alignment/permission prior to exclusive access check.
- Made LDM fully compliant with Base Restored Abort Model (previously, the base
  register was not restored if it was in the list of registers loaded).
- Various minor UAL-format disassembly bugs have been fixed.
- Model has been updated for compatibility with recent gnu toolchains.

MIPS models
-------------------------------------------------------------------------------
- Various corner-case bugs in FPU (coprocessor 1) instructions have been fixed.

Runtime Selection
-------------------------------------------------------------------------------
New files (switchRuntime.bat/sh) have been added into Imperas/bin to allow
the selection of a simulation runtime from those available in the installation.

Makefiles
-------------------------------------------------------------------------------
When linking platforms using the supplied makefile, the path to the runtime
library libRuntimeLoader is no longer hardcoded, this is now referenced
by the LD_LIBRARY_PATH

Platforms using MIPS processor models
-------------------------------------------------------------------------------
There are several vendors that can supply models. Several platforms have been
expanded so that they use the processor model included in the package with the
platform.

CheckInstall utility Program
-------------------------------------------------------------------------------
This utility program has added a new option to provide the current environment
variables associated with an OVP installation.

ICM API
-------------------------------------------------------------------------------
- A new function icmDebugThisProcessor() specifies which processor to connect
  to a single core debugger. This function replaces the attribute
  ICM_ATTR_DEBUG, which is deprecated.
- Function icmFindProcessorByName(const char *name)
  Now has just one argument (name) and will return any processor or sub-processor
  from a platform.
- icmMemReadFn function type has additional arguments 'VA' (giving the virtual
  read address) and 'isFetch' (True if the read is an instruction fetch; False
  if it is a load).
- icmMemWriteFn function type has additional argument 'VA' (giving the virtual
  write address).
- icmMemWatchFn function type has additional argument 'VA' (giving the virtual
  read/write address).

VMI Run Time Interface (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- vmiMemReadFn function type has additional arguments 'VA' (giving the virtual
  read address) and 'isFetch' (True if the read is an instruction fetch; False
  if it is a load).
- vmiMemWriteFn function type has additional argument 'VA' (giving the virtual
  write address).
- vmiMemWatchFn function type has additional argument 'VA' (giving the virtual
  read/write address).
- New functions vmirtAddFetchCallback and vmirtRemoveFetchCallback allow
  processor fetches to be monitored.
- Final argument of vmirtRead*/vmirtWrite* functions has been changed from
  Boolean 'trueAccess' to enumeration 'attrs', allowing specification of reads
  and writes that are true processor writes but which ignore privilege
  exceptions.

VMI Memory Model Component Interface
-------------------------------------------------------------------------------
- Full read and write callbacks are now of types vmiMemReadFn and vmiMemWriteFn,
  respectively.
- Transparent read and write callbacks are now of type vmiMemWatchFn.

VMI Debug Interface
-------------------
- vmiRegInfoFn (defined with VMI_REG_INFO_FN macro) now has 'gdbFrame' argument,
  indicating whether the iteration is to prepare registers for a gdb /g command
  (the format of these is often very specific and any deviation may cause a gdb
  assertion).

###############################################################################
##                                                                           ##
## Date 2010-Sep-06                                                          ##
##                                                                           ##
###############################################################################

ARM models
-------------------------------------------------------------------------------
The ARM models have been greatly enhanced: new ARM1136J-S and ARM1156T2-S
variants are now available.

MIPS models
-------------------------------------------------------------------------------
The MIPS models now include the microMIPS M14K variants. SMP variants have been
revised to use new simulator features.

VMI vmiIASAttr Structure
------------------------
A new callback function field has been added: fetchSnapCB. This optional
function takes a processor structure and an address as arguments and returns the
address snapped to an instruction fetch boundary, if required. Previously, the
only way to snap fetch addresses was in the instruction fetch exception handler
(ifetchExceptCB).

VMI Run Time Interface (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions have been added to simplify specification of pages in virtual
  memory systems, including mapping by ASID: see vmirtAliasMemoryVM,
  vmirtUnaliasMemoryVM, vmirtGetDomainMappedASID, vmirtSetProcessorASID and
  vmirtGetProcessorASID.
- Function vmirtMapVAToPA has been enhanced to return the final memory domain
  (memDomainP) to which a simulated address is mapped.
- New functions have been added for enhanced SMP support: see vmirtSetSMPParent
  and vmirtSetSMPIndex. Old SMP support functions vmirtMigrate and
  vmirtSetSMPContext have been removed.
- Function vmirtSetDebugName has been removed and replaced with the more generic
  vmirtSetProcessorName.
- Functions vmirtSetProcessorCodeDomains and vmirtSetProcessorDataDomains have
  been added. These allow the memory domains associated with processor
  dictionaries to be modified.
- Processor model timers may now be used at any level in an SMP hierarchy.
- The callback function prototypes to vmirtAddReadCallback,
  vmirtAddWriteCallback, vmirtRemoveReadCallback and vmirtRemoveWriteCallback
  have been modified to emphasize that the supplied value is read only

VMI Morph Time Interface (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- Function vmimtGetSMPParentRegister has been added. This allows reference to be
  made to registers in a parent of the current processor, even when that parent
  changes dynamically at run time (see vmirtSetSMPParent).

VMI Processor Constructor
-------------------------
There is a new smpContext argument to the processor constructor which allows
SMP member characteristics to be initialized. This replaces the function
vmirtSetSMPContext, which has been deleted.

mips.ovpworld.org MipsMaltaLinux platform
-------------------------------------------------------------------------------
The instantiation of the Flash memory has changed so that it is now correctly
added at a memory mapped address of 0x1e000000 and is then mapped to the
address 0x1fc00000. Note address 0x1fc00010 contains the boardId (0x420 default)

ovpworld.org SmartLoaderLinux Peripheral
-------------------------------------------------------------------------------
Correct usage of virtual and physical addresses in model code. This model has
been recoded to provide initialization of only the Malta Flash area. See
change to Malta platform.
Added support for loading Linux kernel and ramdisk onto Android Goldfish
platform.

modelSupport SDL support library
-------------------------------------------------------------------------------
Added bit per pixel argument to the initialization of the SDL display.

###############################################################################
##                                                                           ##
## Date 2010-May-28                                                          ##
##                                                                           ##
###############################################################################

Mentor Graphics Nucleus Demonstrations
-------------------------------------------------------------------------------
Demonstrations of the Nucleus OS are provided on both the ARM IntegratorCP and
the MIPS Malta platforms.

Core Simulator Performance Improvements
---------------------------------------
Native code emitted by the product JIT compiler has been improved; some examples
run up to 50% faster.

Tensilica Model Integration and Toolchain Support
-------------------------------------------------------------------------------
The Tensilica model integration layer is built and compatible with the
Tensilica release RB-2009.5 toolchain, previous releases were built and were
compatible with release RB-2008.3

TLM2.0 model Library
-------------------------------------------------------------------------------
TLM2.0 model wrappers are now automatically written by igen and have changed
style, requiring new arguments for construction and binding. Processor
models now have separate INSTRUCTION and DATA ports, all ports now use names
as defined in the ICM interfaces.

There is a partial TLM2.0 implementation of the MIPS MALTA platform.

Model Library
-------------------------------------------------------------------------------
A new model has been added for the POWERPC. This is currently a 32 bit ISA
representation, supporting both big and little endian. Chip variants are in
development and will be released shortly.
In addition to the model there is a gnu based compiler toolchain, a tlm
processor wrapper and a number of Demos showing the use of this model.
The VLNV reference for this model is :-
    power.ovpworld.org/processor/powerpc32/1.0
The Newlib semihost library for the gnu toolchain can be found under :-
    power.ovpworld.org/semihosting/powerpc32Newlib/1.0

Peripheral Model SmartPromLoader is deprecated
-------------------------------------------------------------------------------
This model is superseded by the SmartLoaderLinux

mips.com/semihosting/mips32Newlib
-------------------------------------------------------------------------------
Added semihosting support of mdi_getargs and mdi_exit functions to support
startup and exit of elf files created by latest version of umips toolchain.

checkinstall.exe
-------------------------------------------------------------------------------
Fixed a bug in this program that is called by demo scripts to ensure all the
packages needed to run that demo are installed. It would issue erroneous
messages that a package was missing if the name of the package was too long.

VMI Morph Time Interface (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- instruction temporaries can now be specified using VMI_CPU_TEMP macro - these
  allow more efficient code generation

Peripheral Model Tracing
-------------------------------------------------------------------------------
Simulator diagnostics for peripheral model accesses are now enabled when
the diagnostic level is set to or set above level 16, previously the level to
obtain simulator diagnostic information was 4.

###############################################################################
##                                                                           ##
## Date 2010-Mar-31                                                          ##
##                                                                           ##
###############################################################################

New functions icmTriggerAfter and icmCancelTrigger
-------------------------------------------------------------------------------
ICM API functions (only available in Professional Tools) Calls the given
function after a specified delay.

icmTryVlnvString()
-------------------------------------------------------------------------------
The new function icmTryVlnvString() is similar to icmGetvlnvString().

icmTryVlnvString() silently returns null if no model matches the VLNV spec.
Use this if your platform needs to search several places for a model.

icmTryVlnvString() reports an Error if no model matches the VLNV spec.
Use this if your platform will fail without this particular model.

Changes to vmiSymbols
-------------------------------------------------------------------------------
The sections defined in an ELF or COFF file now have vmiSymbols created for
them so that there are now entries in the symbol table with type
VMI_SYMBOL_TYPE_SECTION. (This value was always there but no symbols of
this type were created.)

The order of the values in the enum vmiSymbolType in vmiTypes.h has changed.
Anything that depends on the actual values of these enums will be affected.

Also, when there are multiple symbols defined for an address the symbols will
be returned in order from the highest value for the vmiSymbolType enum to the
lowest value. Previously, the order in which multiple symbols for an address
would be returned was dependent on the order they were parsed out of the ELF
file. Thus anything that uses the first symbol returned for an address may
see its behavior change. This includes labels on instruction tracing.

vmirtTraceOnAfter() & vmirtTraceOffAfter()
-------------------------------------------------------------------------------
It is now possible to turn instruction tracing on or off from an intercept
library or plugin.

Custom Object file loader
-------------------------------------------------------------------------------
It is now possible to write an object file loader to read formats other than
those supported by the standard tool. See the OVPsim and CpuManager User guide
and icmInstallObjectReader in ImpPublic/include/host/icm/icmCpuManager.h
and ImpPublic/include/host/icm/icmObjAttrs.h

ICM_DISASSEMBLE_LABELS Has been deprecated.
-------------------------------------------------------------------------------
Instruction disassembly always includes labels where possible.

PSE SOCKET can finish a simulation on disconnect
-------------------------------------------------------------------------------
- The common code in modelSupport to allow peripheral models to attach to
  sockets now allows the simulation to terminate when a socket has been
  disconnected.
- The UART models have an additional attribute 'finishOnDisconnect' that should
  be set to 'on' to enable this feature

TLM 2.0 DECODE BUS EXAMPLE
-------------------------------------------------------------------------------
- The TLM2.0 DecodeBus file has been modified so that it causes a processor
  exception if the address cannot be decoded. Previously it had caused an
  assertion. This allows an OS like Linux that remaps memory to work correctly.
- A new TLM2.0 file DecodeBusFailOnError maintains the original code and stops
  the simulation with an error if the bus decode fails.

TLM 2.0 WRAPPER icmCpu.cpp
-------------------------------------------------------------------------------
- This interface, as provided, does not support byte enables and so the
  reporting of the bytes used has been removed from the wrapper. TLM2.0
  transactions will now always assume the transfer is word sized.

ICM INTERFACE
-------------------------------------------------------------------------------
- New function icmInFetchContext() returns a Boolean indicating if the currently
  active memory read callback (installed using icmMapExternalMemory) is being
  called to fetch instruction bytes (if True) or data bytes (if False).

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- Unary operations added:
	vmi_CLZ     (count leading zeros)
  	vmi_CLO     (count leading ones)
  	vmi_ABS     (get absolute value)
  	vmi_NEGSQ   (negate with saturation)
  	vmi_ABSSQ   (get absolute value with saturation)
- Binary operations added:
	vmi_ADDSQ   (add signed with saturation)
	vmi_SUBSQ   (subtract signed with saturation)
	vmi_RSUBSQ  (reverse-subtract signed with saturation)
	vmi_ADDUQ   (add unsigned with saturation)
	vmi_SUBUQ   (subtract unsigned with saturation)
	vmi_RSUBUQ  (reverse-subtract unsigned with saturation)
	vmi_ADDSH   (signed add and right shift by one)
	vmi_SUBSH   (signed subtract and right shift by one)
	vmi_RSUBSH  (reverse signed subtract and right shift by one)
	vmi_ADDUH   (unsigned add and right shift by one)
	vmi_SUBUH   (unsigned subtract and right shift by one)
	vmi_RSUBUH  (reverse unsigned subtract and right shift by one)
	vmi_ADDSHR  (signed add and right shift by one with rounding)
	vmi_SUBSHR  (signed subtract and right shift by one with rounding)
	vmi_RSUBSHR (reverse signed subtract and right shift by one with rounding)
	vmi_ADDUHR  (unsigned add and right shift by one with rounding)
	vmi_SUBUHR  (unsigned subtract and right shift by one with rounding)
	vmi_RSUBUHR (reverse unsigned subtract and right shift by one with rounding)

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions vmirtCreateModelTimer, vmirtDeleteModelTimer, vmirtSetModelTimer
  and vmirtClearModelTimer added to allow processors to have multiple
  instruction timers.
- New function vmirtGetSMPActiveSibling allows the active sibling in an SMP
  group to be found.
- Existing function vmirtGetProcessorEndian replaced with two new functions,
  vmirtGetProcessorCodeEndian and vmirtGetProcessorDataEndian, enabling models
  with different endianness for instruction fetches and data accesses.

VMI DEBUG INTERFACE
-------------------------------------------------------------------------------
Added processor argument to vmiRegInfoFn callback

TLM2.0 'SimplePlatform' Example
-------------------------------------------------------------------------------
This platform and associated application has been changed to use the OR1K
processor so that it is in line with all other Examples.

Installation Verification Utility
-------------------------------------------------------------------------------
A new executable checkinstall.exe has been added. This will use the file
InstallLog.txt in order to check that a valid installation still exists.
When running a Demo it will check that the required packages have been
installed.

CodeSourcery G++ Lite Toolchain for Application compilation for MIPS32
-------------------------------------------------------------------------------
The include Makefiles have been modified to allow the root of a CodeSourcery
G++ Lite Toolchain (http://www.codesourcery.com/sgpp/lite/mips) to be specified
and used in the compilation of application code for the MIPS cores.
The environment variable MIPS_TOOLCHAIN_ROOT should be set to the directory
containing the bin and lib directories, for example
export MIPS_TOOLCHAIN_ROOT=/user/CodeSourcery/Sourcery_G++_Lite

###############################################################################
##                                                                           ##
## Date 2010-Jan-22                                                          ##
##                                                                           ##
###############################################################################

ICM INTERFACE
-------------------------------------------------------------------------------
New function icmSetTextOutputFn() allows all ICM text output to be
redirected to a user defined function and define the action on a fatal occurrence.
New function icmGetPlatformName() returns the (optional) platform name.
New function icmFindProcessorByName() returns the object from its name.
New function icmFindPseByName() returns the object from its name.
New function icmProcessorIsVisible() returns true if TC is active.

VMI MORPH TIME INTERFACE
-------------------------------------------------------------------------------
Native floating point support enhanced; see VMI Morph Time Function Reference
documentation for details

VMI RUN TIME INTERFACE
-------------------------------------------------------------------------------
Native floating point support enhanced; see VMI Run Time Function Reference
documentation for details
New function vmirtMapMemory allows unmapped regions in a memory domain to
be implemented as RAM or ROM
New function vmirtMapCallbacks allows unmapped regions in a memory domain to
be implemented by callbacks
New function vmirtNextViewEvent allows access to existing events on a view
object.
New functions vmirtDLOpen, vmirtDLError, vmirtDLSymbol and vmirtDLClose added
to allow shared objects to be loaded and used within models

PPM INTERFACE
-------------------------------------------------------------------------------
New function ppmNextViewEvent allows access to existing events on a view
object.

CodeSourcery G++ Lite Toolchain for Application compilation for MIPS32
-------------------------------------------------------------------------------
Additional include Makefiles have been defined to ease the compilation of
applications targeted at MIPS32 processor variants. The CodeSourcery G++ Lite
Toolchain (http://www.codesourcery.com/sgpp/lite/mips) creates code for the MIPS
cores. As with all OVP models the same binary code can be run on the silicon
device or on a configured OVP MIPS32 model.

Model Library
-------------------------------------------------------------------------------
Some of the models have been moved so that they exist in their own vendor
specific libraries. This means that the models available from OVP World are now
in vendor specific libraries such as
  ARM related models and semihost libraries are found in arm.ovpworld.org
  ARC related models and semihost libraries are found in arc.ovpworld.org
  MIPS related models and semihost libraries are found in mips.ovpworld.org
this may require modification to platforms defined using the vendor entry.

A New model has been added for the NEC V850 series.
This models the V850, V850E, V850E1 and V850E2(Partial implementation)
Instruction set architectures more information can be found in the
library documentation.

New Models have been added for MIPS, these are 74Kc, 74Kf, 1004Kc, 1004Kf

FlexLM Utilities
-------------------------------------------------------------------------------
The FlexLM utilities are no longer included as separate executables. The
utility lmutil(.exe) can be used to run any of the previously supplied FlexLM
utilities.
For example, to use lmhostid now invoke as an argument to lmutil
On Linux
  > lmutil lmhostid
or on Windows
  > lmutil.exe lmhostid

###############################################################################
##                                                                           ##
## Date 2009-Oct-16                                                          ##
##                                                                           ##
###############################################################################
ICM INTERFACE
-------------------------------------------------------------------------------
The ImpPublic/include/host/icm/icmMessage.h header file has now been deprecated,
its contents moved to icmCpuManager.h

icmSetReadWatchPoint, icmSetWriteWatchPoint, icmSetAccessWatchPoint
accept an icmBusP rather than a icmMemoryP;

The new function                   icmSetPlatformName(const char *name)
optionally sets a platform name.

A problem with icmLoadSymbols() sometimes not loading symbols has been fixed.

The method of linking ICM platforms has been changed to use a dynamically
switchable runtime library. When compiling platforms the user mut now link
to the Simulator runtime library libRuntimeLoader, using -lRuntimeLoader
This is reflected in all the Makefiles for building platforms

TLM 2.0 Wrappers and Header file changes
-------------------------------------------------------------------------------
The TLM 2.0 header files have had some minor alterations to support Cadence
Incisive SystemC simulator as well as the OSCI SystemC simulator
SystemC simulator.
1. SystemC pure virtual methods
   sc_trace.h includes two methods for set_time_unit. These are added to
   IMPERAS_HOME/ImpPublic/include/host/tlm2.0/advanceTime.h
2. Ambiguous use of connect()
   The use of connect() was ambiguous and so is now specified distinctly in
   IMPERAS_HOME/ImpPublic/include/host/tlm2.0/icmPeripheral.h


MIPS PROCESSOR MODEL
-------------------------------------------------------------------------------
COP1 (floating point unit) now supported
Shadow registers now supported

VMI MORPH TIME INTERFACE
-------------------------------------------------------------------------------
Native floating point support added; see VMI Morph Time Function Reference
documentation for details

VMI RUN TIME INTERFACE
-------------------------------------------------------------------------------
Native floating point support added; see VMI Run Time Function Reference
documentation for details

VMI API CHANGES
-------------------------------------------------------------------------------
vmiosAddCommand  has a new argument "const char *exampleArguments"
vmirtAddCommand  has a new argument "const char *exampleArguments"
vmimmcAddCommand has a new argument "const char *exampleArguments"
vmirtGetPlatformName() -new function.

SIMULATOR BUG FIXES
-------------------------------------------------------------------------------
Waiting for delay or event in SystemC memory callbacks now supported.

Excessive interrupt latency of CPU models in SystemC now fixed.

TLM2 Demonstrations
-------------------------------------------------------------------------------
The TLM2 demonstrations are provided separately from the OVPsim download.

Component arm.ovpworld.org/peripheral/IntICP/1.01
-------------------------------------------------------------------------------
The 'enable' register was always read as zero. This stopped the Nucleus
operating system booting on this platform.

###############################################################################
##                                                                           ##
## Date 2009-07-21                                                           ##
##                                                                           ##
###############################################################################

ARM Integrator Compact Platform added
-------------------------------------------------------------------------------
This release includes a platform based on the ARM 'Integrator' design.

It uses the ARM processor (variant ARM926EJ-S) and the following peripherals:
   Core module controller (*)
   ICP controller (*)
   Programmable Interval Timer
   Interrupt Controller
   Keyboard interface
   Multi-media card interface (*)
   Realtime Clock
   Uart
   LCD VGA display module (^)

NOTE:
1. Those marked with (*) only have basic register functionality. These and other
    peripherals are in development.
2. The LCD VGA display module marked with (^) has non-optimized refresh. This limits
   platform performance to a maximum of around 300 MIPS

A Linux installation which runs on this platform is available
from the ovp website.

ATMEL AT91SAM7 Series Platform added
-------------------------------------------------------------------------------
This release includes an example of the AT91SAM7 (ARM7TDMI based) platform
running uclinux. A Demonstration of the boot sequence can be found under
Imperas/Demo/OVPsim_uclinux_atmel_at91sam7
This makes use of a number of Peripherals and platforms which are packaged into
the Library 'atmel.ovpworld.org'. The current set of Peripherals includes
- AdvancedInterruptController
- ParallelIOControler
- PowerSaving
- SpecialFunction
- TimerCounter
- Usart
- WatchdogTimer
This platform is supplied as a Demo booting uClinux with a small ram disk

The calculated BogoMips for this platform is currently fixed at 250Mips

PPM Header API Correction
-------------------------------------------------------------------------------
A 'net' passes a ppmNetValue type which allows for any unsigned integer value
to be passed. A comment was corrected that inferred that a 'net' could only
carry the values '0' or '1'.

ARM model
-------------------------------------------------------------------------------
The new ARM model supports
    BIG and LITTLE endian
    variants for architecture and processors up to ISA ARMv5TEJ
        architectural variants:
            ARMv4xM ARMv4 ARMv4TxM ARMv4T
            ARMv5xM ARMv5 ARMv5TxM ARMv5T ARMv5TExP ARMv5TE ARMv5TEJ
        processor variants:
            ARM7TDMI ARM7EJ-S ARM720T
            ARM920T ARM922T ARM926EJ-S ARM940T ARM946E ARM966E ARM968E-S
            ARM1020E ARM1022E ARM1026EJ-S
    MMU, MPU and TCM are implemented

UART 16450 Model
-------------------------------------------------------------------------------
When a logfile is opened with the same name as an existing file, the existing
file is overwritten. Previous versions did not write to the logfile if it
already existed.
The UART model now supports record and replay.

ICM Platform with Imperas Interception Plugins
-------------------------------------------------------------------------------
An ICM platform defined that includes Imperas Binary Interception libraries.
Can now be run with OVPsim without the previous Fatal. This is now a warning
that indicates the Interception libraries were not loaded. The same ICM
platform can be invoked with the Imperas Proffessional tools in which the
Binary Interception Libraries are loaded.

VMI MORPH TIME INTERFACE
-------------------------------------------------------------------------------
- vmimtSetShiftMask added
  (allows the mask applied to shift/rotate amount for binops vmi_ROL, vmi_ROR,
  vmi_RCL, vmi_RCR, vmi_SHL, vmi_SHR and vmi_SAR to be overridden)

- new vmiUnop added:
    vmi_MOV         // d <- a

- new vmiBinops added:
    vmi_RSBB        // d <- b - a - C
    vmi_RSUB        // d <- b - a
    vmi_ORN         // d <- a | ~b
    vmi_ANDN        // d <- a & ~b
    vmi_XORN        // d <- a ^ ~b
    vmi_NOR         // d <- ~(a | b)
    vmi_NAND        // d <- ~(a & b)
    vmi_XNOR        // d <- ~(a ^ b)

- vmiFlags object has been enhanced to support flag negation when model flags
  are read or written (for example, simplifies modeling of the ARM processor,
  where subtract operations generate borrow, not carry). See the VMI Morph Time
  Reference for more details.

- vmimtSetAddressMask added
  (allows target and link addresses of subsequent jump opcodes to be masked)

- vmimtTestRCJumpLabel and vmimtCompareRCJumpLabel added
  (allow more efficient intra-instruction jumps)

VMI RUN TIME INTERFACE
-------------------------------------------------------------------------------
- vmirtFlushAllDicts added
  (allows all processor dictionaries to be flushed; typically used by intercept
  libraries when the functionality they implement is enabled or disabled)

- vmirtRead1ByteDomain, vmirtRead2ByteDomain, vmirtRead4ByteDomain,
  vmirtRead8ByteDomain, vmirtWrite1ByteDomain, vmirtWrite2ByteDomain,
  vmirtWrite4ByteDomain, vmirtWrite8ByteDomain added
  (allow endian-independent intercept libraries to be written more easily)

- New set of address range hash utility functions created (simplify modeling of
  TLB and cache related structures): vmirtNewRangeTable, vmirtFreeRangeTable,
  vmirtInsertRangeEntry, vmirtRemoveRangeEntry, vmirtGetFirstRangeEntry,
  vmirtGetLastRangeEntry, vmirtGetRangeEntryLow, vmirtGetRangeEntryHigh,
  vmirtGetRangeEntryUserData and vmirtSetRangeEntryUserData.

Platform Makefile
-------------------------------------------------------------------------------
Makefile.platform has been modified to create an executable that is identified
by the host architecture on which it can run. When the provided Makefile system
is used to compile and link a platform file the executable now generated is of
the form platform.<ARCH>.exe where previously the architecture on which the
executable could be run was not identified.

MIPS CrossCompiler Makefiles
-------------------------------------------------------------------------------
The default has been changed for the MIPS32 floating point usage to select the
software floating point library.

ICM API
-------------------------------------------------------------------------------

icmNewBusBridge
A new argument bridgeName has been added.
An error in the naming of the address parameters and their documentation has been corrected.
Refer to icmCpuManager.h for details.

(In the C++ ASPI icmBusObject::newBridge has been changed in the same way).

SIMULATOR BUG FIXES
-------------------
- Native code emission optimizer bug fixed (caused incorrect behavior when code block
  blocks self-eject in some circumstances).

- Simulations stuck in peripheral code can now be interrupted by hitting Ctrl-C
  twice.

- Memory subsystem bug fixed (caused incorrect behavior if alias region which
  itself has aliases containing code is re-aliased to a different address)

###############################################################################
##                                                                           ##
## Date 2009-05-18                                                           ##
##                                                                           ##
###############################################################################

Models
-------------------------------------------------------------------------------

The model ovpworld.org/mmc/endianSwap/1.0 will swap the endianness of 4-byte
transactions.

Licensing
-------------------------------------------------------------------------------
The OVPsim Product requires a License key - this is available from the OVP
website

MALTA PLATFORM / 8259 INTERRUPT CONTROLLER
-------------------------------------------------------------------------------
- The model of the 8259 has been improved to truly reflect the behavior of the
  hardware. There are now 2 discrete 8259 instantiations which use the
  cascaded interface in order to handle the master slave relationship

MIPS Model
-------------------------------------------------------------------------------
- enhanced to support an external interrupt controller

- enhanced to use physically-mapped code dictionaries for better performance

- mips34K verified booting and installing Linux (some mips34K TLB-related bugs
  were found and fixed)

- implemented relaxed TLB exception model supported by later MIPS processors

VMI INTERFACE
-------------------------------------------------------------------------------
- vmirtStop added
  (stops simulation and enters debug shell, if Imperas debugger is attached)

- vmimtValidateBlockMode and vmirtSetBlockMode added
  (allow easier implementation of some types of modal instruction)

- vmirtAliasMemory now allows specification of physical or virtual mapping when
  native code is generated (improves performance)

- vmirtMapVAToPA added
  (given a domain virtual address, returns the corresponding physical address)

- value argument in VMI_MEM_WRITE_FN/vmiMemWriteFn changed to type 'const void *'
  (disambiguates read and write callback functions)

- vmiosGetExtensionName added
  (allows extension to find its own name)

- thisPC argument added to VMIOS_INTERCEPT_FN/vmiosInterceptFn
  (intercept callbacks often need to know their own address)

ICM API
-------------------------------------------------------------------------------
- icmSetWallClockFactor added
  (limits simulation to a factor of wallclock time).

- Platforms constructed in SystemC TLM2.0 can now use iteration to create arrays
  of components (processors in particular).

- Change of implementation of SystemC TLM2.0 interrupts.
  Note that interrupts are now implemented using the SystemC analysis port. This
  is to overcome the issue of excessive interrupt latency, and a functional bug.
  Platforms should now apply the bind() method of the output port to the corresponding
  input port. There is no longer need to bind unused inputs.

- Note that a sequence of  icmInit() .... icmTerminate() .... icmInit()
  (more than one simulation in a session) is not supported in this release.

- icmMapExternalMemory()
  The callbacks could receive real or virtual addresses. This is now fixed - the
  address will always be real.

- Adding extension libraries in OVP no longer causes a Fatal, this is now only
  an error with the extension library not being loaded.

- icmGetProcessorICount bug found and fixed (previously, it overstated the
  number of executed instructions when processors were in a halted state)

- Having multiple intercept plugins on an instance no longer stops the simulation.
  The simulation will continue but the intercept plugins specified will not be
  loaded.

MAKEFILE SYSTEM
-------------------------------------------------------------------------------
- The Makefiles provided for compiling Platforms and plugin intercept libraries
  have been modified to include the '-m32' flag for gcc. This is to help with
  compilation under 64 bit Linux

###############################################################################
##                                                                           ##
## Date 2009-03-19                                                           ##
##                                                                           ##
###############################################################################

Processor Semihost Libraries
-------------------------------------------------------------------------------
The processor semihost libraries have been standardized on Newlib.

Peripheral Endian Support
-------------------------------------------------------------------------------
Work is being carried out to add support for big endian to peripheral models.
At present some models support endian switching while others support only little
endian operation.
The default operation of a PSE peripheral model is the same as the host machine
i.e. on an x86 host this is little endian.

VMI View API
-------------------------------------------------------------------------------
New VMI header file vmiView.h provides the interface into the programmers view
that can be incorporated into models and used in conjunction with Imperas
Binary Intercept Technology and Imperas MP Debugger.

ARM Makefile Support
-------------------------------------------------------------------------------
The ARM model is an ISA model so the Makefile support has been changed to
reflect this. Previously specific cpu types were targeted for the toolchain, in
this release the architecture is targeted.
NOTE: The toolchain available with OVPsim is built for the ARM7. The ARM7
Makefile does not specify cpu or architecture type.

MMC API Interface
-------------------------------------------------------------------------------
Modification to the vmimmcGetUns64Attribute API function to return a
de-referenced flag indicating if the attribute was found. the function prototype
now becomes:
Uns64 vmimmcGetUns64Attribute(vmimmcComponentP component,
                              const char *name,
                              Bool *found);


MIPS32 Processor Model
-------------------------------------------------------------------------------
The TLB model has been extensively reworked to improve performance by up to 7x
in O/S emulation mode (when attribute hiddenTLBentries is non-zero).

The 34K variant of the model has additional attributes to override the default
settings of the number of VPEs and TCs in the MVConf0 Register.

The MIPS32 processor model now has support for the DSP ASE, adding DSP
instructions to the model configurations that include this.

The attribute 'variant' is now used instead of the deprecated 'modelconfig'
attribute (this is however still supported for backwards compatibility but will
not be added to as new variants become available)

VMI INTERFACE
-------------------------------------------------------------------------------
Align exception handlers (VMI_RD_ALIGN_EXCEPT_FN, VMI_WR_ALIGN_EXCEPT_FN) now
support efficient snapping of misaligned load/store addresses: see
OVP_Processor_Modeling_Guide.pdf (Misaligned Address Snapping) for details.

vmirtWriteNetPort added, allowing processor models to create net events

ICM API
-------------------------------------------------------------------------------
Added wildcard capability to icmGetVlnvString (see Doxygen).

###############################################################################
##                                                                           ##
## Date 2009-01-22                                                           ##
##                                                                           ##
###############################################################################

New MMC library created
-------------------------------------------------------------------------------
A new generic MMC (Memory Mapped Component) library has been created within the
ovpworld.org vendor. This will contain all MMC component models created by
ovpworld.org. The cache models are moved from the library cache to the MMC
library.

SystemC TLM2.0
-------------------------------------------------------------------------------
Added TLM2.0 implementations of mips32 family, arc6xx and arc7xx, or1k and arm7
processor models.
Source is in ImperasLib/source/ovpworld.org/processor/mips32/1.0/tlm2.0 etc.
These use the generic model ImpPublic/source/host/tlm2.0/ovpCpu.cpp
They must be compiled in your own SystemC environment.
See Examples/Platforms/SystemC_TLM2.0 for how to do this.

There is also a full user guide in the doc/ovp directory.

New Peripheral and Change to MIPS Malta Platform
-------------------------------------------------------------------------------
A new peripheral 'SmartLoaderLinux' has been added to the library. This
replaces 'SmartPromInit' in the Malta platform. It performs a more accurate
initialization of the systems Flash memory components and the Linux kernel
command string.

Processor Models
-------------------------------------------------------------------------------
Added Support for ARC600 and ARC700, including demo platforms:
    Demo/OVPsim_manycore24_arc
    Demo/OVPsim_multicore2_arc
    Demo/OVPsim_single_arc

Library Re-Organization
-------------------------------------------------------------------------------
The library 'ImperasLib' has been re-organized to more clearly distinguish
between components provided as part of OVP and those that are made available
with the Imperas professional tools. Where platforms explicitly select
components they may need to be updated.

- Most peripheral models are released by OVP so have been moved under the
  ovpworld.org vendor
- The MIPS32, OR1K and ARM processor models released as part of OVP have been
  moved to the ovpworld.org vendor
- All cache models are released by OVP so have been moved under the
  ovpworld.org vendor
- A new library 'interception' has been created to contain general interception
  i.e. non-semihosting libraries. This allowed the semihosting directories to be
  rationalized, so that only semihosting libraries are contained within.
- A new library has been created ovpworld.org/modelSupport. This contains some
  common libraries used to support model development.

VMI INTERFACE
-------------------------------------------------------------------------------
- Added vmidNewEntryFmtBin (add new decode table entry from binary format)
- Added vmimtUnopRC (unary operation with constant argument)
- Added vmimtBinopRCR (binary operation with constant and register arguments)
- Added vmimtCompareCR (compare constant and register)
- Added vmimtCondMoveRRR, vmimtCondMoveRRC, vmimtCondMoveRCR and
  vmimtCondMoveRCC (conditional move based on flag value)
- New emitTrace argument to VMI_MORPH_FN callback (true if instruction tracing
  is enabled)
- New isTrace argument to VMI_DEBUG_FN callback (true if register dump is being
  emitted during instruction trace)
- New isException argument to VMI_DEBUG_FN callback (true if register dump is being
  emitted for instruction that is causing an exception)
- vmiIFetchFn prototype has been changed to allow register dumps to be emitted
  either before or after model state change (previously, they were always
  emitted after state change)

ICM API
-------------------------------------------------------------------------------
- Added ICM version check
  -  icmInit now performs a version check to ensure that the version of
     the runtime library, is the same as the version which the platform was
     compiled against
- Added icmReadBus() and icmWriteBus()
    Direct read/write to a bus (and anything connected to it).
- Added icmNetPortP  object representing a model's interrupt connection.
  - icmFindProcessorNetPort() Locate a model's net port
  - icmNextProcessorNetPort() Processor interrupt port iterator
  - icmNextPseNetPort()       PSE interrupt port iterator
  - icmNetPortName            Name of port
  - icmNetPortDirection       Direction of port
- Added icmLoadNativeMemory() Load an ELF file into the user's native memory.
- Added useEntry argument to icmLoadProcessorMemory()
      If false, do NOT set the PC to the entry point found in the object file.
      Set this to True for backward compatibility.

- Added argument to icmNewBusBridge()
      So that bridge can have different name on each bus,
      or two names when the bridge loops onto the same bus.

      The same applies to icmBusObject::newBridge()

- Added icmBridgeBuses(), icmUnbridgeBuses()
      creates/deletes a dynamic bridge between 2 buses.

- Added icmSimulationStarting() for use in a platform with PSEs but
  no processors.

ICM C++ API
-------------------------------------------------------------------------------
Many enhancements to the ICM C++ interface including:
-     icmBusObject::mapExternalMemory()
-     icmBusObject::mapNativeMemory()
-     icmBusObject::loadMemory()
-     icmBusObject::bridge() & unbridge()
-     icmProcessorObject::loadNativeMemory()
-     icmProcessorObject::setPC()
-     icmProcessorObject::findNetPort() etc.
-     icmPseObject::connect()     direct connection to user code.
-     icmPseObject::findNetPort()
-     icmPseObject::access()
-     icmPlatformObject::simulationStarting()

CACHE MODELS
-------------------------------------------------------------------------------
A number of cache models implemented using the Memory Mapped Component (MMC)
API have been added to the library. These offer a range of configurations that
can be added to provide different behaviors.


###############################################################################
##                                                                           ##
## Date 2008-10-22                                                           ##
##                                                                           ##
###############################################################################

AUTOMATIC WEB UPDATE CHECK
-------------------------------------------------------------------------------
This release includes a new feature which will access the OVP website to see if
a newer version of the OVP simulator is available. If you wish to disable this
feature, please simply uncheck the item :-
	"updatecheck"
in the Installer "Choose Components" screen.
Alternately, after installation you can simply delete the executable from the
installation Directory, the executable to remove is called :-
	"imperasOVP_versionCheck.exe"

EXAMPLES
-------------------------------------------------------------------------------
The examples found in Examples/Platforms have been updated to make use of the
generic Makefiles provided with the installation.

A new example Examples/Platforms/peripheral shows the instantiation of a
peripheral model into an ICM platform. This also shows the use of ICM functions
to allow a custom scheduling algorithm using icmSimulate() and icmAdvanceTime().

MIPS32 MODEL
-------------------------------------------------------------------------------
- MIPS16e instructions implemented and validated;
- 24KEc/24KEf variants added.

ICM INTERFACE (icmCpuManager.h)
-------------------------------------------------------------------------------
- ICM_ATTR_TRACE_REGS deprecated. Use either or both of:
    ICM_ATTR_TRACE_REGS_BEFORE to dump register values before each instruction;
    ICM_ATTR_TRACE_REGS_AFTER to dump register values after each instruction;

New features:
- Simulator control attributes :
    ICM_DISASSEMBLE_LABELS         during disassembly, look up addresses in symbol tables
    ICM_PRINT_USER_ATTRIBUTES      before simulation, print list of user attributes

- MMC instance interface:
    type icmMmcP
    icmNewMMC()                 create an MMC instance
    icmConnectMMCBus()          MMC connection
    icmConnectTransparentMMC()
    icmChainTransparentMMC()
    icmFreeMMC()

- Access to loaded object (image) files:

    type icmImagefileP:
    icmLoadProcessorMemory()   Now returns an icmImagefile object.
    icmLoadBus()               Loads an ELF binary file onto a bus.
    icmEndian                  Endian-ness enumeration
    icmGetImagefileEndian()    Return the endian-ness of a loaded object
    icmGetImagefileElfcode()   Return the ELF processor type code of a loaded object
    icmGetImagefileEntry()     Find the entry point of a loaded object
    icmGetProcessorImagefile() Return a processor's associated image file

- Access to what processor registers are used for:
    icmRegUsage                Processor register usage enumeration
    icmGetRegInfoUsage         Return the register usage

- Access to all user-defined model attributes:
    icmIterAllUserAttributes()

- Force a processor to start at a different address:
    icmSetPC()

-- Control how OVP prints processor names:
    icmInstallObjectNameFn()

- Access to VMI Symmetric Multiprocessor (SMP) features
   icmGetSMPParent()
   icmGetSMPChild()
   icmGetSMPPrevSibling()
   icmGetSMPNextSibling()
   icmGetSMPIndex()
   icmIterAllChildren()

Deprecated icmStopReasons:
    ICM_SR_WATCHPOINT          Watchpoint encountered
    ICM_SR_BP_ICOUNT           Instruction count breakpoint encountered
    ICM_SR_BP_ADDRESS          Address breakpoint encountered

Control of seed for randomizing processor execution order:
    icmSetSimulationRandomSeed()

- Associated a handle with a processor instance
    icmNewProcessorWithHandle()
    icmGetProcessorHandle()

ICM++ INTERFACE (icmCpuManager.hpp)
-------------------------------------------------------------------------------
- Introduced icmPlatform class with simulation control methods:

    setSimulationTimePrecision();
    setSimulationTimeSlice();
    setSimulationStopTime();
    setSimulationRandomSeed();
    setDebugMode();
    simulate();

- icmAttrListObject:: methods renamed
        addUns64Attr    to     addAttr
        addStringAttr   to     addAttr
        addDoubleAttr   to     addAttr

- Introduced icmMmcObject:: class with construction and connection methods:
        icmMmcObject();
        ~icmMmcObject();
        connect();
        chainTransparent();

- Renamed methods:

    icmMemoryObject::
        connectBus()     to    connect()

    icmProcessorObject::
        connectBus()     to    connect()
        connectNet()     to    connect()

    icmPseObject::
        connectBus()     to    connect()
        connectNet()     to    connect()

- Added methods to icmProcessorObject::
    setGdbPath))
    regUsage()
    regBits()

    getSMPParent();
    getSMPChild();
    getSMPPrevSibling();
    getSMPNextSibling();
    getSMPIndex();

- Added methods to icmPseObject::
    addInterceptObject()

##
## Started 2008-07-07
##


###############################################################################
#                       CHANGELOG.MODEL.RISCV.txt                             #
#      Copyright (c) 2005-2021 Imperas Software Ltd., www.imperas.com         #
#               Covered under your Software License Agreement                 #
#                                                                             #
###############################################################################
#                                                                             #
# This CHANGELOG contains information specific to the RISC-V processor model  #
# Please also refer to the change logs below that form part of this changelog #
#    CHANGELOG.OVP.txt                                                        #
#                                                                             #
# NOTE: X-commit messages below refer to git commits in the following Risc-V  #
#       specification document repositories:                                  #
#  I-commit: https://github.com/riscv/riscv-isa-manual                        #
#  V-commit: https://github.com/riscv/riscv-v-spec                            #
#                                                                             #
###############################################################################
    Date : 20211231                        Version : 20211118.0
###############################################################################

###############################################################################
##                                                                           ##
## Date 2021-December-06                                                     ##
##                                                                           ##
## Release 20211118.0                                                        ##
##                                                                           ##
###############################################################################

- Some corner case behaviors for SIMD extension saturating instructions have
  been corrected. Instructions affected are KMDA, KMSDA, KMSXDA, KMSDA32 and
  KMSXDA32.
- New parameter use_hw_reg_names enables use of hardware register names x0-x31
  and f0-f31 instead of ABI register names. This affects tracing and all
  register access by name via the OP API.
- getXRegName, getFRegName and getVRegName members of the riscvModelCB model
  extension structure now require an additional riscv processor argument.
- Extension Svpbmt is now implemented and enabled using the Svpbmt parameter if
  required.
- Extension Svinval is now implemented and enabled using the Svinval parameter 
  if required.
- Extension Svnapot is now implemented with intermediate page sizes specified
  using the Svnapot_page_mask parameter if required.
- Extension Zicbom is now implemented and enabled using the Zicbom parameter if
  required.
- Extension Zicbop is now implemented and enabled using the Zicbop parameter if
  required.
- Extension Zicboz is now implemented and enabled using the Zicboz parameter if
  required.
- Extension Zmmul is now implemented and enabled using the Zmmul parameter if
  required.
- Extension Zfhmin is now implemented and enabled using the Zfhmin parameter if
  required.
- Extension Smepmp version 0.9.5 is now implemented and enabled using the
  Smepmp_version parameter if required.
- When the Hypervisor extension is implemented, custom interrupts may now be
  delegated to VS mode using hideleg.
- When the Hypervisor extension is implemented, only interrupts delegated by
  mideleg are now visible in hideleg, hip and hie.
- Syndromes are now reported in mtinst and htinst for all access and alignment
  faults; previously, only page faults caused syndromes to be reported.  
- New User Architecture version 20191213 has been added. This is identical to
  previously-existing version 20190305, but has a name conforming to the
  ratified version of the User Architecture specification.
- New Privileged Architecture version 20190608 has been added. This is identical
  to previously-existing version 20190405, but has a name conforming to the
  ratified version of the Privileged Architecture specification.
- The master Privileged Architecture version now supports these new CSRs:
  - mconfigptr  (always implemented)
  - mseccfg     (when Cryptographic Extension 0.9.2 or later also selected)
  - menvcfg     (always implemented)
  - menvcfgh    (when RV32)
  - senvcfg     (when Supervisor mode implemented)
  - henvcfg     (when Hypervisor mode implemented)
  - henvcfgh    (when RV32 Hypervisor mode implemented)
- For K extension 1.0.0-rc1 and later, a bug has been fixed which caused
  sha256sum0, sha256sum1, sha256sig0 and sha256sig1 to generate Illegal
  Instruction exceptions.
- New parameter trap_preserves_lr defines whether an active LR/SC transaction is
  preserved on a trap (if False, any active LR/SC is aborted when a trap is
  taken).
- An issue has been corrected that could cause the htinst address offset to
  be incorrectly filled for a guest page fault (when Hypervisor mode is
  implemented).
- An issue has been corrected that prevented pending interrupts being
  immediately taken after transition from CLIC mode to non-CLIC mode.
- DSP (P) Extension version 0.9.6 is implemented.
- If the B extension is present, from version 1.0.0 it is implicitly always 
  enabled and not subject to control by misa.B, which is zero.
- If the K extension is present, from version 1.0.0-rc1 it is implicitly always 
  enabled and not subject to control by misa.K, which is zero.
- Some minor vector extension changes have been implemented on the master
  version:
  - V-commit 8fab4e3: instruction vpopc.m renamed vcpop.m;
  - V-commit c027517: instruction vmandnot.mm renamed vmandn.mm;
  - V-commit c027517: instruction vmornot.mm renamed vmorn.mm.

###############################################################################
##                                                                           ##
## Date 2021-September-17                                                    ##
##                                                                           ##
## Release 20210917.0                                                        ##
##                                                                           ##
###############################################################################

- DSP (P) Extension version 0.5.2 is implemented.
- A page table walk encountering an Sv39/Sv48 PTE with reserved bits 63:54
  non-zero now causes a Page Fault exception, conforming with the evolving
  Privileged Specification.
- Behavior of parameter counteren_mask has been modified so that it only affects
  the writable bits in counteren CSRs and does not make unimplemented counters
  undefined, to conform with the Privileged Specification which states that 
  unimplemented counters must appear hard-wired to zero.
- An issue has been corrected that caused stale PMP TOR mappings to be preserved
  when lower bound address registers were modified.
- A bug has been corrected that caused the value of instret to be incorrect
  when an address match trigger and halt request interrupt occur simultaneously.
- New cryptographic version 1.0.0-rc has been added, with these differences
  compared to the previous 0.9.2 version:
  - aes32* opcodes have been changed;
  - all scalar crypto specific instructions which produce 32-bit results now 
    sign-extend them to XLEN bits where relevant (previously they were zero 
    extended);
  - encodings for ES16 and WAIT states have changed.
- Some Hypervisor extension issues have been corrected:
  - an HLVX instruction failing because of fault when reading a stage 1 table
    address is now reported as a load fault, not an instruction fault;
  - update of xstatus.GVA on a memory fault has been corrected.
- The default value of parameter tval_zero_ebreak has been changed to False,
  conforming to Privileged Architecture specification clarifications of
  13 October 2020 (see https://github.com/riscv/riscv-isa-manual/pull/601)
- CLIC behavior has been enhanced:
  - Version 20180831 has been added (a legacy configuration required by some
    SiFive cores).
  - New parameters posedge_0_63, poslevel_0_63, posedge_other and poslevel_other
    enable some interrupts to be specified as fixed positive edge and fixed
    positive level triggered if required.
  - The riscv.ovpworld.org RISC-V model now implements software interrupts (0-3
    and 12) as fixed positive edge triggered by default. This choice can be
    changed using the parameters described above.
- NMI implementation has been enhanced:
  - New port nmi_cause allows cause of NMI exception to be applied externally;
  - Resumable NMI extension version 0.2.1 is now implemented if parameter
    rnmi_version is set to "0.2.1".
- When connected to a client gdb, floating point register values are now
  available using 'p' packet transactions instead of being passed in the 'p'
  packet (which does not work reliably on some versions of gdb).
- CLIC behavior when exceptions occur in trap vector table reads occur has been
  corrected - this is now indicated by setting inhv in the source mode cause
  register (previously, it was indicated by setting inhv in the target mode
  cause register)
- Debug Mode has been enhanced:
  - Version 1.0.0 has been defined;
  - Trigger matching using sbytemask in textra32/textra64 is now implemented.

###############################################################################
##                                                                           ##
## Date 2021-June-18                                                         ##
##                                                                           ##
## Release 20210617.0                                                        ##
##                                                                           ##
###############################################################################

- New cryptographic version 0.9.2 has been added, with these differences
  compared to the previous 0.9.0 version:
  - aes32* and sm4* instruction encodings have been changed;
  - Extensions Zbkx, Zbkc and Zbkb have been implemented;
  - packu[w] and rev8.w instructions have been removed from Zbkb;
  - mentropy CSR has been removed;
  - sentropy and mseccnf CSRs have been added.
- New vector version 1.0-rc1-20210608 has been added, with these differences
  compared to the previous 1.0-draft-20210130 version:
  - V-commit c841730: whole-register loads and stores use the encoded EEW to 
    determine element size (previously, this was a hint and element size 8 was 
    used);
  - V-commit 4ab6506: vle1.v/vse1.v renamed vlm.v/vsm.v;
  - V-commit a66753c: vfredsum.vs/vfwredsum.vs renamed vfredusum.vs/
    vfwredusum.vs;
  - V-commit 808a6f8: parameters Zve32x, Zve32f, Zve64x, Zve64f and Zve64d have
    been added to enable embedded profiles.
- Writes to PMP configuration registers that attempt to set the reserved
  combination R=0/W=1 now set R=0/W=0 instead (following WARL semantics).
- New Boolean parameter agnostic_ones has been added; when True, agnostic
  elements of vector registers will be filled with ones; when False, they will
  be left undisturbed.
- New Boolean parameter enable_fflags_i has been added; when True, an additional
  8-bit artifact register fflags_i is configured, which reports the floating 
  point flags set by the current instruction only (unlike the standard fflags
  CSR, which reports cumulative results). 
- New parameters mtvec_sext, stvec_sext, utvec_sext, mtvt_sext, stvt_sext and
  utvt_sext enable sign-extension of xtvec and xtvt registers from the most
  significant writable bit (as specified by equivalent mask parameters).
- Behavior of xperm.w has been corrected for large rs2 values.
- For SC instructions, both alignment and access permissions are now checked
  irrespective of whether a reservation is active. Previously, only alignment
  constraints were checked if the reservation was inactive.
- Writes to CSRs that disable counters (e.g. mcountinhibit) now take effect
  before the next instruction instead of on the current instruction.
- Behavior for Privileged Version 1.11 has been changed so that ECALL and EBREAK
  instructions no longer count as retired (as specified in version 1.12), since
  this appears to be an omission from the 1.11 specification and not an
  intentional enhancement in version 1.12.
- Zfinx version 0.41 is implemented. This is identical to version 0.4 except
  that misa fields F, D and Q are hardwired to zero.
- CLIC behavior when Selective Hardware Vectoring is enabled has been modified
  to allow recovery from vertical traps.
- Triggers that cause exceptions now write xtval registers with any address
  causing the trigger, instead of the current program counter.

###############################################################################
##                                                                           ##
## Date 2021-April-08                                                        ##
##                                                                           ##
## Release 20210408.0                                                        ##
##                                                                           ##
###############################################################################

- A bug has been fixed in which TLB entry mappings were not correctly
  invalidated by hfence.gvma if those mappings were used for Guest page table
  walks.
- Some Vector Extension issues have been corrected:
  - For whole-register load/store instructions, the memory layout has been
    corrected so that the lowest-numbered vector register is held in the 
    lowest-numbered memory addresses and successive vector register numbers are
    placed contiguously in memory
- New parameter PMP_decompose forces unaligned PMP accesses to be decomposed
  into separate aligned accesses.
- Decodes for Bit Manipulation instructions greviw, gorciw, sloiw, sroiw and 
  roriw have been corrected.
- Scalar floating point fmin/fmax operations now execute successfully when the
  current rounding mode is illegal; previously, an Illegal Instruction
  exception was raised.
- New parameter endianFixed forces mstatus.{MBE,SBE,UBE} to be read-only.
- New parameter Zfinx_version enables option to reuse the integer register file
  for all floating point instructions.
- Behavior has changed so that mstatus.FS is writable if Supervisor mode is
  implemented and floating point is absent. The previous behavior may be
  obtained using parameter mstatus_FS_zero if required.
- New optional reset_addr and nmi_addr nets allow addresses for reset and NMI
  exceptions to by asserted externally if required.
- Support for half-precision scalar floating point has been added, with format
  defined by parameter fp16_version.
- Access fault exceptions are now raised for misaligned LR/SC/AMO operations
  if a normal load or store using that address and access width would succeed;
  previously, such accesses caused address misaligned exceptions (see section
  "Physical Memory Attributes" in the RISC-V Privileged Architecture 
  specification).
- Default bit manipulation changed to v0.93-draft
  - Note this is not a released version and so is correct as of the 
    snapshot date June 2020 
- The trigger module has been partially implemented - see variant-specific 
  documentation.
- RISC-V semihost libraries now support reporting non-zero return codes on
  intercepted calls to the _exit() function as simulation errors, thus
  causing the simulator to pass a non-zero return code to the host. This can
  be useful when running suites of pass/fail tests, to allow the script that
  invokes the simulator to determine when the test has failed.
  This is controlled by the new boolean parameter 'reportExitErrors' on 
  the riscv32Newlib, riscv64Newlib and and pk semihost libraries. Setting this 
  parameter to True will enable this behavior (the default is False.)  
- PMP/PMA simulated region mappings can be constrained to a maximum page size
  by new parameter 'PMP_max_page'. Constraining the maximum page size to a
  limited value (e.g. 0x8000 bytes) can sometimes improve simulation
  performance. Note that this parameter affects simulation only and has no 
  architectural effect on the model.
- Some issues related to Debug mode have been corrected:
  - Behavior of dcsr.prv has changed to ensure that it only holds valid modes
    for the processor type;
  - All non-ecall debug exceptions are now reported with code 3 (breakpoint)
    by the processor current exception support function - the exact reason can
    be determined by reading dcsr.cause;
  - Single-step of instructions that cause exceptions or switch mode has been
    corrected: previously, an extra instruction was executed before entering
    Debug mode in these cases;
  - Asserting the 'haltreq' signal now causes exit from WFI state;
  - WFI in single-step mode is now treated as a NOP;
  - A write to the DM register sets dcsr cause field to 2 (signifying a
    breakpoint by the Trigger Module) when entering Debug mode.
- Accesses to interrupt pending registers (e.g. mip) using csrrs and csrrc now
  return the external value of any interrupt that is not software-writable
  (previously, zero was returned for such interrupts). Software-writable
  interrupts return the value of the software-writable bit only, as previously.
- Debug mode step breakpoint is now implemented as an interrupt before the
  start of the next instruction.
- Reads of instret and cycle CSRs now exclude the current instruction from the
  reported count.
- mintstatus, sintstatus and uintstatus CSRs have been reassigned to addresses
  0x346, 0x146 and 0x046, respectively.
- Some Vector Extension issues have been corrected:
  - For vector version 0.8, instruction vid.v v0, v0.m is now legal; previously,
    an Illegal Instruction was generated. This has no effect for vector version
    0.9 and later;
  - vfslide1up.vf and vfslide1down.vf now correctly detect illegal floating
    point SEW.
  - whole-register move instructions now respect the current setting of vstart
    (elements with index < vstart are not modified).
  - whole-register load/store instructions now allow register counts of 2, 4 or
    8 in addition to 1 for vector versions 1.0-draft-20210130 and master.
  - vmsbf.m, vmsif.m and vmsof.m no longer allow overlap of destination with 
    source or mask registers for vector version 0.9 and later.
- New vector version 1.0-draft-20210130 added, with these differences compared
  to the previous 0.9 version:
  - V-commit 7facdcc: SLEN=VLEN register layout is mandatory;
  - V-commit b454810: ELEN>VLEN is now supported for LMUL>1;
  - V-commit 20f673c: Whole register moves and load/stores now have element size
    hints;
  - V-commit 443ce5b: Overlap constraints for different source/destination EEW
    changed;
  - V-commit d35b23f: Instructions vfrsqrte7.v and vfrece7.v added;
  - V-commit a679250: Instruction vrgatherei16.vv added;
  - V-commit b8cd98b: CSR vtype format changed to make vlmul bits contiguous;
  - V-commit 579fef9: vsetvli x0, x0, imm instruction is reserved if it would
    cause vl to change;
  - V-commit 511d0b8: ordered/unordered indexed vector memory instructions
    added;
  - V-commit 7cf5349: vle1.v and vse1.v instructions added.
  - V-commit 8bf26e8: vsetivli instruction added.
- New parameter vill_trap can be used to specify that illegal updates to the
  vtype register cause an Illegal Instruction trap instead of setting 
  vtype.vill=1.
- Bit-Manipulation Extension version 0.93 has been created. This differs from
  the previous 0.93-draft as follows:
  - exchange encodings of max and minu instructions;
  - add xperm.[nbhw] instructions;
  - instructions named *u.w renamed to *.uw;
  - instructions named sb* renamed to b*;
  - instructions named pcnt* renamed to cpop*;
  - instructions subu.w, addiwu, addwu, subwu, clmulw, clmulrw and clmulhw
    removed.
  - instructions bext/bdep renamed to bcompress/bdecompress (this change is 
    documented under the draft 0.94 version but is required to resolve an 
    instruction name conflict introduced by instruction renames above).
- Bit-Manipulation Extension draft version 0.94 has been updated as follows:
  - instructions bset[i]w, bclr[i]w, binv[i]w and bextw removed.

- sifive.ovpworld.org variant changes
  - U54MC, U74MC, E76MC and S76MC variants, which provided 4 harts as default,
    have been removed. The variants U54, U74, E76 and S76 respectively should
    now be used with numHarts set to the required number of harts (default 1). 
  - Variants that can be configured for 1+ harts will now have an extra level
    of hierarchy i.e. a parent with children corresponding to the number of
    harts. The naming will show these as <cpu instance name>_hartX where X is
    configured starting at mhartid (default 0).
    Variants that can only have a single hart remain named by the cpu instance 
    name with only the top-level processor.

###############################################################################
##                                                                           ##
## Date 2020-June-30                                                         ##
##                                                                           ##
## Release 20200630.0                                                        ##
##                                                                           ##
###############################################################################

- Vector Extension
  - behavior of vslidedown.vx and vslidedown.vi with a slide of 0 when source
    and destination vector registers are the same has been corrected.
  - sstatus.VS field alias has been implemented in its new position (from
    specification version 0.9).
  - Checking of overlap of vector registers for vector indexed segment loads and
    stores has been corrected.
- Core-Local Interrupt Controller (CLIC)
  - address for xintthresh CSRs have been changed to 0xm47 (previously 0xm4A)
- The Bit-Manipulation Extension is now implemented in the model, with version
  defined by parameter bitmanip_version.
  - When enabled, parameters Zba, Zbb, Zbc, Zbe, Zbf, Zbm, Zbp, Zbr, Zbs and Zbt
    allow the precise subset of supported instructions to be specified.
- Cryptographic extension is now implemented in the model with version defined
  using by parameter crypto_version (0.7.2, 0.8.1 or 0.9.0).
  - When enabled, parameters Zkb, Zkg, Zkr, Zknd, Zkne, Zknh, Zksed and Zksh
    allow the precise subset of supported instructions to be specified.
- Memory accesses that straddle PMP region boundaries are now disallowed.
- EBREAK now sets tval to 0 if priv_version is set to master.
- EBREAK and ECALL no longer count as retired instructions if priv_version
  is set to master.
- SC instruction behavior has been changed so that store address alignment is
  validated even if the reservation check fails (previously, alignment was
  validated only if the reservation check succeeded).
- Masking of the mcountinhibit CSR has been corrected - previously, bit 1 and
  bits 63...32 were writeable when they should have been 0.
- The nmi signal has been corrected to match the documented behavior, execution
  resumes at the nmi_address parameter value when the nmi signal goes high
- Support for the SiFive custom instruction CFLUSH.D.L1 and the custom CSR
  featureDisable has been added to the following sifive.ovpworld.org riscv 
  processor model variants: E76, E76MC, S76, S76MC, U74 and U74MC.
  Previously these would cause an exception when used. 
  Note that these are essentially NOPs since the behavior they affect, (caches
  and micro-architectural behavior) is not modeled in the OVP instruction 
  accurate model.
- The optional Core-Local Interrupt Controller (CLIC) has been implemented
  (version 0.9-draft-20191208).
- The priority order for handling simultaneous interrupts destined for the
  same privilege level has been corrected (previously, these were handled so
  that higher interrupt numbers were higher priority).
- Support for Debug mode has been added; see RISCV processor documentation for
  more details.
- The priv_version parameter now includes a choice of 'master', which specifies
  that the evolving 1.12 Privileged Architecture Specification should be used.
  This has the following changes compared to the ratified 1.11 version:
  - MRET and SRET instruction clear mstatus.MPRV when leaving M-mode;
  - For RV32, a new mstatush CSR has been added;
  - Data endian is now configurable using UBE, SBE and MBE fields in mstatus
    and the new mstatush CSR.
- Some details of CSR access behavior have been corrected:
  - For Vector Extension version 0.8, access to vxsat and vxrm now requires both
    mstatus.FS and mstatus.VS to be non-zero; previously, only non-zero
    mstatus.FS was required. Note that from Vector Extension version 0.9
    onwards, only mstatus.VS is required because these two fields are now
    aliased in the new vcsr CSR instead of the fcsr CSR.
- An issue has been fixed in which an incorrect exception was raised on an
  access error during a page table walk.
- A bug in the Riscv pk and newlib semihost libraries that could cause problems 
  with the heap when save/restore was used has been fixed.
- v0.92 Bit-Manipulation
  - Added missing sign extension of registers for *w instructions on 64-bit 
    processors when VLEN > 32.
- The model extension callback functions writeReg and writeRegSize now accept
  a signExtend argument to specify whether the value should be sign extended
  for X register targets.
- Memory exceptions now produce information about the failure in verbose mode.
- New parameter require_vstart0 has been added to control whether
  non-interruptible Vector Extension instructions require CSR vstart to be zero.
- New parameter SEW_min has been added to specify the minimum SEW supported when
  the Vector Extension is implemented; the default is 8 bits.
- When the Vector Extension is implemented, the maximum VLEN value supported
  has increased from 2048 to 65536 bits.
- Some Vector Extension issues have been corrected:
  - Parameter order shown by disassembly of vector AMO instructions has been
    corrected. Model behavior is not affected by this change.
  - Encodings of VFUNARY0/VFUNARY1 instructions have been corrected for Vector
    Extension version 0.9.
  - Encodings of integer extension instructions have been corrected for Vector
    Extension version 0.9.
  - Alignment of vector register groups when explicit EEW is being used has been
    corrected for Vector Extension version 0.9.
  - All vector floating point instructions now generate Illegal Instruction
    exceptions if the current rounding mode is invalid, even if those
    instructions do not use the rounding mode.
  - Behavior of vslidedown has been corrected in cases when vl<vlmax. Previously
    elements where source element i satisfied vl<=i+offset were being zeroed;
    now, elements where source element i satisfies vlmax<=i+offset are zeroed.
  - Behavior of vmv.x.s and vfmv.f.s has been corrected when vstart>=vl so that
    the result register is correctly updated (previously it was left unchanged 
    in this case).
  - Behavior of whole-register operations when vtype.vill=1 has been corrected.
    (these instructions should execute even when vtype.vill=1).
  - Behavior of vid.v has been corrected when vstart!=0.
  - Behavior of vpopc.m and vfirst.m has been corrected when vl==0.
  - Executing vsetvl/vsetvli instructions now sets vector state to dirty.
  - Behavior of whole-register operations when vstart!=0 has been corrected.
  - Vector segment load instructions now raise an illegal instruction if the
    destination vector register overlaps either source or mask.
  - Decodes for vqmaccus and vqmaccsu instructions have been exchanged to match
    the specification
  - Implementations of vmv.s.x, vfmv.f.s and vfmv.s.f have been corrected to
    prevent Illegal Instruction exceptions being reported for odd-numbered
    vector registers for non-zero LMUL. These instructions should ignore LMUL.
  - Instruction vfmv.s.f has been corrected to validate that the argument is
    NaN-boxed when required.
  - Instructions vfmv.s.f and vfmv.f.s now require that SEW is a supported
    floating point size (pending vector specification clarification).
  - V-commit b9fd7c9: For vector versions 0.8-draft-20190906 and later, vmv.s.x
    and vmv.x.s now sign extend their operands if required (previously, they
    were zero extended)
  - An issue has been corrected that caused a simulator error in blocks with
    some variants of vsetvl/vsetvli instructions.
  - vfmne behavior has been corrected to return 1 for unordered operands
    (previously, 0 was returned).
  - An issue has been corrected that caused some variants of AMO instructions
    discarding the operation result to cause Illegal Instruction exceptions
    incorrectly.
  - Reduction operations with destination overlapping a source are now legal
    when LMUL>1; previously, such operations caused Illegal Instruction
    exceptions.
  - Behavior of vsetvl instruction on RV64 base has been corrected
  - Behavior of vnclipu.wi and vnclip.wi instructions has been corrected
  - Behavior of some polymorphic instructions when vl=0 has been corrected
  - Vector AMO operations for memory element bits less than 32 now cause Illegal
    Instruction exceptions.
  - Alignment required for vector AMO operations accessing 32-bit data is now
    four bytes - previously, eight-byte alignment was required for SEW=64.
  - Encodings for vwmaccsu, vwmaccus, vwsmaccsu and vwsmaccus instruction
    variants has been changed in 0.8-draft-20191004 and master versions to
    comply with a specification change of September 17th 2019.
- Vector version 0.8-draft-20190906 has been added. The only difference between
  this version and the stable 0.8-draft-20191004 version is the encodings of
  vwsmaccsu and vwsmaccus instruction variants.
- Vector version 0.8-draft-20191117 has been added. Differences to the previous
  0.8-draft-20191004 version are as follows (with the associated specification
  V-commit identifiers):
  - V-commit 8d4492e: Indexed load/store instructions now zero extend offsets
    (in version 0.8-draft-20191004, they are sign-extended);
  - V-commit d06438e: vslide1up/vslide1down instructions now sign extend XLEN
    values to SEW length (in version 0.8-draft-20191004, they are
    zero-extended);
  - V-commit 5a038da: vadc/vsbc instruction encodings now require vm=0 (in 
    version 0.8-draft-20191004, they require vm=1);
  - V-commit 5a038da: vmadc/vmsbc instruction encodings now allow both vm=0,
    implying carry input is used, and vm=1, implying carry input is zero (in
    version 0.8-draft-20191004, only vm=1 is permitted implying carry input is
    used);
  - V-commit c2f3157: vaaddu.vv, vaaddu.vx, vasubu.vv and vasubu.vx
    instructions have been added;
  - V-commit c2f3157: vaadd.vv and vaadd.vx, instruction encodings have been
    changed;
  - V-commit c2f3157: vaadd.vi instruction has been removed;
  - V-commit 063b128: all widening saturating scaled multiply-add instructions
    have been removed;
  - V-commit 200a557: vqmaccu.vv, vqmaccu.vx, vqmacc.vv, vqmacc.vx, vqmacc.vx, 
    vqmaccsu.vx and vqmaccus.vx instructions have been added;
  - V-commit 7b02297: CSR vlenb has been added (giving vector register length
    in bytes);
  - V-commit 7b02297: load/store whole register instructions have been added;
  - V-commit 7b02297: whole register move instructions have been added.
- Vector version 0.8-draft-20191118 has been added. Differences to the previous
  0.8-draft-20191117 version are as follows (with the associated specification
  V-commit identifiers):
  - V-commit b6c48c3: vsetvl/vsetvli with rd!=zero and rs1=zero sets vl to the
    maximum vector length (previously, this combination preserved vl).
- Vector version 0.8 has been added. Differences compared to the previous 
  0.8-draft-20191118 version are as follows (with the associated specification
  V-commit identifiers):
  - V-commit a6f94e7: vector context status in mstatus register is now
    implemented;
  - V-commit 49cbd95: whole register load and store operations have been
    restricted to a single register only;
  - V-commit 49cbd95: whole register move operations have been restricted to
    aligned groups of 1, 2, 4 or 8 registers only.
- Vector version 0.9 has been added, and is now used by default. Differences
  compared to the previous 0.8 version are as follows (with the associated
  specification V-commit identifiers):
  - V-commit bdb8b55: mstatus.VS and sstatus.VS fields have moved to bits 10:9;
  - V-commit b25b643: new CSR vcsr has been added and fields VXSAT and VXRM
    fields relocated there from CSR fcsr;
  - V-commit 951b64f: mirrors of fcsr fields have been removed from vcsr.
  - V-commit 1aceea2: vfslide1up.vf and vfslide1down.vf instructions added.
  - V-commit e256d65: vfcvt.rtz.xu.f.v, vfcvt.rtz.x.f.v, vfwcvt.rtz.xu.f.v,
    vfwcvt.rtz.x.f.v, vfncvt.rtz.xu.f.v and vfncvt.rtz.x.f.v instructions added;
  - V-commit 8a9fbce (and others): fractional LMUL support added, controlled by
    an extended vtype.vlmul CSR field;
  - V-commit f414f4d (and others): vector tail agnostic and vector mask agnostic
    fields added to the vtype CSR;
  - V-commit a526fb9 (and others): all vector load/store instructions replaced
    with new instructions that explicitly encode EEW of data or index;
  - V-commit ef531ea: whole register load and store operation encodings changed;
  - V-commit bdc85cd: vzext.vf2, vsext.vf2, vzext.vf4, vsext.vf4, vzext.vf8 and
    vsext.vf8 instructions added;
  - V-commit 9a77e12: MLEN is always 1.
- The vector version master branch currently has these differences compared to
  the previous 0.9 version:
  - V-commit 443ce5b: overlap constraints for different source/destination EEW
    changed.
    
###############################################################################
##                                                                           ##
## Date 2019-November-06                                                     ##
##                                                                           ##
## Release 20191106.0                                                        ##
##                                                                           ##
###############################################################################

- Vector version 0.8-draft-20191004 has been added and is now used by default.
  The previous default version (0.7.1-draft-20190605) can be explicitly selected
  using parameter vector_version if required.
- Behavior for fault-only-first vector segment load instructions has been
  corrected.
- Behavior for vector atomic operations with 32-bit memory element width has 
  been corrected.
- Behavior for vector register gather operations when index>=VL and index<=VLMAX
  has been corrected.
- Vector atomic operations with SEW greater than XLEN now cause an Illegal
  Instruction exception.

###############################################################################
##                                                                           ##
## Date 2019-October-09                                                      ##
##                                                                           ##
## Release 20191009.0                                                        ##
##                                                                           ##
###############################################################################

- The model has a new parameter vector_version which can be used to select
  either the stable 0.7.1 Vector Extension (the default) or the unstable master
  branch. The master branch currently has the following changes compared to the
  stable 0.7.1 branch:
  - behavior of vsetvl and vsetvli instructions when rs1 = x0 preserves the
    current vl instead of selecting the maximum possible vl.
  - tail vector and scalar elements are preserved, not zeroed.
  - vext.s.v, vmford.vv and vmford.vf instructions have been removed;
  - encodings for vfmv.f.s, vfmv.s.f, vmv.s.x, vpopc.m, vfirst.m, vmsbf.m, 
    vmsif.m, vmsof.m, viota.m and vid.v instructions have changed;
  - overlap constraints for slideup and slidedown instructions have been relaxed
    to allow overlap of destination and mask when SEW=1.
  - 64-bit vector AMO operations have been replaced with SEW-width vector AMO
    operations.
  - The double-width source vector register group for narrowing operations is
    now signified by a 'w' in the source operand suffix. Previously, a 'v' was
    used.
  - Instruction vfncvt.rod.f.f.w has been added (to allow narrowing floating
    point conversions with jamming semantics).
  This set of changes will increase as the master specification evolves.
- Some vector extension issues have been corrected:
  - Behavior of vsetvl and vsetvli instructions when requested vector size
    exceeds the implementation limits has been corrected.
  - Two decodes for non-existent vector compare instructions have been removed.
  - The constraint on legal LMUL for segmented load/store operations has been
    changed from requiring LMUL=1 to requiring LMUL*NFIELDS<=8. This corresponds
    to a specification change made on 2019-June-06.
  - decodes for instructions which only exist in unmasked form have been
    changed so that the vm field in the instruction must be 1 (previously, this
    bit was treated as a don't-care).
  - instruction disassembly has been improved for 'move' instructions (this
    change does not affect model behavior).
  - A bug has been fixed which caused an error when an attempt was made to
    execute floating point instructions with a scalar argument and with SLEN
    less than 32.
  - A bug has been fixed which caused narrowing floating point/integer type
    conversion instructions targeting integer types to raise illegal instruction
    exceptions when the current SEW is smaller than the smallest supported
    floating point SEW. These instructions should be legal when SEW*2 is the
    smallest supported floating point SEW and SEW is legal for integer types.
- Data structures have been enhanced to allow multiple tightly-coupled extension
  libraries to be implemented for a single base model: each extension library
  can now define its own extension callbacks and client data.
- A bug has been fixed which caused some instructions that update the fcsr 
  register not to also update mstatus.FS when required.
- Parameter "fs_always_dirty" has been removed; new parameter "mstatus_fs_mode"
  has been added to allow the conditions under which mstatus.FS is set to Dirty
  to be specified more precisely. See processor variant documentation for a
  detailed description of the available options.
- A fix has been made to the cmix instruction so it no longer writes the t0 
  register. Note this is not in the base model, but in the extB prototype bit 
  manipulation extension library.
- New functions to support modeling Transactional Memory features in an 
  extension library have been added to the enhanced model support callbacks in 
  the base model. 
- Corrected memory sizing in the riscvOVPsim fixed platform to use address 
  range specified by argument addressbits.
- Fixed bug when using new vmi_IMULSU operation.
- Bug fixed which could cause incorrect results for floating point round or 
  convert to unsigned operations when non-vmi_FPR_CURRENT rounding modes are
  used in general arithmetic operations, as per RISC-V.
- A bug was fixed that could cause incorrect behavior when PMP region mappings
  change.

- Default semihosting has been changed to use the ecall and ebreak instruction
  as the interception point for the host to implement the system call. This
  uses the same set of syscall numbers which are defined as part of the proxy
  kernel library for newlib.

###############################################################################
##                                                                           ##
## Date 2019-June-28                                                         ##
##                                                                           ##
## Release 20190628.0                                                        ##
##                                                                           ##
###############################################################################

- Fixed bug that caused the Model Specific Documentation for the SiFive 
  U54MC model to be missing the sections under Overview.
- The vector extension is now implemented and enabled if the V bit is set in
  the misa register. Variants RV32GCV and RV64GCV have been added which enable
  this extension as standard. See the processor documentation for these variants
  for more information.
- New parameter 'add_Extensions' can be used to specify extensions to add to a
  base variant, by misa letter. For example, value "VD" specifies that vector
  and double-precision floating point extensions should be added.
- New parameter 'add_Extensions_mask' can be used to specify that bits in the
  misa register should be writable, by letter. For example, value "VD" specifies
  that vector and double-precision floating point extensions can be dynamically
  enabled.
- Newlib semihost library for RiscV processors now support the naming convention 
  for defining the start of the heap that is used by the linker scripts in
  the BSPs provided in the SiFive freedom-e-sdk.
- Semihosting of the _sbrk() function will now report an error if it is called 
  and cannot find the expected symbol that defines the start of the heap area.
- The Model Specific Information document for each variant now includes 
  information on the extensions that are supported by the model but not enabled 
  on the specific variant being documented. 
- Various changes have been made to implement conformance with Privileged
  Architecture specification 20190405-Priv-MSU-Ratification, as follows:
  - The priority order of synchronous exceptions has been modified;
  - A new parameter, xret_preserves_lr, allows specification that xRET
    instructions should preserve the current value of LR (if False, LR is
    cleared by these instructions);
  - Behavior of misa and xepc registers on systems with variable IALIGN has been
    changed to match the specification;
  - misa.I is now writable if the write mask permits it. misa.E is read only and
    always the complement of misa.I;
  - The mcountinhibit CSR has been implemented.
- Various changes have been made to implement conformance with Base Architecture
  specification 20190303-User-Ratification, as follows:
  - A new parameter, unalignedAMO, controls whether AMO instructions support
    unaligned addresses. LR/SC instructions now never support unaligned
    addresses.
  - RV32E may now be used in conjunction with other extensions. misa.E is now
    always a read-only complement of misa.I.
- The SFENCE.VMA instruction is now only supported if Supervisor mode is
  implemented.
- When Privileged Level version 1.11 is enabled (see the priv_version parameter)
  mstatus.TW is now writable if any Privilege Level other than Machine mode is
  implemented. When Privileged Level version 1.10 is enabled, this field is
  writable only if Supervisor mode is implemented.
- A bug has been fixed which caused PMP privileges to be incorrectly set in some
  cases (where a high priority unlocked region was disabled and covered the same
  address range as a lower priority locked region).
- The model has been simplified to use the built-in VMI RMM rounding mode
  support.

###############################################################################
##                                                                           ##
## Date 2019-March-06                                                        ##
##                                                                           ##
## Release 20190306.0                                                        ##
##                                                                           ##
###############################################################################

- Relaxed the fence instruction for finer grain as per specification of values
  for imm[11:0], rs1 and rd fields
- The model now supports save and restore.
- Field mstatus.MPP has been changed from WLRL to WARL in accordance with
  version 1.11 of the Privileged Specification). When written with an illegal
  value, the previous legal value is preserved.
- RMM rounding mode is now fully implemented for all operations.
- A bug has been fixed in which some floating point convert operations were not
  causing Illegal Instruction exceptions when rounding modes 5 and 6 were
  specified in the instruction.
- A bug has been fixed which could cause permissions for locked PMP regions to
  be ignored in Machine mode in some cases.
- A bug has been fixed which would prevent instruction access faults being
  raised in some circumstances for instructions that straddle PMP region
  boundaries.
- A new parameter PMP_grain allows the grain size (G) of PMP regions to be
  specified. For example, a value of 3 indicates that the smallest implemented
  PMP region size is 32 bytes.

###############################################################################
##                                                                           ##
## Date 2018-November-14                                                     ##
##                                                                           ##
## Release 20181114.0                                                        ##
##                                                                           ##
###############################################################################

- A bug has been fixed which allowed User mode accesses to unimplemented
  hardware performance registers irrespective of the settings in the counter
  enable registers.
- Instruction address misaligned faults are now taken on the branch or jump
  instruction instead of the target instruction.
- A bug has been fixed in which RV64 instructions like sraiw with shifts >= 32
  bits (e.g. sraiw a2,a2,0x20) did not cause an exception.
- A bug has been fixed in which compressed instructions with shifts >= 32 bits
  (e.g. srai a2,a2,0x20) did not cause an exception when RV64I is absent or
  disabled.
- Decode for compressed instructions c.addi4spn, c.addi16sp, c.lui, c.jr,
  c.addiw, c.lwsp and c.ldsp has been corrected to properly handle reserved
  cases.
- A bug has been fixed in which the source value of fmv.s instructions was not
  being checked as NaN-boxed.
- A bug has been fixed which caused sedeleg and sideleg registers to be present
  when user-level interrupts were present and supervisor mode was absent. These
  registers should be present only if both supervisor mode and user-level
  interrupts are present.

###############################################################################
##                                                                           ##
## Date 2018-August-03                                                       ##
##                                                                           ##
## Release 20180716.2                                                        ##
##                                                                           ##
###############################################################################

###############################################################################
##                                                                           ##
## Date 2018-July-16                                                         ##
##                                                                           ##
## Release 20180716.0                                                        ##
##                                                                           ##
###############################################################################

- The RISCV processor model has been changed to set the default initial PC at 
  simulation start to the value indicated by the processor model's reset_address
  parameter. Previously the default start address was 0x0.
  NOTE: The --startaddress command line argument or the start address from an 
  ELF file that is loaded will override this value.
  NOTE: The default value for the reset_address can vary by variant, since this
  is defined to be an implementation dependent value by the RISCV specification.
  See the Model Specific Information document to see what value is implemented 
  for a specific variant.
  
###############################################################################
##                                                                           ##
## Date 2018-March-12                                                        ##
##                                                                           ##
## Release 20180221.1                                                        ##
##                                                                           ##
###############################################################################

###############################################################################
##                                                                           ##
## Date 2018-February-21                                                     ##
##                                                                           ##
## Release 20180221.0                                                        ##
##                                                                           ##
###############################################################################

- The model has been extensively rewritten to implement privilege levels and
  state consistent with Privileged Architecture version 1.10, including virtual
  memory and physical memory protection registers.

###############################################################################
##                                                                           ##
## Date 2017-September-19                                                    ##
##                                                                           ##
## Release 20170919.0                                                        ##
##                                                                           ##
###############################################################################

This is the first release of the RISC-V models. There is a generic
model that implements the RISC-V ISA variants and there are vendor specific
cores.

To see the available processor models use:
    iss.exe --showlibraryprocessors
and to see the specific variants these contain use:
    iss.exe --showvariants --processorname riscv

###############################################################################
##                                                                           ##
## Date 2017-May-12                                                          ##
##                                                                           ##
## Release 20170511.0                                                        ##
##                                                                           ##
###############################################################################

- The model supporting variants RV32G, RV32I, RV64G and RV64I is released.
    
###############################################################################
##                                                                           ##
## Date 2017-February-01                                                     ##
##                                                                           ##
## Release 20170201.0                                                        ##
##                                                                           ##
###############################################################################

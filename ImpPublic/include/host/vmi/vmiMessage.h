/*
 *
 * Copyright (c) 2005-2021 Imperas Software Ltd., www.imperas.com
 *
 * The contents of this file are provided under the Software License Agreement
 * that you accepted before downloading this file.
 *
 * This header forms part of the Software but may be included and used unaltered
 * in derivative works.
 *
 * For more information, please visit www.OVPworld.org or www.imperas.com
 */

#pragma once

#include "hostapi/impTypes.h"
#include <stdarg.h>

//
// vmiMessage  - writes to stdout and log-file
//
// Arguments:
//    severity: is a string who 1st character is I, T, W, E, F, or A
//              I (info) T (trace) W (warning) E (user error)
//              F (fatal user error) A (internal error)
//              note that F & A cause the program to exit.
//
//    ident:    is either 0 or a string (of 5 or 6 characters) uniquely
//              identifying the messages
//
//    fmt, ...: printf style format string and arguments
//
void vmiMessage(const char *severity, const char *ident, const char *fmt, ...)
     __attribute__(( format (printf, 3,4)));

void vmiVMessage(const char *severity, const char *ident, const char *fmt, va_list ap);

//
// vmiPrintf - write to stdout and log-file
//
// Arguments:
//    fmt, ...: printf style format string and arguments
//
void vmiPrintf(const char *fmt, ...)
     __attribute__((format (printf, 1,2)));

void vmiVPrintf(const char *fmt, va_list ap);


//
// non-returning version of vmiMessage with a severity of "A"
// for use when there's an internal error with no recovery.
//
void vmiAbort(const char *ident, const char *fmt, ...)
     __attribute__((format (printf, 2,3), noreturn));


//
// VMI_CPU_DBG - Utility macro for debug messages using processor
//
// Useful macro for controlling debug messages generated by a processor model.
// Define CPU_DEBUG_FLAG to identify which bits in the processor flags should
// cause debug messages to be generated.
//
#define VMI_CPU_DBG(_PROC, _M, _FMT, ...)                               \
    do {                                                                \
        if (vmirtProcessorFlags(_PROC) & CPU_DEBUG_FLAG)                \
            vmiMessage("I", _M, _FMT,  ## __VA_ARGS__);                 \
    } while (0)


//
// VMI_ABORT - Utility macro for aborts
//
// Useful macro for code aborts. Define CPU_PREFIX to a string identifying
// the model.
//
#define VMI_ABORT(_FMT, ...)                                            \
    /* LCOV_EXCL_LINE */ vmiAbort(                                      \
            CPU_PREFIX "ABRT", "%s:%d:%s " _FMT,                        \
            __FILE__, __LINE__, __FUNCTION__, ## __VA_ARGS__ )          \

//
// VMI_ASSERT - Utility macro for asserts
//
// Useful macro for asserts. Define CPU_PREFIX to a string identifying
// the model.
//
#if defined(IMPERAS_BUILDDATE)
#define VMI_ASSERT(_COND, _FMT, ...)                                    \
    do {                                                                \
        if (!(_COND)) {                                                 \
            /* LCOV_EXCL_LINE */ vmiAbort(CPU_PREFIX                    \
            "ASRT", "%s:%d:%s " _FMT,                                   \
            __FILE__, __LINE__, __FUNCTION__, ## __VA_ARGS__ );         \
        }                                                               \
    } while (0)
#else
#define VMI_ASSERT(_COND, _FMT, ...)                                    \
    do {                                                                \
        if (!(_COND)) {                                                 \
            /* LCOV_EXCL_LINE */ vmiMessage("F", CPU_PREFIX             \
            "ASRT", "%s:%d:%s " _FMT,                                   \
            __FILE__, __LINE__, __FUNCTION__, ## __VA_ARGS__ );         \
        }                                                               \
    } while (0)
#endif

